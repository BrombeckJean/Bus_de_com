
Bus_de_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800109c  0800109c  0001109c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001108  08001108  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001108  08001108  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001108  08001108  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08001178  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001178  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002698  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a1e  00000000  00000000  00022730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00023150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00023378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abde  00000000  00000000  00023518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003043  00000000  00000000  0003e0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090980  00000000  00000000  00041139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1ab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cf8  00000000  00000000  000d1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001084 	.word	0x08001084

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08001084 	.word	0x08001084

08000204 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <GPIO_Init+0x30>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <GPIO_Init+0x30>)
 800020e:	f043 0305 	orr.w	r3, r3, #5
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <GPIO_Init+0x34>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <GPIO_Init+0x34>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <GPIO_Init+0x38>)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <GPIO_Init+0x38>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	40020800 	.word	0x40020800

08000240 <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	ticks++;
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <SysTick_Handler+0x18>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	4a03      	ldr	r2, [pc, #12]	; (8000258 <SysTick_Handler+0x18>)
 800024c:	6013      	str	r3, [r2, #0]
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	20000088 	.word	0x20000088

0800025c <main>:
#include "usart.h"
#include "timer.h"


int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	GPIO_Init();
 8000260:	f7ff ffd0 	bl	8000204 <GPIO_Init>
	USART2_Init();
 8000264:	f000 f938 	bl	80004d8 <USART2_Init>
	SYSTICK_Init();
 8000268:	f000 f902 	bl	8000470 <SYSTICK_Init>

	while(1){
		//for(uint32_t i = 0 ; i<100000; i++);
		SYSTICK_Delay(1000);
 800026c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000270:	f000 f910 	bl	8000494 <SYSTICK_Delay>
		GPIOA->ODR ^= 1<<5;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <main+0x2c>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a03      	ldr	r2, [pc, #12]	; (8000288 <main+0x2c>)
 800027a:	f083 0320 	eor.w	r3, r3, #32
 800027e:	6153      	str	r3, [r2, #20]
		printf("Hello\r\n");
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <main+0x30>)
 8000282:	f000 fa6f 	bl	8000764 <puts>
		SYSTICK_Delay(1000);
 8000286:	e7f1      	b.n	800026c <main+0x10>
 8000288:	40020000 	.word	0x40020000
 800028c:	0800109c 	.word	0x0800109c

08000290 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]
 80002a0:	e00a      	b.n	80002b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002a2:	f000 f98d 	bl	80005c0 <__io_getchar>
 80002a6:	4601      	mov	r1, r0
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	1c5a      	adds	r2, r3, #1
 80002ac:	60ba      	str	r2, [r7, #8]
 80002ae:	b2ca      	uxtb	r2, r1
 80002b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	3301      	adds	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	429a      	cmp	r2, r3
 80002be:	dbf0      	blt.n	80002a2 <_read+0x12>
	}

return len;
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b086      	sub	sp, #24
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	60f8      	str	r0, [r7, #12]
 80002d2:	60b9      	str	r1, [r7, #8]
 80002d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e009      	b.n	80002f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	60ba      	str	r2, [r7, #8]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f95d 	bl	80005a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	697a      	ldr	r2, [r7, #20]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf1      	blt.n	80002dc <_write+0x12>
	}
	return len;
 80002f8:	687b      	ldr	r3, [r7, #4]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <_close>:

int _close(int file)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
	return -1;
 800030a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800030e:	4618      	mov	r0, r3
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
 8000322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800032a:	605a      	str	r2, [r3, #4]
	return 0;
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <_isatty>:

int _isatty(int file)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
	return 1;
 8000342:	2301      	movs	r3, #1
}
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	return 0;
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000374:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <_sbrk+0x5c>)
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <_sbrk+0x60>)
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <_sbrk+0x64>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d102      	bne.n	800038e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <_sbrk+0x64>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <_sbrk+0x68>)
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <_sbrk+0x64>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	693a      	ldr	r2, [r7, #16]
 8000398:	429a      	cmp	r2, r3
 800039a:	d207      	bcs.n	80003ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800039c:	f000 f942 	bl	8000624 <__errno>
 80003a0:	4603      	mov	r3, r0
 80003a2:	220c      	movs	r2, #12
 80003a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003aa:	e009      	b.n	80003c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <_sbrk+0x64>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <_sbrk+0x64>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <_sbrk+0x64>)
 80003bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003be:	68fb      	ldr	r3, [r7, #12]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20020000 	.word	0x20020000
 80003cc:	00000400 	.word	0x00000400
 80003d0:	20000084 	.word	0x20000084
 80003d4:	200000a0 	.word	0x200000a0

080003d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	6039      	str	r1, [r7, #0]
 80003e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db0a      	blt.n	8000402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	490c      	ldr	r1, [pc, #48]	; (8000424 <__NVIC_SetPriority+0x4c>)
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000400:	e00a      	b.n	8000418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4908      	ldr	r1, [pc, #32]	; (8000428 <__NVIC_SetPriority+0x50>)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	f003 030f 	and.w	r3, r3, #15
 800040e:	3b04      	subs	r3, #4
 8000410:	0112      	lsls	r2, r2, #4
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	440b      	add	r3, r1
 8000416:	761a      	strb	r2, [r3, #24]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3b01      	subs	r3, #1
 8000438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800043c:	d301      	bcc.n	8000442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800043e:	2301      	movs	r3, #1
 8000440:	e00f      	b.n	8000462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <SysTick_Config+0x40>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800044a:	210f      	movs	r1, #15
 800044c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000450:	f7ff ffc2 	bl	80003d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <SysTick_Config+0x40>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <SysTick_Config+0x40>)
 800045c:	2207      	movs	r2, #7
 800045e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	e000e010 	.word	0xe000e010

08000470 <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <SYSTICK_Init+0x1c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a05      	ldr	r2, [pc, #20]	; (8000490 <SYSTICK_Init+0x20>)
 800047a:	fba2 2303 	umull	r2, r3, r2, r3
 800047e:	099b      	lsrs	r3, r3, #6
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ffd3 	bl	800042c <SysTick_Config>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000000 	.word	0x20000000
 8000490:	10624dd3 	.word	0x10624dd3

08000494 <SYSTICK_Delay>:
/**
 * Millisecond delays with Systick Timer, blocking function
 * @param delay : milliseconds to wait
 */
void SYSTICK_Delay(uint32_t Delay)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	  uint32_t tickstart = SYSTICK_Get();
 800049c:	f000 f810 	bl	80004c0 <SYSTICK_Get>
 80004a0:	60f8      	str	r0, [r7, #12]

	  while((SYSTICK_Get() - tickstart) < Delay);
 80004a2:	bf00      	nop
 80004a4:	f000 f80c 	bl	80004c0 <SYSTICK_Get>
 80004a8:	4602      	mov	r2, r0
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d8f7      	bhi.n	80004a4 <SYSTICK_Delay+0x10>
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SYSTICK_Get>:

uint32_t SYSTICK_Get(void){
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	return ticks;
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <SYSTICK_Get+0x14>)
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000088 	.word	0x20000088

080004d8 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <USART2_Init+0x68>)
 80004de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e0:	4a17      	ldr	r2, [pc, #92]	; (8000540 <USART2_Init+0x68>)
 80004e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e6:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->CR1 |= USART_CR1_UE;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <USART2_Init+0x6c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <USART2_Init+0x6c>)
 80004ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f2:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <USART2_Init+0x70>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <USART2_Init+0x70>)
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <USART2_Init+0x70>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <USART2_Init+0x70>)
 8000506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <USART2_Init+0x70>)
 800050e:	6a1b      	ldr	r3, [r3, #32]
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <USART2_Init+0x70>)
 8000512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000516:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <USART2_Init+0x70>)
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <USART2_Init+0x70>)
 800051e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000522:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <USART2_Init+0x6c>)
 8000526:	228b      	movs	r2, #139	; 0x8b
 8000528:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <USART2_Init+0x6c>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <USART2_Init+0x6c>)
 8000530:	f043 030c 	orr.w	r3, r3, #12
 8000534:	60d3      	str	r3, [r2, #12]
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800
 8000544:	40004400 	.word	0x40004400
 8000548:	40020000 	.word	0x40020000

0800054c <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <USART2_TransmitChar+0x2c>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 800055c:	bf00      	nop
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <USART2_TransmitChar+0x2c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <USART2_TransmitChar+0x12>
}
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40004400 	.word	0x40004400

0800057c <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 8000580:	bf00      	nop
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <USART2_ReceiveChar+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f003 0320 	and.w	r3, r3, #32
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f9      	beq.n	8000582 <USART2_ReceiveChar+0x6>
	return USART2->DR;
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <USART2_ReceiveChar+0x24>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	b2db      	uxtb	r3, r3

}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40004400 	.word	0x40004400

080005a4 <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffcb 	bl	800054c <USART2_TransmitChar>
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 80005c4:	f7ff ffda 	bl	800057c <USART2_ReceiveChar>
 80005c8:	4603      	mov	r3, r0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 f817 	bl	8000630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe2b 	bl	800025c <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000614:	08001110 	.word	0x08001110
  ldr r2, =_sbss
 8000618:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800061c:	2000009c 	.word	0x2000009c

08000620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC_IRQHandler>
	...

08000624 <__errno>:
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <__errno+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__libc_init_array>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	4d0d      	ldr	r5, [pc, #52]	; (8000668 <__libc_init_array+0x38>)
 8000634:	4c0d      	ldr	r4, [pc, #52]	; (800066c <__libc_init_array+0x3c>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	2600      	movs	r6, #0
 800063c:	42a6      	cmp	r6, r4
 800063e:	d109      	bne.n	8000654 <__libc_init_array+0x24>
 8000640:	4d0b      	ldr	r5, [pc, #44]	; (8000670 <__libc_init_array+0x40>)
 8000642:	4c0c      	ldr	r4, [pc, #48]	; (8000674 <__libc_init_array+0x44>)
 8000644:	f000 fd1e 	bl	8001084 <_init>
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	2600      	movs	r6, #0
 800064e:	42a6      	cmp	r6, r4
 8000650:	d105      	bne.n	800065e <__libc_init_array+0x2e>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f855 3b04 	ldr.w	r3, [r5], #4
 8000658:	4798      	blx	r3
 800065a:	3601      	adds	r6, #1
 800065c:	e7ee      	b.n	800063c <__libc_init_array+0xc>
 800065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000662:	4798      	blx	r3
 8000664:	3601      	adds	r6, #1
 8000666:	e7f2      	b.n	800064e <__libc_init_array+0x1e>
 8000668:	08001108 	.word	0x08001108
 800066c:	08001108 	.word	0x08001108
 8000670:	08001108 	.word	0x08001108
 8000674:	0800110c 	.word	0x0800110c

08000678 <memset>:
 8000678:	4402      	add	r2, r0
 800067a:	4603      	mov	r3, r0
 800067c:	4293      	cmp	r3, r2
 800067e:	d100      	bne.n	8000682 <memset+0xa>
 8000680:	4770      	bx	lr
 8000682:	f803 1b01 	strb.w	r1, [r3], #1
 8000686:	e7f9      	b.n	800067c <memset+0x4>

08000688 <_puts_r>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	460e      	mov	r6, r1
 800068c:	4605      	mov	r5, r0
 800068e:	b118      	cbz	r0, 8000698 <_puts_r+0x10>
 8000690:	6983      	ldr	r3, [r0, #24]
 8000692:	b90b      	cbnz	r3, 8000698 <_puts_r+0x10>
 8000694:	f000 fa48 	bl	8000b28 <__sinit>
 8000698:	69ab      	ldr	r3, [r5, #24]
 800069a:	68ac      	ldr	r4, [r5, #8]
 800069c:	b913      	cbnz	r3, 80006a4 <_puts_r+0x1c>
 800069e:	4628      	mov	r0, r5
 80006a0:	f000 fa42 	bl	8000b28 <__sinit>
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <_puts_r+0xd0>)
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d120      	bne.n	80006ec <_puts_r+0x64>
 80006aa:	686c      	ldr	r4, [r5, #4]
 80006ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ae:	07db      	lsls	r3, r3, #31
 80006b0:	d405      	bmi.n	80006be <_puts_r+0x36>
 80006b2:	89a3      	ldrh	r3, [r4, #12]
 80006b4:	0598      	lsls	r0, r3, #22
 80006b6:	d402      	bmi.n	80006be <_puts_r+0x36>
 80006b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006ba:	f000 fad3 	bl	8000c64 <__retarget_lock_acquire_recursive>
 80006be:	89a3      	ldrh	r3, [r4, #12]
 80006c0:	0719      	lsls	r1, r3, #28
 80006c2:	d51d      	bpl.n	8000700 <_puts_r+0x78>
 80006c4:	6923      	ldr	r3, [r4, #16]
 80006c6:	b1db      	cbz	r3, 8000700 <_puts_r+0x78>
 80006c8:	3e01      	subs	r6, #1
 80006ca:	68a3      	ldr	r3, [r4, #8]
 80006cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006d0:	3b01      	subs	r3, #1
 80006d2:	60a3      	str	r3, [r4, #8]
 80006d4:	bb39      	cbnz	r1, 8000726 <_puts_r+0x9e>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da38      	bge.n	800074c <_puts_r+0xc4>
 80006da:	4622      	mov	r2, r4
 80006dc:	210a      	movs	r1, #10
 80006de:	4628      	mov	r0, r5
 80006e0:	f000 f848 	bl	8000774 <__swbuf_r>
 80006e4:	3001      	adds	r0, #1
 80006e6:	d011      	beq.n	800070c <_puts_r+0x84>
 80006e8:	250a      	movs	r5, #10
 80006ea:	e011      	b.n	8000710 <_puts_r+0x88>
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <_puts_r+0xd4>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d101      	bne.n	80006f6 <_puts_r+0x6e>
 80006f2:	68ac      	ldr	r4, [r5, #8]
 80006f4:	e7da      	b.n	80006ac <_puts_r+0x24>
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <_puts_r+0xd8>)
 80006f8:	429c      	cmp	r4, r3
 80006fa:	bf08      	it	eq
 80006fc:	68ec      	ldreq	r4, [r5, #12]
 80006fe:	e7d5      	b.n	80006ac <_puts_r+0x24>
 8000700:	4621      	mov	r1, r4
 8000702:	4628      	mov	r0, r5
 8000704:	f000 f888 	bl	8000818 <__swsetup_r>
 8000708:	2800      	cmp	r0, #0
 800070a:	d0dd      	beq.n	80006c8 <_puts_r+0x40>
 800070c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000712:	07da      	lsls	r2, r3, #31
 8000714:	d405      	bmi.n	8000722 <_puts_r+0x9a>
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	059b      	lsls	r3, r3, #22
 800071a:	d402      	bmi.n	8000722 <_puts_r+0x9a>
 800071c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800071e:	f000 faa2 	bl	8000c66 <__retarget_lock_release_recursive>
 8000722:	4628      	mov	r0, r5
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	2b00      	cmp	r3, #0
 8000728:	da04      	bge.n	8000734 <_puts_r+0xac>
 800072a:	69a2      	ldr	r2, [r4, #24]
 800072c:	429a      	cmp	r2, r3
 800072e:	dc06      	bgt.n	800073e <_puts_r+0xb6>
 8000730:	290a      	cmp	r1, #10
 8000732:	d004      	beq.n	800073e <_puts_r+0xb6>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	6022      	str	r2, [r4, #0]
 800073a:	7019      	strb	r1, [r3, #0]
 800073c:	e7c5      	b.n	80006ca <_puts_r+0x42>
 800073e:	4622      	mov	r2, r4
 8000740:	4628      	mov	r0, r5
 8000742:	f000 f817 	bl	8000774 <__swbuf_r>
 8000746:	3001      	adds	r0, #1
 8000748:	d1bf      	bne.n	80006ca <_puts_r+0x42>
 800074a:	e7df      	b.n	800070c <_puts_r+0x84>
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	250a      	movs	r5, #10
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	6022      	str	r2, [r4, #0]
 8000754:	701d      	strb	r5, [r3, #0]
 8000756:	e7db      	b.n	8000710 <_puts_r+0x88>
 8000758:	080010c8 	.word	0x080010c8
 800075c:	080010e8 	.word	0x080010e8
 8000760:	080010a8 	.word	0x080010a8

08000764 <puts>:
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <puts+0xc>)
 8000766:	4601      	mov	r1, r0
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f7ff bf8d 	b.w	8000688 <_puts_r>
 800076e:	bf00      	nop
 8000770:	20000004 	.word	0x20000004

08000774 <__swbuf_r>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	460e      	mov	r6, r1
 8000778:	4614      	mov	r4, r2
 800077a:	4605      	mov	r5, r0
 800077c:	b118      	cbz	r0, 8000786 <__swbuf_r+0x12>
 800077e:	6983      	ldr	r3, [r0, #24]
 8000780:	b90b      	cbnz	r3, 8000786 <__swbuf_r+0x12>
 8000782:	f000 f9d1 	bl	8000b28 <__sinit>
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <__swbuf_r+0x98>)
 8000788:	429c      	cmp	r4, r3
 800078a:	d12b      	bne.n	80007e4 <__swbuf_r+0x70>
 800078c:	686c      	ldr	r4, [r5, #4]
 800078e:	69a3      	ldr	r3, [r4, #24]
 8000790:	60a3      	str	r3, [r4, #8]
 8000792:	89a3      	ldrh	r3, [r4, #12]
 8000794:	071a      	lsls	r2, r3, #28
 8000796:	d52f      	bpl.n	80007f8 <__swbuf_r+0x84>
 8000798:	6923      	ldr	r3, [r4, #16]
 800079a:	b36b      	cbz	r3, 80007f8 <__swbuf_r+0x84>
 800079c:	6923      	ldr	r3, [r4, #16]
 800079e:	6820      	ldr	r0, [r4, #0]
 80007a0:	1ac0      	subs	r0, r0, r3
 80007a2:	6963      	ldr	r3, [r4, #20]
 80007a4:	b2f6      	uxtb	r6, r6
 80007a6:	4283      	cmp	r3, r0
 80007a8:	4637      	mov	r7, r6
 80007aa:	dc04      	bgt.n	80007b6 <__swbuf_r+0x42>
 80007ac:	4621      	mov	r1, r4
 80007ae:	4628      	mov	r0, r5
 80007b0:	f000 f926 	bl	8000a00 <_fflush_r>
 80007b4:	bb30      	cbnz	r0, 8000804 <__swbuf_r+0x90>
 80007b6:	68a3      	ldr	r3, [r4, #8]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	60a3      	str	r3, [r4, #8]
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	6022      	str	r2, [r4, #0]
 80007c2:	701e      	strb	r6, [r3, #0]
 80007c4:	6963      	ldr	r3, [r4, #20]
 80007c6:	3001      	adds	r0, #1
 80007c8:	4283      	cmp	r3, r0
 80007ca:	d004      	beq.n	80007d6 <__swbuf_r+0x62>
 80007cc:	89a3      	ldrh	r3, [r4, #12]
 80007ce:	07db      	lsls	r3, r3, #31
 80007d0:	d506      	bpl.n	80007e0 <__swbuf_r+0x6c>
 80007d2:	2e0a      	cmp	r6, #10
 80007d4:	d104      	bne.n	80007e0 <__swbuf_r+0x6c>
 80007d6:	4621      	mov	r1, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f911 	bl	8000a00 <_fflush_r>
 80007de:	b988      	cbnz	r0, 8000804 <__swbuf_r+0x90>
 80007e0:	4638      	mov	r0, r7
 80007e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <__swbuf_r+0x9c>)
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d101      	bne.n	80007ee <__swbuf_r+0x7a>
 80007ea:	68ac      	ldr	r4, [r5, #8]
 80007ec:	e7cf      	b.n	800078e <__swbuf_r+0x1a>
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <__swbuf_r+0xa0>)
 80007f0:	429c      	cmp	r4, r3
 80007f2:	bf08      	it	eq
 80007f4:	68ec      	ldreq	r4, [r5, #12]
 80007f6:	e7ca      	b.n	800078e <__swbuf_r+0x1a>
 80007f8:	4621      	mov	r1, r4
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 f80c 	bl	8000818 <__swsetup_r>
 8000800:	2800      	cmp	r0, #0
 8000802:	d0cb      	beq.n	800079c <__swbuf_r+0x28>
 8000804:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000808:	e7ea      	b.n	80007e0 <__swbuf_r+0x6c>
 800080a:	bf00      	nop
 800080c:	080010c8 	.word	0x080010c8
 8000810:	080010e8 	.word	0x080010e8
 8000814:	080010a8 	.word	0x080010a8

08000818 <__swsetup_r>:
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <__swsetup_r+0xcc>)
 800081a:	b570      	push	{r4, r5, r6, lr}
 800081c:	681d      	ldr	r5, [r3, #0]
 800081e:	4606      	mov	r6, r0
 8000820:	460c      	mov	r4, r1
 8000822:	b125      	cbz	r5, 800082e <__swsetup_r+0x16>
 8000824:	69ab      	ldr	r3, [r5, #24]
 8000826:	b913      	cbnz	r3, 800082e <__swsetup_r+0x16>
 8000828:	4628      	mov	r0, r5
 800082a:	f000 f97d 	bl	8000b28 <__sinit>
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <__swsetup_r+0xd0>)
 8000830:	429c      	cmp	r4, r3
 8000832:	d10f      	bne.n	8000854 <__swsetup_r+0x3c>
 8000834:	686c      	ldr	r4, [r5, #4]
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800083c:	0719      	lsls	r1, r3, #28
 800083e:	d42c      	bmi.n	800089a <__swsetup_r+0x82>
 8000840:	06dd      	lsls	r5, r3, #27
 8000842:	d411      	bmi.n	8000868 <__swsetup_r+0x50>
 8000844:	2309      	movs	r3, #9
 8000846:	6033      	str	r3, [r6, #0]
 8000848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800084c:	81a3      	strh	r3, [r4, #12]
 800084e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000852:	e03e      	b.n	80008d2 <__swsetup_r+0xba>
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <__swsetup_r+0xd4>)
 8000856:	429c      	cmp	r4, r3
 8000858:	d101      	bne.n	800085e <__swsetup_r+0x46>
 800085a:	68ac      	ldr	r4, [r5, #8]
 800085c:	e7eb      	b.n	8000836 <__swsetup_r+0x1e>
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <__swsetup_r+0xd8>)
 8000860:	429c      	cmp	r4, r3
 8000862:	bf08      	it	eq
 8000864:	68ec      	ldreq	r4, [r5, #12]
 8000866:	e7e6      	b.n	8000836 <__swsetup_r+0x1e>
 8000868:	0758      	lsls	r0, r3, #29
 800086a:	d512      	bpl.n	8000892 <__swsetup_r+0x7a>
 800086c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800086e:	b141      	cbz	r1, 8000882 <__swsetup_r+0x6a>
 8000870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000874:	4299      	cmp	r1, r3
 8000876:	d002      	beq.n	800087e <__swsetup_r+0x66>
 8000878:	4630      	mov	r0, r6
 800087a:	f000 fa5b 	bl	8000d34 <_free_r>
 800087e:	2300      	movs	r3, #0
 8000880:	6363      	str	r3, [r4, #52]	; 0x34
 8000882:	89a3      	ldrh	r3, [r4, #12]
 8000884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000888:	81a3      	strh	r3, [r4, #12]
 800088a:	2300      	movs	r3, #0
 800088c:	6063      	str	r3, [r4, #4]
 800088e:	6923      	ldr	r3, [r4, #16]
 8000890:	6023      	str	r3, [r4, #0]
 8000892:	89a3      	ldrh	r3, [r4, #12]
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	81a3      	strh	r3, [r4, #12]
 800089a:	6923      	ldr	r3, [r4, #16]
 800089c:	b94b      	cbnz	r3, 80008b2 <__swsetup_r+0x9a>
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a8:	d003      	beq.n	80008b2 <__swsetup_r+0x9a>
 80008aa:	4621      	mov	r1, r4
 80008ac:	4630      	mov	r0, r6
 80008ae:	f000 fa01 	bl	8000cb4 <__smakebuf_r>
 80008b2:	89a0      	ldrh	r0, [r4, #12]
 80008b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008b8:	f010 0301 	ands.w	r3, r0, #1
 80008bc:	d00a      	beq.n	80008d4 <__swsetup_r+0xbc>
 80008be:	2300      	movs	r3, #0
 80008c0:	60a3      	str	r3, [r4, #8]
 80008c2:	6963      	ldr	r3, [r4, #20]
 80008c4:	425b      	negs	r3, r3
 80008c6:	61a3      	str	r3, [r4, #24]
 80008c8:	6923      	ldr	r3, [r4, #16]
 80008ca:	b943      	cbnz	r3, 80008de <__swsetup_r+0xc6>
 80008cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008d0:	d1ba      	bne.n	8000848 <__swsetup_r+0x30>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	0781      	lsls	r1, r0, #30
 80008d6:	bf58      	it	pl
 80008d8:	6963      	ldrpl	r3, [r4, #20]
 80008da:	60a3      	str	r3, [r4, #8]
 80008dc:	e7f4      	b.n	80008c8 <__swsetup_r+0xb0>
 80008de:	2000      	movs	r0, #0
 80008e0:	e7f7      	b.n	80008d2 <__swsetup_r+0xba>
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004
 80008e8:	080010c8 	.word	0x080010c8
 80008ec:	080010e8 	.word	0x080010e8
 80008f0:	080010a8 	.word	0x080010a8

080008f4 <__sflush_r>:
 80008f4:	898a      	ldrh	r2, [r1, #12]
 80008f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008fa:	4605      	mov	r5, r0
 80008fc:	0710      	lsls	r0, r2, #28
 80008fe:	460c      	mov	r4, r1
 8000900:	d458      	bmi.n	80009b4 <__sflush_r+0xc0>
 8000902:	684b      	ldr	r3, [r1, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dc05      	bgt.n	8000914 <__sflush_r+0x20>
 8000908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800090a:	2b00      	cmp	r3, #0
 800090c:	dc02      	bgt.n	8000914 <__sflush_r+0x20>
 800090e:	2000      	movs	r0, #0
 8000910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000916:	2e00      	cmp	r6, #0
 8000918:	d0f9      	beq.n	800090e <__sflush_r+0x1a>
 800091a:	2300      	movs	r3, #0
 800091c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000920:	682f      	ldr	r7, [r5, #0]
 8000922:	602b      	str	r3, [r5, #0]
 8000924:	d032      	beq.n	800098c <__sflush_r+0x98>
 8000926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000928:	89a3      	ldrh	r3, [r4, #12]
 800092a:	075a      	lsls	r2, r3, #29
 800092c:	d505      	bpl.n	800093a <__sflush_r+0x46>
 800092e:	6863      	ldr	r3, [r4, #4]
 8000930:	1ac0      	subs	r0, r0, r3
 8000932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000934:	b10b      	cbz	r3, 800093a <__sflush_r+0x46>
 8000936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000938:	1ac0      	subs	r0, r0, r3
 800093a:	2300      	movs	r3, #0
 800093c:	4602      	mov	r2, r0
 800093e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000940:	6a21      	ldr	r1, [r4, #32]
 8000942:	4628      	mov	r0, r5
 8000944:	47b0      	blx	r6
 8000946:	1c43      	adds	r3, r0, #1
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	d106      	bne.n	800095a <__sflush_r+0x66>
 800094c:	6829      	ldr	r1, [r5, #0]
 800094e:	291d      	cmp	r1, #29
 8000950:	d82c      	bhi.n	80009ac <__sflush_r+0xb8>
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <__sflush_r+0x108>)
 8000954:	40ca      	lsrs	r2, r1
 8000956:	07d6      	lsls	r6, r2, #31
 8000958:	d528      	bpl.n	80009ac <__sflush_r+0xb8>
 800095a:	2200      	movs	r2, #0
 800095c:	6062      	str	r2, [r4, #4]
 800095e:	04d9      	lsls	r1, r3, #19
 8000960:	6922      	ldr	r2, [r4, #16]
 8000962:	6022      	str	r2, [r4, #0]
 8000964:	d504      	bpl.n	8000970 <__sflush_r+0x7c>
 8000966:	1c42      	adds	r2, r0, #1
 8000968:	d101      	bne.n	800096e <__sflush_r+0x7a>
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	b903      	cbnz	r3, 8000970 <__sflush_r+0x7c>
 800096e:	6560      	str	r0, [r4, #84]	; 0x54
 8000970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000972:	602f      	str	r7, [r5, #0]
 8000974:	2900      	cmp	r1, #0
 8000976:	d0ca      	beq.n	800090e <__sflush_r+0x1a>
 8000978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800097c:	4299      	cmp	r1, r3
 800097e:	d002      	beq.n	8000986 <__sflush_r+0x92>
 8000980:	4628      	mov	r0, r5
 8000982:	f000 f9d7 	bl	8000d34 <_free_r>
 8000986:	2000      	movs	r0, #0
 8000988:	6360      	str	r0, [r4, #52]	; 0x34
 800098a:	e7c1      	b.n	8000910 <__sflush_r+0x1c>
 800098c:	6a21      	ldr	r1, [r4, #32]
 800098e:	2301      	movs	r3, #1
 8000990:	4628      	mov	r0, r5
 8000992:	47b0      	blx	r6
 8000994:	1c41      	adds	r1, r0, #1
 8000996:	d1c7      	bne.n	8000928 <__sflush_r+0x34>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0c4      	beq.n	8000928 <__sflush_r+0x34>
 800099e:	2b1d      	cmp	r3, #29
 80009a0:	d001      	beq.n	80009a6 <__sflush_r+0xb2>
 80009a2:	2b16      	cmp	r3, #22
 80009a4:	d101      	bne.n	80009aa <__sflush_r+0xb6>
 80009a6:	602f      	str	r7, [r5, #0]
 80009a8:	e7b1      	b.n	800090e <__sflush_r+0x1a>
 80009aa:	89a3      	ldrh	r3, [r4, #12]
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	81a3      	strh	r3, [r4, #12]
 80009b2:	e7ad      	b.n	8000910 <__sflush_r+0x1c>
 80009b4:	690f      	ldr	r7, [r1, #16]
 80009b6:	2f00      	cmp	r7, #0
 80009b8:	d0a9      	beq.n	800090e <__sflush_r+0x1a>
 80009ba:	0793      	lsls	r3, r2, #30
 80009bc:	680e      	ldr	r6, [r1, #0]
 80009be:	bf08      	it	eq
 80009c0:	694b      	ldreq	r3, [r1, #20]
 80009c2:	600f      	str	r7, [r1, #0]
 80009c4:	bf18      	it	ne
 80009c6:	2300      	movne	r3, #0
 80009c8:	eba6 0807 	sub.w	r8, r6, r7
 80009cc:	608b      	str	r3, [r1, #8]
 80009ce:	f1b8 0f00 	cmp.w	r8, #0
 80009d2:	dd9c      	ble.n	800090e <__sflush_r+0x1a>
 80009d4:	6a21      	ldr	r1, [r4, #32]
 80009d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009d8:	4643      	mov	r3, r8
 80009da:	463a      	mov	r2, r7
 80009dc:	4628      	mov	r0, r5
 80009de:	47b0      	blx	r6
 80009e0:	2800      	cmp	r0, #0
 80009e2:	dc06      	bgt.n	80009f2 <__sflush_r+0xfe>
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ea:	81a3      	strh	r3, [r4, #12]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f0:	e78e      	b.n	8000910 <__sflush_r+0x1c>
 80009f2:	4407      	add	r7, r0
 80009f4:	eba8 0800 	sub.w	r8, r8, r0
 80009f8:	e7e9      	b.n	80009ce <__sflush_r+0xda>
 80009fa:	bf00      	nop
 80009fc:	20400001 	.word	0x20400001

08000a00 <_fflush_r>:
 8000a00:	b538      	push	{r3, r4, r5, lr}
 8000a02:	690b      	ldr	r3, [r1, #16]
 8000a04:	4605      	mov	r5, r0
 8000a06:	460c      	mov	r4, r1
 8000a08:	b913      	cbnz	r3, 8000a10 <_fflush_r+0x10>
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}
 8000a10:	b118      	cbz	r0, 8000a1a <_fflush_r+0x1a>
 8000a12:	6983      	ldr	r3, [r0, #24]
 8000a14:	b90b      	cbnz	r3, 8000a1a <_fflush_r+0x1a>
 8000a16:	f000 f887 	bl	8000b28 <__sinit>
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_fflush_r+0x6c>)
 8000a1c:	429c      	cmp	r4, r3
 8000a1e:	d11b      	bne.n	8000a58 <_fflush_r+0x58>
 8000a20:	686c      	ldr	r4, [r5, #4]
 8000a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0ef      	beq.n	8000a0a <_fflush_r+0xa>
 8000a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a2c:	07d0      	lsls	r0, r2, #31
 8000a2e:	d404      	bmi.n	8000a3a <_fflush_r+0x3a>
 8000a30:	0599      	lsls	r1, r3, #22
 8000a32:	d402      	bmi.n	8000a3a <_fflush_r+0x3a>
 8000a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a36:	f000 f915 	bl	8000c64 <__retarget_lock_acquire_recursive>
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	4621      	mov	r1, r4
 8000a3e:	f7ff ff59 	bl	80008f4 <__sflush_r>
 8000a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a44:	07da      	lsls	r2, r3, #31
 8000a46:	4605      	mov	r5, r0
 8000a48:	d4e0      	bmi.n	8000a0c <_fflush_r+0xc>
 8000a4a:	89a3      	ldrh	r3, [r4, #12]
 8000a4c:	059b      	lsls	r3, r3, #22
 8000a4e:	d4dd      	bmi.n	8000a0c <_fflush_r+0xc>
 8000a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a52:	f000 f908 	bl	8000c66 <__retarget_lock_release_recursive>
 8000a56:	e7d9      	b.n	8000a0c <_fflush_r+0xc>
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <_fflush_r+0x70>)
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	d101      	bne.n	8000a62 <_fflush_r+0x62>
 8000a5e:	68ac      	ldr	r4, [r5, #8]
 8000a60:	e7df      	b.n	8000a22 <_fflush_r+0x22>
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <_fflush_r+0x74>)
 8000a64:	429c      	cmp	r4, r3
 8000a66:	bf08      	it	eq
 8000a68:	68ec      	ldreq	r4, [r5, #12]
 8000a6a:	e7da      	b.n	8000a22 <_fflush_r+0x22>
 8000a6c:	080010c8 	.word	0x080010c8
 8000a70:	080010e8 	.word	0x080010e8
 8000a74:	080010a8 	.word	0x080010a8

08000a78 <std>:
 8000a78:	2300      	movs	r3, #0
 8000a7a:	b510      	push	{r4, lr}
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a86:	6083      	str	r3, [r0, #8]
 8000a88:	8181      	strh	r1, [r0, #12]
 8000a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8000a8c:	81c2      	strh	r2, [r0, #14]
 8000a8e:	6183      	str	r3, [r0, #24]
 8000a90:	4619      	mov	r1, r3
 8000a92:	2208      	movs	r2, #8
 8000a94:	305c      	adds	r0, #92	; 0x5c
 8000a96:	f7ff fdef 	bl	8000678 <memset>
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <std+0x38>)
 8000a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <std+0x3c>)
 8000aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <std+0x40>)
 8000aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <std+0x44>)
 8000aa8:	6224      	str	r4, [r4, #32]
 8000aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	08000f15 	.word	0x08000f15
 8000ab4:	08000f37 	.word	0x08000f37
 8000ab8:	08000f6f 	.word	0x08000f6f
 8000abc:	08000f93 	.word	0x08000f93

08000ac0 <_cleanup_r>:
 8000ac0:	4901      	ldr	r1, [pc, #4]	; (8000ac8 <_cleanup_r+0x8>)
 8000ac2:	f000 b8af 	b.w	8000c24 <_fwalk_reent>
 8000ac6:	bf00      	nop
 8000ac8:	08000a01 	.word	0x08000a01

08000acc <__sfmoreglue>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	2268      	movs	r2, #104	; 0x68
 8000ad0:	1e4d      	subs	r5, r1, #1
 8000ad2:	4355      	muls	r5, r2
 8000ad4:	460e      	mov	r6, r1
 8000ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ada:	f000 f997 	bl	8000e0c <_malloc_r>
 8000ade:	4604      	mov	r4, r0
 8000ae0:	b140      	cbz	r0, 8000af4 <__sfmoreglue+0x28>
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ae8:	300c      	adds	r0, #12
 8000aea:	60a0      	str	r0, [r4, #8]
 8000aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000af0:	f7ff fdc2 	bl	8000678 <memset>
 8000af4:	4620      	mov	r0, r4
 8000af6:	bd70      	pop	{r4, r5, r6, pc}

08000af8 <__sfp_lock_acquire>:
 8000af8:	4801      	ldr	r0, [pc, #4]	; (8000b00 <__sfp_lock_acquire+0x8>)
 8000afa:	f000 b8b3 	b.w	8000c64 <__retarget_lock_acquire_recursive>
 8000afe:	bf00      	nop
 8000b00:	2000008d 	.word	0x2000008d

08000b04 <__sfp_lock_release>:
 8000b04:	4801      	ldr	r0, [pc, #4]	; (8000b0c <__sfp_lock_release+0x8>)
 8000b06:	f000 b8ae 	b.w	8000c66 <__retarget_lock_release_recursive>
 8000b0a:	bf00      	nop
 8000b0c:	2000008d 	.word	0x2000008d

08000b10 <__sinit_lock_acquire>:
 8000b10:	4801      	ldr	r0, [pc, #4]	; (8000b18 <__sinit_lock_acquire+0x8>)
 8000b12:	f000 b8a7 	b.w	8000c64 <__retarget_lock_acquire_recursive>
 8000b16:	bf00      	nop
 8000b18:	2000008e 	.word	0x2000008e

08000b1c <__sinit_lock_release>:
 8000b1c:	4801      	ldr	r0, [pc, #4]	; (8000b24 <__sinit_lock_release+0x8>)
 8000b1e:	f000 b8a2 	b.w	8000c66 <__retarget_lock_release_recursive>
 8000b22:	bf00      	nop
 8000b24:	2000008e 	.word	0x2000008e

08000b28 <__sinit>:
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	f7ff fff0 	bl	8000b10 <__sinit_lock_acquire>
 8000b30:	69a3      	ldr	r3, [r4, #24]
 8000b32:	b11b      	cbz	r3, 8000b3c <__sinit+0x14>
 8000b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b38:	f7ff bff0 	b.w	8000b1c <__sinit_lock_release>
 8000b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b40:	6523      	str	r3, [r4, #80]	; 0x50
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <__sinit+0x68>)
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <__sinit+0x6c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	bf04      	itt	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	61a3      	streq	r3, [r4, #24]
 8000b52:	4620      	mov	r0, r4
 8000b54:	f000 f820 	bl	8000b98 <__sfp>
 8000b58:	6060      	str	r0, [r4, #4]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f000 f81c 	bl	8000b98 <__sfp>
 8000b60:	60a0      	str	r0, [r4, #8]
 8000b62:	4620      	mov	r0, r4
 8000b64:	f000 f818 	bl	8000b98 <__sfp>
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60e0      	str	r0, [r4, #12]
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	6860      	ldr	r0, [r4, #4]
 8000b70:	f7ff ff82 	bl	8000a78 <std>
 8000b74:	68a0      	ldr	r0, [r4, #8]
 8000b76:	2201      	movs	r2, #1
 8000b78:	2109      	movs	r1, #9
 8000b7a:	f7ff ff7d 	bl	8000a78 <std>
 8000b7e:	68e0      	ldr	r0, [r4, #12]
 8000b80:	2202      	movs	r2, #2
 8000b82:	2112      	movs	r1, #18
 8000b84:	f7ff ff78 	bl	8000a78 <std>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61a3      	str	r3, [r4, #24]
 8000b8c:	e7d2      	b.n	8000b34 <__sinit+0xc>
 8000b8e:	bf00      	nop
 8000b90:	080010a4 	.word	0x080010a4
 8000b94:	08000ac1 	.word	0x08000ac1

08000b98 <__sfp>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	4607      	mov	r7, r0
 8000b9c:	f7ff ffac 	bl	8000af8 <__sfp_lock_acquire>
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <__sfp+0x84>)
 8000ba2:	681e      	ldr	r6, [r3, #0]
 8000ba4:	69b3      	ldr	r3, [r6, #24]
 8000ba6:	b913      	cbnz	r3, 8000bae <__sfp+0x16>
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f7ff ffbd 	bl	8000b28 <__sinit>
 8000bae:	3648      	adds	r6, #72	; 0x48
 8000bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	d503      	bpl.n	8000bc0 <__sfp+0x28>
 8000bb8:	6833      	ldr	r3, [r6, #0]
 8000bba:	b30b      	cbz	r3, 8000c00 <__sfp+0x68>
 8000bbc:	6836      	ldr	r6, [r6, #0]
 8000bbe:	e7f7      	b.n	8000bb0 <__sfp+0x18>
 8000bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bc4:	b9d5      	cbnz	r5, 8000bfc <__sfp+0x64>
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <__sfp+0x88>)
 8000bc8:	60e3      	str	r3, [r4, #12]
 8000bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bce:	6665      	str	r5, [r4, #100]	; 0x64
 8000bd0:	f000 f847 	bl	8000c62 <__retarget_lock_init_recursive>
 8000bd4:	f7ff ff96 	bl	8000b04 <__sfp_lock_release>
 8000bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000be0:	6025      	str	r5, [r4, #0]
 8000be2:	61a5      	str	r5, [r4, #24]
 8000be4:	2208      	movs	r2, #8
 8000be6:	4629      	mov	r1, r5
 8000be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bec:	f7ff fd44 	bl	8000678 <memset>
 8000bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bfc:	3468      	adds	r4, #104	; 0x68
 8000bfe:	e7d9      	b.n	8000bb4 <__sfp+0x1c>
 8000c00:	2104      	movs	r1, #4
 8000c02:	4638      	mov	r0, r7
 8000c04:	f7ff ff62 	bl	8000acc <__sfmoreglue>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	6030      	str	r0, [r6, #0]
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1d5      	bne.n	8000bbc <__sfp+0x24>
 8000c10:	f7ff ff78 	bl	8000b04 <__sfp_lock_release>
 8000c14:	230c      	movs	r3, #12
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	e7ee      	b.n	8000bf8 <__sfp+0x60>
 8000c1a:	bf00      	nop
 8000c1c:	080010a4 	.word	0x080010a4
 8000c20:	ffff0001 	.word	0xffff0001

08000c24 <_fwalk_reent>:
 8000c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c28:	4606      	mov	r6, r0
 8000c2a:	4688      	mov	r8, r1
 8000c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c30:	2700      	movs	r7, #0
 8000c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c36:	f1b9 0901 	subs.w	r9, r9, #1
 8000c3a:	d505      	bpl.n	8000c48 <_fwalk_reent+0x24>
 8000c3c:	6824      	ldr	r4, [r4, #0]
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d1f7      	bne.n	8000c32 <_fwalk_reent+0xe>
 8000c42:	4638      	mov	r0, r7
 8000c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c48:	89ab      	ldrh	r3, [r5, #12]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d907      	bls.n	8000c5e <_fwalk_reent+0x3a>
 8000c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c52:	3301      	adds	r3, #1
 8000c54:	d003      	beq.n	8000c5e <_fwalk_reent+0x3a>
 8000c56:	4629      	mov	r1, r5
 8000c58:	4630      	mov	r0, r6
 8000c5a:	47c0      	blx	r8
 8000c5c:	4307      	orrs	r7, r0
 8000c5e:	3568      	adds	r5, #104	; 0x68
 8000c60:	e7e9      	b.n	8000c36 <_fwalk_reent+0x12>

08000c62 <__retarget_lock_init_recursive>:
 8000c62:	4770      	bx	lr

08000c64 <__retarget_lock_acquire_recursive>:
 8000c64:	4770      	bx	lr

08000c66 <__retarget_lock_release_recursive>:
 8000c66:	4770      	bx	lr

08000c68 <__swhatbuf_r>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	460e      	mov	r6, r1
 8000c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c70:	2900      	cmp	r1, #0
 8000c72:	b096      	sub	sp, #88	; 0x58
 8000c74:	4614      	mov	r4, r2
 8000c76:	461d      	mov	r5, r3
 8000c78:	da08      	bge.n	8000c8c <__swhatbuf_r+0x24>
 8000c7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	602a      	str	r2, [r5, #0]
 8000c82:	061a      	lsls	r2, r3, #24
 8000c84:	d410      	bmi.n	8000ca8 <__swhatbuf_r+0x40>
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	e00e      	b.n	8000caa <__swhatbuf_r+0x42>
 8000c8c:	466a      	mov	r2, sp
 8000c8e:	f000 f9a7 	bl	8000fe0 <_fstat_r>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	dbf1      	blt.n	8000c7a <__swhatbuf_r+0x12>
 8000c96:	9a01      	ldr	r2, [sp, #4]
 8000c98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ca0:	425a      	negs	r2, r3
 8000ca2:	415a      	adcs	r2, r3
 8000ca4:	602a      	str	r2, [r5, #0]
 8000ca6:	e7ee      	b.n	8000c86 <__swhatbuf_r+0x1e>
 8000ca8:	2340      	movs	r3, #64	; 0x40
 8000caa:	2000      	movs	r0, #0
 8000cac:	6023      	str	r3, [r4, #0]
 8000cae:	b016      	add	sp, #88	; 0x58
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cb4 <__smakebuf_r>:
 8000cb4:	898b      	ldrh	r3, [r1, #12]
 8000cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cb8:	079d      	lsls	r5, r3, #30
 8000cba:	4606      	mov	r6, r0
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	d507      	bpl.n	8000cd0 <__smakebuf_r+0x1c>
 8000cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	6123      	str	r3, [r4, #16]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	6163      	str	r3, [r4, #20]
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	ab01      	add	r3, sp, #4
 8000cd2:	466a      	mov	r2, sp
 8000cd4:	f7ff ffc8 	bl	8000c68 <__swhatbuf_r>
 8000cd8:	9900      	ldr	r1, [sp, #0]
 8000cda:	4605      	mov	r5, r0
 8000cdc:	4630      	mov	r0, r6
 8000cde:	f000 f895 	bl	8000e0c <_malloc_r>
 8000ce2:	b948      	cbnz	r0, 8000cf8 <__smakebuf_r+0x44>
 8000ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ce8:	059a      	lsls	r2, r3, #22
 8000cea:	d4ef      	bmi.n	8000ccc <__smakebuf_r+0x18>
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	81a3      	strh	r3, [r4, #12]
 8000cf6:	e7e3      	b.n	8000cc0 <__smakebuf_r+0xc>
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <__smakebuf_r+0x7c>)
 8000cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cfc:	89a3      	ldrh	r3, [r4, #12]
 8000cfe:	6020      	str	r0, [r4, #0]
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	81a3      	strh	r3, [r4, #12]
 8000d06:	9b00      	ldr	r3, [sp, #0]
 8000d08:	6163      	str	r3, [r4, #20]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	6120      	str	r0, [r4, #16]
 8000d0e:	b15b      	cbz	r3, 8000d28 <__smakebuf_r+0x74>
 8000d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d14:	4630      	mov	r0, r6
 8000d16:	f000 f975 	bl	8001004 <_isatty_r>
 8000d1a:	b128      	cbz	r0, 8000d28 <__smakebuf_r+0x74>
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	f023 0303 	bic.w	r3, r3, #3
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	81a3      	strh	r3, [r4, #12]
 8000d28:	89a0      	ldrh	r0, [r4, #12]
 8000d2a:	4305      	orrs	r5, r0
 8000d2c:	81a5      	strh	r5, [r4, #12]
 8000d2e:	e7cd      	b.n	8000ccc <__smakebuf_r+0x18>
 8000d30:	08000ac1 	.word	0x08000ac1

08000d34 <_free_r>:
 8000d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d044      	beq.n	8000dc4 <_free_r+0x90>
 8000d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d3e:	9001      	str	r0, [sp, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f1a1 0404 	sub.w	r4, r1, #4
 8000d46:	bfb8      	it	lt
 8000d48:	18e4      	addlt	r4, r4, r3
 8000d4a:	f000 f97d 	bl	8001048 <__malloc_lock>
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <_free_r+0x94>)
 8000d50:	9801      	ldr	r0, [sp, #4]
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	b933      	cbnz	r3, 8000d64 <_free_r+0x30>
 8000d56:	6063      	str	r3, [r4, #4]
 8000d58:	6014      	str	r4, [r2, #0]
 8000d5a:	b003      	add	sp, #12
 8000d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d60:	f000 b978 	b.w	8001054 <__malloc_unlock>
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <_free_r+0x46>
 8000d68:	6825      	ldr	r5, [r4, #0]
 8000d6a:	1961      	adds	r1, r4, r5
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf01      	itttt	eq
 8000d70:	6819      	ldreq	r1, [r3, #0]
 8000d72:	685b      	ldreq	r3, [r3, #4]
 8000d74:	1949      	addeq	r1, r1, r5
 8000d76:	6021      	streq	r1, [r4, #0]
 8000d78:	e7ed      	b.n	8000d56 <_free_r+0x22>
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	b10b      	cbz	r3, 8000d84 <_free_r+0x50>
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d9fa      	bls.n	8000d7a <_free_r+0x46>
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	1855      	adds	r5, r2, r1
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	d10b      	bne.n	8000da4 <_free_r+0x70>
 8000d8c:	6824      	ldr	r4, [r4, #0]
 8000d8e:	4421      	add	r1, r4
 8000d90:	1854      	adds	r4, r2, r1
 8000d92:	42a3      	cmp	r3, r4
 8000d94:	6011      	str	r1, [r2, #0]
 8000d96:	d1e0      	bne.n	8000d5a <_free_r+0x26>
 8000d98:	681c      	ldr	r4, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	6053      	str	r3, [r2, #4]
 8000d9e:	4421      	add	r1, r4
 8000da0:	6011      	str	r1, [r2, #0]
 8000da2:	e7da      	b.n	8000d5a <_free_r+0x26>
 8000da4:	d902      	bls.n	8000dac <_free_r+0x78>
 8000da6:	230c      	movs	r3, #12
 8000da8:	6003      	str	r3, [r0, #0]
 8000daa:	e7d6      	b.n	8000d5a <_free_r+0x26>
 8000dac:	6825      	ldr	r5, [r4, #0]
 8000dae:	1961      	adds	r1, r4, r5
 8000db0:	428b      	cmp	r3, r1
 8000db2:	bf04      	itt	eq
 8000db4:	6819      	ldreq	r1, [r3, #0]
 8000db6:	685b      	ldreq	r3, [r3, #4]
 8000db8:	6063      	str	r3, [r4, #4]
 8000dba:	bf04      	itt	eq
 8000dbc:	1949      	addeq	r1, r1, r5
 8000dbe:	6021      	streq	r1, [r4, #0]
 8000dc0:	6054      	str	r4, [r2, #4]
 8000dc2:	e7ca      	b.n	8000d5a <_free_r+0x26>
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	20000090 	.word	0x20000090

08000dcc <sbrk_aligned>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	4e0e      	ldr	r6, [pc, #56]	; (8000e08 <sbrk_aligned+0x3c>)
 8000dd0:	460c      	mov	r4, r1
 8000dd2:	6831      	ldr	r1, [r6, #0]
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	b911      	cbnz	r1, 8000dde <sbrk_aligned+0x12>
 8000dd8:	f000 f88c 	bl	8000ef4 <_sbrk_r>
 8000ddc:	6030      	str	r0, [r6, #0]
 8000dde:	4621      	mov	r1, r4
 8000de0:	4628      	mov	r0, r5
 8000de2:	f000 f887 	bl	8000ef4 <_sbrk_r>
 8000de6:	1c43      	adds	r3, r0, #1
 8000de8:	d00a      	beq.n	8000e00 <sbrk_aligned+0x34>
 8000dea:	1cc4      	adds	r4, r0, #3
 8000dec:	f024 0403 	bic.w	r4, r4, #3
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d007      	beq.n	8000e04 <sbrk_aligned+0x38>
 8000df4:	1a21      	subs	r1, r4, r0
 8000df6:	4628      	mov	r0, r5
 8000df8:	f000 f87c 	bl	8000ef4 <_sbrk_r>
 8000dfc:	3001      	adds	r0, #1
 8000dfe:	d101      	bne.n	8000e04 <sbrk_aligned+0x38>
 8000e00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e04:	4620      	mov	r0, r4
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	20000094 	.word	0x20000094

08000e0c <_malloc_r>:
 8000e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e10:	1ccd      	adds	r5, r1, #3
 8000e12:	f025 0503 	bic.w	r5, r5, #3
 8000e16:	3508      	adds	r5, #8
 8000e18:	2d0c      	cmp	r5, #12
 8000e1a:	bf38      	it	cc
 8000e1c:	250c      	movcc	r5, #12
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	4607      	mov	r7, r0
 8000e22:	db01      	blt.n	8000e28 <_malloc_r+0x1c>
 8000e24:	42a9      	cmp	r1, r5
 8000e26:	d905      	bls.n	8000e34 <_malloc_r+0x28>
 8000e28:	230c      	movs	r3, #12
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	4630      	mov	r0, r6
 8000e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e34:	4e2e      	ldr	r6, [pc, #184]	; (8000ef0 <_malloc_r+0xe4>)
 8000e36:	f000 f907 	bl	8001048 <__malloc_lock>
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	461c      	mov	r4, r3
 8000e3e:	bb34      	cbnz	r4, 8000e8e <_malloc_r+0x82>
 8000e40:	4629      	mov	r1, r5
 8000e42:	4638      	mov	r0, r7
 8000e44:	f7ff ffc2 	bl	8000dcc <sbrk_aligned>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	d14d      	bne.n	8000eea <_malloc_r+0xde>
 8000e4e:	6834      	ldr	r4, [r6, #0]
 8000e50:	4626      	mov	r6, r4
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d140      	bne.n	8000ed8 <_malloc_r+0xcc>
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	4631      	mov	r1, r6
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	eb04 0803 	add.w	r8, r4, r3
 8000e60:	f000 f848 	bl	8000ef4 <_sbrk_r>
 8000e64:	4580      	cmp	r8, r0
 8000e66:	d13a      	bne.n	8000ede <_malloc_r+0xd2>
 8000e68:	6821      	ldr	r1, [r4, #0]
 8000e6a:	3503      	adds	r5, #3
 8000e6c:	1a6d      	subs	r5, r5, r1
 8000e6e:	f025 0503 	bic.w	r5, r5, #3
 8000e72:	3508      	adds	r5, #8
 8000e74:	2d0c      	cmp	r5, #12
 8000e76:	bf38      	it	cc
 8000e78:	250c      	movcc	r5, #12
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	f7ff ffa5 	bl	8000dcc <sbrk_aligned>
 8000e82:	3001      	adds	r0, #1
 8000e84:	d02b      	beq.n	8000ede <_malloc_r+0xd2>
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	442b      	add	r3, r5
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	e00e      	b.n	8000eac <_malloc_r+0xa0>
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	1b52      	subs	r2, r2, r5
 8000e92:	d41e      	bmi.n	8000ed2 <_malloc_r+0xc6>
 8000e94:	2a0b      	cmp	r2, #11
 8000e96:	d916      	bls.n	8000ec6 <_malloc_r+0xba>
 8000e98:	1961      	adds	r1, r4, r5
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	6025      	str	r5, [r4, #0]
 8000e9e:	bf18      	it	ne
 8000ea0:	6059      	strne	r1, [r3, #4]
 8000ea2:	6863      	ldr	r3, [r4, #4]
 8000ea4:	bf08      	it	eq
 8000ea6:	6031      	streq	r1, [r6, #0]
 8000ea8:	5162      	str	r2, [r4, r5]
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	4638      	mov	r0, r7
 8000eae:	f104 060b 	add.w	r6, r4, #11
 8000eb2:	f000 f8cf 	bl	8001054 <__malloc_unlock>
 8000eb6:	f026 0607 	bic.w	r6, r6, #7
 8000eba:	1d23      	adds	r3, r4, #4
 8000ebc:	1af2      	subs	r2, r6, r3
 8000ebe:	d0b6      	beq.n	8000e2e <_malloc_r+0x22>
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	50a3      	str	r3, [r4, r2]
 8000ec4:	e7b3      	b.n	8000e2e <_malloc_r+0x22>
 8000ec6:	6862      	ldr	r2, [r4, #4]
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	bf0c      	ite	eq
 8000ecc:	6032      	streq	r2, [r6, #0]
 8000ece:	605a      	strne	r2, [r3, #4]
 8000ed0:	e7ec      	b.n	8000eac <_malloc_r+0xa0>
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	6864      	ldr	r4, [r4, #4]
 8000ed6:	e7b2      	b.n	8000e3e <_malloc_r+0x32>
 8000ed8:	4634      	mov	r4, r6
 8000eda:	6876      	ldr	r6, [r6, #4]
 8000edc:	e7b9      	b.n	8000e52 <_malloc_r+0x46>
 8000ede:	230c      	movs	r3, #12
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4638      	mov	r0, r7
 8000ee4:	f000 f8b6 	bl	8001054 <__malloc_unlock>
 8000ee8:	e7a1      	b.n	8000e2e <_malloc_r+0x22>
 8000eea:	6025      	str	r5, [r4, #0]
 8000eec:	e7de      	b.n	8000eac <_malloc_r+0xa0>
 8000eee:	bf00      	nop
 8000ef0:	20000090 	.word	0x20000090

08000ef4 <_sbrk_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d06      	ldr	r5, [pc, #24]	; (8000f10 <_sbrk_r+0x1c>)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	602b      	str	r3, [r5, #0]
 8000f00:	f7ff fa34 	bl	800036c <_sbrk>
 8000f04:	1c43      	adds	r3, r0, #1
 8000f06:	d102      	bne.n	8000f0e <_sbrk_r+0x1a>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	b103      	cbz	r3, 8000f0e <_sbrk_r+0x1a>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	20000098 	.word	0x20000098

08000f14 <__sread>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	460c      	mov	r4, r1
 8000f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1c:	f000 f8a0 	bl	8001060 <_read_r>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	bfab      	itete	ge
 8000f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f26:	89a3      	ldrhlt	r3, [r4, #12]
 8000f28:	181b      	addge	r3, r3, r0
 8000f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f2e:	bfac      	ite	ge
 8000f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f32:	81a3      	strhlt	r3, [r4, #12]
 8000f34:	bd10      	pop	{r4, pc}

08000f36 <__swrite>:
 8000f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f3a:	461f      	mov	r7, r3
 8000f3c:	898b      	ldrh	r3, [r1, #12]
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	4605      	mov	r5, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	4616      	mov	r6, r2
 8000f46:	d505      	bpl.n	8000f54 <__swrite+0x1e>
 8000f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f000 f868 	bl	8001024 <_lseek_r>
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f5e:	81a3      	strh	r3, [r4, #12]
 8000f60:	4632      	mov	r2, r6
 8000f62:	463b      	mov	r3, r7
 8000f64:	4628      	mov	r0, r5
 8000f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6a:	f000 b817 	b.w	8000f9c <_write_r>

08000f6e <__sseek>:
 8000f6e:	b510      	push	{r4, lr}
 8000f70:	460c      	mov	r4, r1
 8000f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f76:	f000 f855 	bl	8001024 <_lseek_r>
 8000f7a:	1c43      	adds	r3, r0, #1
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	bf15      	itete	ne
 8000f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f8a:	81a3      	strheq	r3, [r4, #12]
 8000f8c:	bf18      	it	ne
 8000f8e:	81a3      	strhne	r3, [r4, #12]
 8000f90:	bd10      	pop	{r4, pc}

08000f92 <__sclose>:
 8000f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f96:	f000 b813 	b.w	8000fc0 <_close_r>
	...

08000f9c <_write_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4d07      	ldr	r5, [pc, #28]	; (8000fbc <_write_r+0x20>)
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	602a      	str	r2, [r5, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f7ff f98d 	bl	80002ca <_write>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_write_r+0x1e>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_write_r+0x1e>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	20000098 	.word	0x20000098

08000fc0 <_close_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4d06      	ldr	r5, [pc, #24]	; (8000fdc <_close_r+0x1c>)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	4608      	mov	r0, r1
 8000fca:	602b      	str	r3, [r5, #0]
 8000fcc:	f7ff f999 	bl	8000302 <_close>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_close_r+0x1a>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_close_r+0x1a>
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000098 	.word	0x20000098

08000fe0 <_fstat_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d07      	ldr	r5, [pc, #28]	; (8001000 <_fstat_r+0x20>)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4608      	mov	r0, r1
 8000fea:	4611      	mov	r1, r2
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	f7ff f994 	bl	800031a <_fstat>
 8000ff2:	1c43      	adds	r3, r0, #1
 8000ff4:	d102      	bne.n	8000ffc <_fstat_r+0x1c>
 8000ff6:	682b      	ldr	r3, [r5, #0]
 8000ff8:	b103      	cbz	r3, 8000ffc <_fstat_r+0x1c>
 8000ffa:	6023      	str	r3, [r4, #0]
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	20000098 	.word	0x20000098

08001004 <_isatty_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4d06      	ldr	r5, [pc, #24]	; (8001020 <_isatty_r+0x1c>)
 8001008:	2300      	movs	r3, #0
 800100a:	4604      	mov	r4, r0
 800100c:	4608      	mov	r0, r1
 800100e:	602b      	str	r3, [r5, #0]
 8001010:	f7ff f993 	bl	800033a <_isatty>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d102      	bne.n	800101e <_isatty_r+0x1a>
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	b103      	cbz	r3, 800101e <_isatty_r+0x1a>
 800101c:	6023      	str	r3, [r4, #0]
 800101e:	bd38      	pop	{r3, r4, r5, pc}
 8001020:	20000098 	.word	0x20000098

08001024 <_lseek_r>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4d07      	ldr	r5, [pc, #28]	; (8001044 <_lseek_r+0x20>)
 8001028:	4604      	mov	r4, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4611      	mov	r1, r2
 800102e:	2200      	movs	r2, #0
 8001030:	602a      	str	r2, [r5, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f7ff f98c 	bl	8000350 <_lseek>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_lseek_r+0x1e>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_lseek_r+0x1e>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	20000098 	.word	0x20000098

08001048 <__malloc_lock>:
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <__malloc_lock+0x8>)
 800104a:	f7ff be0b 	b.w	8000c64 <__retarget_lock_acquire_recursive>
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c

08001054 <__malloc_unlock>:
 8001054:	4801      	ldr	r0, [pc, #4]	; (800105c <__malloc_unlock+0x8>)
 8001056:	f7ff be06 	b.w	8000c66 <__retarget_lock_release_recursive>
 800105a:	bf00      	nop
 800105c:	2000008c 	.word	0x2000008c

08001060 <_read_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	; (8001080 <_read_r+0x20>)
 8001064:	4604      	mov	r4, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	2200      	movs	r2, #0
 800106c:	602a      	str	r2, [r5, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f7ff f90e 	bl	8000290 <_read>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_read_r+0x1e>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b103      	cbz	r3, 800107e <_read_r+0x1e>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	20000098 	.word	0x20000098

08001084 <_init>:
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001086:	bf00      	nop
 8001088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108a:	bc08      	pop	{r3}
 800108c:	469e      	mov	lr, r3
 800108e:	4770      	bx	lr

08001090 <_fini>:
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	bf00      	nop
 8001094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001096:	bc08      	pop	{r3}
 8001098:	469e      	mov	lr, r3
 800109a:	4770      	bx	lr
