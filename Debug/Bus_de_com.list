
Bus_de_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a0  080005a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a0  080005a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005a0  080005a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a0  080005a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080005ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005ac  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e1d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000818  00000000  00000000  00021e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00022670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00022818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a050  00000000  00000000  00022958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034a4  00000000  00000000  0003c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f250  00000000  00000000  0003fe4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf09c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004ac  00000000  00000000  000cf0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000588 	.word	0x08000588

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000588 	.word	0x08000588

08000204 <SysTick_Handler>:
extern uint8_t Flag;

//----------------- SYSTICK HANDLER +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ SYSTICK HANDLER ------------------------------------------------*/
/* @brief  Go in this function when a SysTick timer IRQ are activate.
 * @retval None */
void SysTick_Handler(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	ticks++;
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <SysTick_Handler+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <SysTick_Handler+0x18>)
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	20000024 	.word	0x20000024

08000220 <TIM2_IRQHandler>:

//----------------- SYSTICK HANDLER +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ SYSTICK HANDLER ------------------------------------------------*/
/* @brief  Go in this function when a Timer 2 IRQ are activate.
 * @retval None */
void TIM2_IRQHandler(void){
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF){
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d00a      	beq.n	8000248 <TIM2_IRQHandler+0x28>
		TIM2->SR &= ~TIM_SR_UIF;
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023c:	f023 0301 	bic.w	r3, r3, #1
 8000240:	6113      	str	r3, [r2, #16]
		Flag = 1;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <TIM2_IRQHandler+0x34>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
	}
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000020 	.word	0x20000020

08000258 <main>:

//----------------- MAIN ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ MAIN -----------------------------------------------------------*/
/* @brief  This function is the first function of the program
 * @retval None */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	uint8_t TH = 25;
	uint8_t TL = 18;
#endif

	/* Peripherals initialisation */
	GPIO_Init();
 800025c:	f000 f80a 	bl	8000274 <GPIO_Init>
	USART2_Init();
 8000260:	f000 f90a 	bl	8000478 <USART2_Init>
	SYSTICK_Init();
 8000264:	f000 f8a6 	bl	80003b4 <SYSTICK_Init>
	DWT_Init();
 8000268:	f000 f8b6 	bl	80003d8 <DWT_Init>
	TIM2TICK_Init();
 800026c:	f000 f8ce 	bl	800040c <TIM2TICK_Init>
#endif
#if (ONE_WIRE == 2 | (ONE_WIRE == 3) )
	Ds18b20_Dysplay_Temp();
#endif

	while(1)
 8000270:	e7fe      	b.n	8000270 <main+0x18>
	...

08000274 <GPIO_Init>:

//----------------- GLOBAL FUNCTIONS DEFINITION +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ GLOBAL FUNCTIONS DEFINITION ------------------------------------*/
//----------------- GPIO INIT ------------------------------------------------------------------------------- GPIO INIT ------------------------------------------------------*/
/* @brief  Initialise all PinOut
 * @retval None */
void GPIO_Init(void){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <GPIO_Init+0x60>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <GPIO_Init+0x60>)
 800027e:	f043 0305 	orr.w	r3, r3, #5
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

	/* Led Gpio Pin */
	GPIOA->MODER   |= OUTPUT_MODE <<10;						// PA5 Output LED
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <GPIO_Init+0x64>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <GPIO_Init+0x64>)
 800028a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028e:	6013      	str	r3, [r2, #0]

	/* Board Button Gpio Pin */
	GPIOC->MODER |= INPUT_MODE	<< 26;						// PC13 Input Push-Button
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <GPIO_Init+0x68>)
 8000292:	4a12      	ldr	r2, [pc, #72]	; (80002dc <GPIO_Init+0x68>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR  |= PULL_UP << GPIO_PUPDR_PUPD1_Pos;			/* PA1 push_pull One wire */
#endif

#if (SPI > 0)
	/* One Wire Gpio Pin */
	RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN; /* Clock activation */
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <GPIO_Init+0x60>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <GPIO_Init+0x60>)
 800029e:	f043 0305 	orr.w	r3, r3, #5
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER  |= OUTPUT_MODE << GPIO_MODER_MODER1_Pos;		/* PA1 alternate One wire */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <GPIO_Init+0x64>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <GPIO_Init+0x64>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= OUTPUT_OPEN_DRAIN << GPIO_OTYPER_OT1_Pos;	/* PA1 open drain One wire */
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <GPIO_Init+0x64>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <GPIO_Init+0x64>)
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  |= PULL_UP << GPIO_PUPDR_PUPD1_Pos;			/* PA1 push_pull One wire */
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <GPIO_Init+0x64>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <GPIO_Init+0x64>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	60d3      	str	r3, [r2, #12]
#endif
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020800 	.word	0x40020800

080002e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db0b      	blt.n	800030a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	f003 021f 	and.w	r2, r3, #31
 80002f8:	4907      	ldr	r1, [pc, #28]	; (8000318 <__NVIC_EnableIRQ+0x38>)
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	095b      	lsrs	r3, r3, #5
 8000300:	2001      	movs	r0, #1
 8000302:	fa00 f202 	lsl.w	r2, r0, r2
 8000306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e100 	.word	0xe000e100

0800031c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	db0a      	blt.n	8000346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	b2da      	uxtb	r2, r3
 8000334:	490c      	ldr	r1, [pc, #48]	; (8000368 <__NVIC_SetPriority+0x4c>)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	b2d2      	uxtb	r2, r2
 800033e:	440b      	add	r3, r1
 8000340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000344:	e00a      	b.n	800035c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4908      	ldr	r1, [pc, #32]	; (800036c <__NVIC_SetPriority+0x50>)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	f003 030f 	and.w	r3, r3, #15
 8000352:	3b04      	subs	r3, #4
 8000354:	0112      	lsls	r2, r2, #4
 8000356:	b2d2      	uxtb	r2, r2
 8000358:	440b      	add	r3, r1
 800035a:	761a      	strb	r2, [r3, #24]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	e000e100 	.word	0xe000e100
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ffc2 	bl	800031c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <SYSTICK_Init>:
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////
//----------------- SYSTICK INIT ---------------------------------------------------------------------------- SYSTICK INIT ---------------------------------------------------*/
/* @brief  Initialise and start the SYSTICK
 * @retval None */
void SYSTICK_Init(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <SYSTICK_Init+0x1c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <SYSTICK_Init+0x20>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	099b      	lsrs	r3, r3, #6
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ffd3 	bl	8000370 <SysTick_Config>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000
 80003d4:	10624dd3 	.word	0x10624dd3

080003d8 <DWT_Init>:
//////////////////////////////////////////////
//----------------- DWT INIT -------------------------------------------------------------------------------- DWT INIT -------------------------------------------------------*/
/* @brief  Initialise and start the DWT
 * @retval None */
void DWT_Init(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <DWT_Init+0x2c>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a08      	ldr	r2, [pc, #32]	; (8000404 <DWT_Init+0x2c>)
 80003e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e6:	60d3      	str	r3, [r2, #12]
//    DWT->LAR = 0xC5ACCE55;  // For Cortex M7
    DWT->CYCCNT = 0;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <DWT_Init+0x30>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <DWT_Init+0x30>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <DWT_Init+0x30>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6013      	str	r3, [r2, #0]
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	e000edf0 	.word	0xe000edf0
 8000408:	e0001000 	.word	0xe0001000

0800040c <TIM2TICK_Init>:
////////////// TIMER 2 ///////////////////////
//////////////////////////////////////////////
//----------------- TIM2TICK INIT --------------------------------------------------------------------------- TIM2TICK INIT --------------------------------------------------*/
/* @brief  Initialise and start the DWT
 * @retval None */
void TIM2TICK_Init(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	/* Clock Activation */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <TIM2TICK_Init+0x68>)
 8000412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000414:	4a17      	ldr	r2, [pc, #92]	; (8000474 <TIM2TICK_Init+0x68>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6413      	str	r3, [r2, #64]	; 0x40

	/* Interruption */
	NVIC_EnableIRQ( TIM2_IRQn );
 800041c:	201c      	movs	r0, #28
 800041e:	f7ff ff5f 	bl	80002e0 <__NVIC_EnableIRQ>

	/* Configuration Periph*/
	TIM2->PSC  = 15999;		// 1Khz en sortie du prescaler (16 MHz / (PSC + 1) = 1 kHz)
 8000422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000426:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR  = 60000; 	// 1 kHz * 60,000 = 60 secondes
 800042c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000430:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;    		// Réinitialiser le compteur
 8000436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->DIER |= TIM_DIER_UIE;
 800043e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	60d3      	str	r3, [r2, #12]
	TIM2->CR1  |= TIM_CR1_CEN;
 800044e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~TIM_SR_UIF;
 800045e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	6113      	str	r3, [r2, #16]
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40023800 	.word	0x40023800

08000478 <USART2_Init>:

//----------------- GLOBAL FUNCTIONS DEFINITION +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ GLOBAL FUNCTIONS DEFINITION ------------------------------------*/
//----------------- USART2 INIT ----------------------------------------------------------------------------- USART2 INIT ----------------------------------------------------*/
/* @brief  Initialise the USART2
 * @retval None */
void USART2_Init(void){
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <USART2_Init+0x68>)
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <USART2_Init+0x68>)
 8000482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000486:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <USART2_Init+0x6c>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <USART2_Init+0x6c>)
 800048e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000492:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <USART2_Init+0x70>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <USART2_Init+0x70>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <USART2_Init+0x70>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <USART2_Init+0x70>)
 80004a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004aa:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <USART2_Init+0x70>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <USART2_Init+0x70>)
 80004b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <USART2_Init+0x70>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <USART2_Init+0x70>)
 80004be:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004c2:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <USART2_Init+0x6c>)
 80004c6:	228b      	movs	r2, #139	; 0x8b
 80004c8:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <USART2_Init+0x6c>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <USART2_Init+0x6c>)
 80004d0:	f043 030c 	orr.w	r3, r3, #12
 80004d4:	60d3      	str	r3, [r2, #12]
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40004400 	.word	0x40004400
 80004e8:	40020000 	.word	0x40020000

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051a:	f000 f811 	bl	8000540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fe9b 	bl	8000258 <main>

08000522 <LoopForever>:

LoopForever:
  b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   r0, =_estack
 8000524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000530:	080005a8 	.word	0x080005a8
  ldr r2, =_sbss
 8000534:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000538:	20000028 	.word	0x20000028

0800053c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <__libc_init_array>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	4d0d      	ldr	r5, [pc, #52]	; (8000578 <__libc_init_array+0x38>)
 8000544:	4c0d      	ldr	r4, [pc, #52]	; (800057c <__libc_init_array+0x3c>)
 8000546:	1b64      	subs	r4, r4, r5
 8000548:	10a4      	asrs	r4, r4, #2
 800054a:	2600      	movs	r6, #0
 800054c:	42a6      	cmp	r6, r4
 800054e:	d109      	bne.n	8000564 <__libc_init_array+0x24>
 8000550:	4d0b      	ldr	r5, [pc, #44]	; (8000580 <__libc_init_array+0x40>)
 8000552:	4c0c      	ldr	r4, [pc, #48]	; (8000584 <__libc_init_array+0x44>)
 8000554:	f000 f818 	bl	8000588 <_init>
 8000558:	1b64      	subs	r4, r4, r5
 800055a:	10a4      	asrs	r4, r4, #2
 800055c:	2600      	movs	r6, #0
 800055e:	42a6      	cmp	r6, r4
 8000560:	d105      	bne.n	800056e <__libc_init_array+0x2e>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	f855 3b04 	ldr.w	r3, [r5], #4
 8000568:	4798      	blx	r3
 800056a:	3601      	adds	r6, #1
 800056c:	e7ee      	b.n	800054c <__libc_init_array+0xc>
 800056e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000572:	4798      	blx	r3
 8000574:	3601      	adds	r6, #1
 8000576:	e7f2      	b.n	800055e <__libc_init_array+0x1e>
 8000578:	080005a0 	.word	0x080005a0
 800057c:	080005a0 	.word	0x080005a0
 8000580:	080005a0 	.word	0x080005a0
 8000584:	080005a4 	.word	0x080005a4

08000588 <_init>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr

08000594 <_fini>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	bf00      	nop
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr
