
Bus_de_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc8  08001dc8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001dc8  08001dc8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dc8  08001dc8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dcc  08001dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000068  08001e38  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001e38  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003392  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e79  00000000  00000000  0002342a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  000242a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  00024578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b426  00000000  00000000  000247a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048d0  00000000  00000000  0003fbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cd0  00000000  00000000  00044496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010b4  00000000  00000000  000d51b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001cdc 	.word	0x08001cdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001cdc 	.word	0x08001cdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <Ds18b20_Init>:

extern ONEWIRE_PINOUT	PINOUT;

//----------------- DS18B20 INIT ------------------------------------------------------------------------------- DS18B20 INIT ------------------------------------------------------*/
void Ds18b20_Init(GPIO_TypeDef * GPIOX, uint8_t pin)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
	PINOUT.port  = GPIOX;
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <Ds18b20_Init+0x28>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6013      	str	r3, [r2, #0]
	PINOUT.pin   = pin;
 80002c2:	78fb      	ldrb	r3, [r7, #3]
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <Ds18b20_Init+0x28>)
 80002c8:	809a      	strh	r2, [r3, #4]
	Ds18b20_Is_Connected();
 80002ca:	f000 f807 	bl	80002dc <Ds18b20_Is_Connected>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000084 	.word	0x20000084

080002dc <Ds18b20_Is_Connected>:

//----------------- DS18B20 IS CONNECTED ------------------------------------------------------------------------------- DS18B20 IS CONNECTED ------------------------------------------------------*/
uint8_t Ds18b20_Is_Connected(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	71fb      	strb	r3, [r7, #7]

    val = ONEWIRE_Reset(PINOUT);
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <Ds18b20_Is_Connected+0x38>)
 80002e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002ec:	f000 f8cf 	bl	800048e <ONEWIRE_Reset>
 80002f0:	4603      	mov	r3, r0
 80002f2:	71fb      	strb	r3, [r7, #7]

    if (val == 0)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d103      	bne.n	8000302 <Ds18b20_Is_Connected+0x26>
    {
    	printf("The device are connected\r\n");
 80002fa:	4807      	ldr	r0, [pc, #28]	; (8000318 <Ds18b20_Is_Connected+0x3c>)
 80002fc:	f000 fd70 	bl	8000de0 <puts>
 8000300:	e002      	b.n	8000308 <Ds18b20_Is_Connected+0x2c>
    }
    else
    {
    	printf("No device\r\n");
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <Ds18b20_Is_Connected+0x40>)
 8000304:	f000 fd6c 	bl	8000de0 <puts>
    }

    return val;
 8000308:	79fb      	ldrb	r3, [r7, #7]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000084 	.word	0x20000084
 8000318:	08001cf4 	.word	0x08001cf4
 800031c:	08001d10 	.word	0x08001d10

08000320 <Ds18b20_Read_Temp>:

//----------------- DS18B20 READ TEMP ------------------------------------------------------------------------------- DS18B20 READ TEMP ------------------------------------------------------*/
void Ds18b20_Read_Temp(uint8_t Tab_val[9])
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
    ONEWIRE_Reset(PINOUT);
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 800032a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800032e:	f000 f8ae 	bl	800048e <ONEWIRE_Reset>
    ONEWIRE_WriteByte(PINOUT,0xCC);
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 8000334:	22cc      	movs	r2, #204	; 0xcc
 8000336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800033a:	f000 f90c 	bl	8000556 <ONEWIRE_WriteByte>
    ONEWIRE_WriteByte(PINOUT,0x44);
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 8000340:	2244      	movs	r2, #68	; 0x44
 8000342:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000346:	f000 f906 	bl	8000556 <ONEWIRE_WriteByte>
    DWT_Delay(10);
 800034a:	200a      	movs	r0, #10
 800034c:	f000 fbe4 	bl	8000b18 <DWT_Delay>

    ONEWIRE_Reset(PINOUT);
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 8000352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000356:	f000 f89a 	bl	800048e <ONEWIRE_Reset>
    ONEWIRE_WriteByte(PINOUT,0xCC);
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 800035c:	22cc      	movs	r2, #204	; 0xcc
 800035e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000362:	f000 f8f8 	bl	8000556 <ONEWIRE_WriteByte>
    ONEWIRE_WriteByte(PINOUT,0xBE);
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 8000368:	22be      	movs	r2, #190	; 0xbe
 800036a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800036e:	f000 f8f2 	bl	8000556 <ONEWIRE_WriteByte>
    for(int i = 0; i < 8; i++)
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e00c      	b.n	8000392 <Ds18b20_Read_Temp+0x72>
    {
    	Tab_val[i] = ONEWIRE_ReadByte (PINOUT);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	18d4      	adds	r4, r2, r3
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <Ds18b20_Read_Temp+0x84>)
 8000380:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000384:	f000 f93d 	bl	8000602 <ONEWIRE_ReadByte>
 8000388:	4603      	mov	r3, r0
 800038a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < 8; i++)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2b07      	cmp	r3, #7
 8000396:	ddef      	ble.n	8000378 <Ds18b20_Read_Temp+0x58>
    }
}
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd90      	pop	{r4, r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000084 	.word	0x20000084

080003a8 <GPIO_Init>:
//------------------ INCLUDE -------------------------------------------------------------------------------- INCLUDE --------------------------------------------------------*/
#include "gpio.h"
#include "main.h"

//------------------ DEFINE ----------------------------------------------------------------------- GLOBLAL STATEMENT ----------------------------------------------*/
void GPIO_Init(void){
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <GPIO_Init+0x54>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <GPIO_Init+0x54>)
 80003b2:	f043 0305 	orr.w	r3, r3, #5
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30

	/* GPIO Init */
	GPIOA->MODER   |= OUTPUT_MODE <<10;						// PA5 Output LED
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <GPIO_Init+0x58>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a10      	ldr	r2, [pc, #64]	; (8000400 <GPIO_Init+0x58>)
 80003be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003c2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <GPIO_Init+0x5c>)
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <GPIO_Init+0x5c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6013      	str	r3, [r2, #0]

	/* One Wire */
	GPIOA->MODER  |= OUTPUT_MODE << GPIO_MODER_MODER1_Pos;		// PA1 alternate One wire
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <GPIO_Init+0x58>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <GPIO_Init+0x58>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= OUTPUT_OPEN_DRAIN << GPIO_OTYPER_OT1_Pos;	// PA1 open drain One wire
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <GPIO_Init+0x58>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <GPIO_Init+0x58>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  |= PULL_UP << GPIO_PUPDR_PUPD1_Pos;			// PA1 push_pull One wire
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <GPIO_Init+0x58>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <GPIO_Init+0x58>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	60d3      	str	r3, [r2, #12]
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020000 	.word	0x40020000
 8000404:	40020800 	.word	0x40020800

08000408 <GPIO_SetPin>:

void GPIO_SetPin(GPIO_TypeDef* GPIO, uint16_t pin){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
	GPIO->ODR |= 1 << pin ;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	887a      	ldrh	r2, [r7, #2]
 800041a:	2101      	movs	r1, #1
 800041c:	fa01 f202 	lsl.w	r2, r1, r2
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <GPIO_ResetPin>:

void GPIO_ResetPin(GPIO_TypeDef* GPIO, uint16_t pin){
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	807b      	strh	r3, [r7, #2]
	GPIO->ODR &= ~(1 << pin) ;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	887a      	ldrh	r2, [r7, #2]
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	43d2      	mvns	r2, r2
 800044c:	401a      	ands	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <GPIO_ReadPin>:

void GPIO_TogglePin(GPIO_TypeDef* GPIO, uint16_t pin){
	GPIO->ODR ^= 1 << pin ;
}

uint16_t GPIO_ReadPin(GPIO_TypeDef* GPIO, uint16_t pin){
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	460b      	mov	r3, r1
 8000468:	807b      	strh	r3, [r7, #2]
	if((GPIO->IDR & (1 << pin)) !=0)	return 1;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	887a      	ldrh	r2, [r7, #2]
 8000470:	2101      	movs	r1, #1
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	4013      	ands	r3, r2
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <GPIO_ReadPin+0x22>
 800047c:	2301      	movs	r3, #1
 800047e:	e000      	b.n	8000482 <GPIO_ReadPin+0x24>
	else 								return 0;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <ONEWIRE_Reset>:
//----------------- INCLUDE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ INCLUDE --------------------------------------------------------*/
#include "one_wire.h"

//----------------- ONEWIRE RESET --------------------------------------------------------------------------- ONEWIRE RESET --------------------------------------------------*/
uint8_t ONEWIRE_Reset(ONEWIRE_PINOUT oneWire_Pinout)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b084      	sub	sp, #16
 8000492:	af00      	add	r7, sp, #0
 8000494:	463b      	mov	r3, r7
 8000496:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t reset_status = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	73fb      	strb	r3, [r7, #15]

 /* Niveau de tension bas */
    GPIO_ResetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	88ba      	ldrh	r2, [r7, #4]
 80004a2:	4611      	mov	r1, r2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffc4 	bl	8000432 <GPIO_ResetPin>
    DWT_Delay(480);
 80004aa:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80004ae:	f000 fb33 	bl	8000b18 <DWT_Delay>

 /* Niveau de tension haut */
    GPIO_SetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	88ba      	ldrh	r2, [r7, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffa5 	bl	8000408 <GPIO_SetPin>
    DWT_Delay(70);
 80004be:	2046      	movs	r0, #70	; 0x46
 80004c0:	f000 fb2a 	bl	8000b18 <DWT_Delay>

 /* Lecture du niveau */
    reset_status = GPIO_ReadPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	88ba      	ldrh	r2, [r7, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ffc7 	bl	800045e <GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	73fb      	strb	r3, [r7, #15]
    DWT_Delay(410);
 80004d4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80004d8:	f000 fb1e 	bl	8000b18 <DWT_Delay>

    return reset_status;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <ONEWIRE_WriteBit0>:

//----------------- ONEWIRE WRITE BIT 0 --------------------------------------------------------------------- ONEWIRE WRITE BIT 0 --------------------------------------------*/
void ONEWIRE_WriteBit0(ONEWIRE_PINOUT oneWire_Pinout)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	463b      	mov	r3, r7
 80004ee:	e883 0003 	stmia.w	r3, {r0, r1}
 /* Niveau de tension bas */
    GPIO_ResetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	88ba      	ldrh	r2, [r7, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff9a 	bl	8000432 <GPIO_ResetPin>
    DWT_Delay(60);
 80004fe:	203c      	movs	r0, #60	; 0x3c
 8000500:	f000 fb0a 	bl	8000b18 <DWT_Delay>

 /* Niveau de tension haut */
    GPIO_SetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	88ba      	ldrh	r2, [r7, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff7c 	bl	8000408 <GPIO_SetPin>
    DWT_Delay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f000 fb01 	bl	8000b18 <DWT_Delay>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <ONEWIRE_WriteBit1>:

//----------------- ONEWIRE WRITE BIT 1 --------------------------------------------------------------------- ONEWIRE WRITE BIT 1 --------------------------------------------*/
void ONEWIRE_WriteBit1(ONEWIRE_PINOUT oneWire_Pinout)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	463b      	mov	r3, r7
 8000526:	e883 0003 	stmia.w	r3, {r0, r1}
 /* Niveau de tension bas */
    GPIO_ResetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	88ba      	ldrh	r2, [r7, #4]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff7e 	bl	8000432 <GPIO_ResetPin>
    DWT_Delay(6);
 8000536:	2006      	movs	r0, #6
 8000538:	f000 faee 	bl	8000b18 <DWT_Delay>

 /* Niveau de tension haut */
    GPIO_SetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	88ba      	ldrh	r2, [r7, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff60 	bl	8000408 <GPIO_SetPin>
    DWT_Delay(64);
 8000548:	2040      	movs	r0, #64	; 0x40
 800054a:	f000 fae5 	bl	8000b18 <DWT_Delay>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <ONEWIRE_WriteByte>:

//----------------- ONEWIRE WRITE BYTE ---------------------------------------------------------------------- ONEWIRE WRITE BYTE ---------------------------------------------*/
void ONEWIRE_WriteByte(ONEWIRE_PINOUT oneWire_Pinout, uint8_t data)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	e883 0003 	stmia.w	r3, {r0, r1}
 8000564:	4613      	mov	r3, r2
 8000566:	71fb      	strb	r3, [r7, #7]
    for(int i = 0; i < 8; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e017      	b.n	800059e <ONEWIRE_WriteByte+0x48>
    {
        if ((data >> i) & 1)
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	fa42 f303 	asr.w	r3, r2, r3
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d006      	beq.n	800058c <ONEWIRE_WriteByte+0x36>
        {
            ONEWIRE_WriteBit1(oneWire_Pinout);
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000586:	f7ff ffca 	bl	800051e <ONEWIRE_WriteBit1>
 800058a:	e005      	b.n	8000598 <ONEWIRE_WriteByte+0x42>
        } else {
            ONEWIRE_WriteBit0(oneWire_Pinout);
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000594:	f7ff ffa7 	bl	80004e6 <ONEWIRE_WriteBit0>
    for(int i = 0; i < 8; i++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	dde4      	ble.n	800056e <ONEWIRE_WriteByte+0x18>
        }
    }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <ONEWIRE_ReadBit>:

//----------------- ONEWIRE READ BIT ------------------------------------------------------------------------ ONEWIRE READ BIT -----------------------------------------------*/
uint8_t ONEWIRE_ReadBit(ONEWIRE_PINOUT oneWire_Pinout)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b084      	sub	sp, #16
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	463b      	mov	r3, r7
 80005b6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t value = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

 /* Niveau de tension bas */
    GPIO_ResetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	88ba      	ldrh	r2, [r7, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff34 	bl	8000432 <GPIO_ResetPin>
    DWT_Delay(6);
 80005ca:	2006      	movs	r0, #6
 80005cc:	f000 faa4 	bl	8000b18 <DWT_Delay>

 /* Niveau de tension haut */
    GPIO_SetPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	88ba      	ldrh	r2, [r7, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff16 	bl	8000408 <GPIO_SetPin>
    DWT_Delay(9);
 80005dc:	2009      	movs	r0, #9
 80005de:	f000 fa9b 	bl	8000b18 <DWT_Delay>

 /* Niveau de tension bas */
    value = GPIO_ReadPin(oneWire_Pinout.port, oneWire_Pinout.pin);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	88ba      	ldrh	r2, [r7, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff38 	bl	800045e <GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
    DWT_Delay(55);
 80005f2:	2037      	movs	r0, #55	; 0x37
 80005f4:	f000 fa90 	bl	8000b18 <DWT_Delay>

    return value;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <ONEWIRE_ReadByte>:

//----------------- ONEWIRE READ BYTE ----------------------------------------------------------------------- ONEWIRE READ BYTE ----------------------------------------------*/
uint8_t ONEWIRE_ReadByte(ONEWIRE_PINOUT oneWire_Pinout)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	463b      	mov	r3, r7
 800060a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t value = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]

    for(int i = 0; i < 8; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	e012      	b.n	800063e <ONEWIRE_ReadByte+0x3c>
    {
         value |= (ONEWIRE_ReadBit(oneWire_Pinout)<<i);
 8000618:	463b      	mov	r3, r7
 800061a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800061e:	f7ff ffc6 	bl	80005ae <ONEWIRE_ReadBit>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	b25a      	sxtb	r2, r3
 800062e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000632:	4313      	orrs	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < 8; i++)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3301      	adds	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b07      	cmp	r3, #7
 8000642:	dde9      	ble.n	8000618 <ONEWIRE_ReadByte+0x16>
    }
    return value;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <USART2_Init+0x68>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <USART2_Init+0x68>)
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <USART2_Init+0x6c>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <USART2_Init+0x6c>)
 8000666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066a:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <USART2_Init+0x70>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <USART2_Init+0x70>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <USART2_Init+0x70>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <USART2_Init+0x70>)
 800067e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000682:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <USART2_Init+0x70>)
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <USART2_Init+0x70>)
 800068a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800068e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <USART2_Init+0x70>)
 8000692:	6a1b      	ldr	r3, [r3, #32]
 8000694:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <USART2_Init+0x70>)
 8000696:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800069a:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <USART2_Init+0x6c>)
 800069e:	228b      	movs	r2, #139	; 0x8b
 80006a0:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <USART2_Init+0x6c>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <USART2_Init+0x6c>)
 80006a8:	f043 030c 	orr.w	r3, r3, #12
 80006ac:	60d3      	str	r3, [r2, #12]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40004400 	.word	0x40004400
 80006c0:	40020000 	.word	0x40020000

080006c4 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <USART2_TransmitChar+0x2c>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 80006d4:	bf00      	nop
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <USART2_TransmitChar+0x2c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f9      	beq.n	80006d6 <USART2_TransmitChar+0x12>
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40004400 	.word	0x40004400

080006f4 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 80006f8:	bf00      	nop
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <USART2_ReceiveChar+0x24>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f9      	beq.n	80006fa <USART2_ReceiveChar+0x6>
	return USART2->DR;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <USART2_ReceiveChar+0x24>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	b2db      	uxtb	r3, r3

}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40004400 	.word	0x40004400

0800071c <SysTick_Handler>:
extern uint32_t ticks;
extern uint32_t ticks_tim2;
extern uint8_t Flag;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	ticks++;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SysTick_Handler+0x18>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <SysTick_Handler+0x18>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	2000009c 	.word	0x2000009c

08000738 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF){
 800073c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00a      	beq.n	8000760 <TIM2_IRQHandler+0x28>
		TIM2->SR &= ~TIM_SR_UIF;
 800074a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000754:	f023 0301 	bic.w	r3, r3, #1
 8000758:	6113      	str	r3, [r2, #16]
		Flag = 1;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <TIM2_IRQHandler+0x34>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
	}
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000095 	.word	0x20000095

08000770 <main>:

#define TEST_1 0
#define TEST_2 1

int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	/* Peripherals initialisation */
	GPIO_Init();
 8000776:	f7ff fe17 	bl	80003a8 <GPIO_Init>
	USART2_Init();
 800077a:	f7ff ff69 	bl	8000650 <USART2_Init>
	SYSTICK_Init();
 800077e:	f000 f99f 	bl	8000ac0 <SYSTICK_Init>
	DWT_Init();
 8000782:	f000 f9af 	bl	8000ae4 <DWT_Init>
	TIM2TICK_Init();
 8000786:	f000 f9fd 	bl	8000b84 <TIM2TICK_Init>
	Ds18b20_Init(GPIOA,1);
 800078a:	2101      	movs	r1, #1
 800078c:	4840      	ldr	r0, [pc, #256]	; (8000890 <main+0x120>)
 800078e:	f7ff fd8f 	bl	80002b0 <Ds18b20_Init>

	uint16_t temperature_brut = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	80fb      	strh	r3, [r7, #6]
	int16_t  temperature = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	80bb      	strh	r3, [r7, #4]
	int16_t  Av_virgule  = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	807b      	strh	r3, [r7, #2]
	int16_t  Ap_virgule  = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	803b      	strh	r3, [r7, #0]

	Flag = 0;
 80007a2:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <main+0x124>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	Ds18b20_Read_Temp( Bytes_recive);
 80007a8:	483b      	ldr	r0, [pc, #236]	; (8000898 <main+0x128>)
 80007aa:	f7ff fdb9 	bl	8000320 <Ds18b20_Read_Temp>
	temperature_brut = Bytes_recive[1]<<8 | Bytes_recive[0];
 80007ae:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <main+0x128>)
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <main+0x128>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	80fb      	strh	r3, [r7, #6]
	temperature = temperature_brut*1000/16;
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	da00      	bge.n	80007d2 <main+0x62>
 80007d0:	330f      	adds	r3, #15
 80007d2:	111b      	asrs	r3, r3, #4
 80007d4:	80bb      	strh	r3, [r7, #4]
	Av_virgule  = temperature / 1000;
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	4a30      	ldr	r2, [pc, #192]	; (800089c <main+0x12c>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	1192      	asrs	r2, r2, #6
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	807b      	strh	r3, [r7, #2]
	Ap_virgule  = temperature % 1000;
 80007e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007ec:	4a2b      	ldr	r2, [pc, #172]	; (800089c <main+0x12c>)
 80007ee:	fb82 1203 	smull	r1, r2, r2, r3
 80007f2:	1191      	asrs	r1, r2, #6
 80007f4:	17da      	asrs	r2, r3, #31
 80007f6:	1a8a      	subs	r2, r1, r2
 80007f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007fc:	fb01 f202 	mul.w	r2, r1, r2
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	803b      	strh	r3, [r7, #0]
	printf("temp = %d,%d deg \r\n",Av_virgule, Ap_virgule);
 8000804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000808:	f9b7 2000 	ldrsh.w	r2, [r7]
 800080c:	4619      	mov	r1, r3
 800080e:	4824      	ldr	r0, [pc, #144]	; (80008a0 <main+0x130>)
 8000810:	f000 fa60 	bl	8000cd4 <iprintf>

		/* TEST 1 */
		#if TEST_2


			if (Flag)
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <main+0x124>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0fb      	beq.n	8000814 <main+0xa4>
			{
				Flag = 0;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <main+0x124>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
				Ds18b20_Read_Temp( Bytes_recive);
 8000822:	481d      	ldr	r0, [pc, #116]	; (8000898 <main+0x128>)
 8000824:	f7ff fd7c 	bl	8000320 <Ds18b20_Read_Temp>
				temperature_brut = Bytes_recive[1]<<8 | Bytes_recive[0];
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <main+0x128>)
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <main+0x128>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	80fb      	strh	r3, [r7, #6]
				temperature = temperature_brut*1000/16;
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da00      	bge.n	800084c <main+0xdc>
 800084a:	330f      	adds	r3, #15
 800084c:	111b      	asrs	r3, r3, #4
 800084e:	80bb      	strh	r3, [r7, #4]
				Av_virgule  = temperature / 1000;
 8000850:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <main+0x12c>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	1192      	asrs	r2, r2, #6
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	807b      	strh	r3, [r7, #2]
				Ap_virgule  = temperature % 1000;
 8000862:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <main+0x12c>)
 8000868:	fb82 1203 	smull	r1, r2, r2, r3
 800086c:	1191      	asrs	r1, r2, #6
 800086e:	17da      	asrs	r2, r3, #31
 8000870:	1a8a      	subs	r2, r1, r2
 8000872:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000876:	fb01 f202 	mul.w	r2, r1, r2
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	803b      	strh	r3, [r7, #0]
				printf("temp = %d,%d deg \r\n",Av_virgule, Ap_virgule);
 800087e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000882:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <main+0x130>)
 800088a:	f000 fa23 	bl	8000cd4 <iprintf>
			if (Flag)
 800088e:	e7c1      	b.n	8000814 <main+0xa4>
 8000890:	40020000 	.word	0x40020000
 8000894:	20000095 	.word	0x20000095
 8000898:	2000008c 	.word	0x2000008c
 800089c:	10624dd3 	.word	0x10624dd3
 80008a0:	08001d1c 	.word	0x08001d1c

080008a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b6:	f000 f9a9 	bl	8000c0c <__io_getchar>
 80008ba:	4601      	mov	r1, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <_read+0x12>
	}

return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e009      	b.n	8000904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f979 	bl	8000bf0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf1      	blt.n	80008f0 <_write+0x12>
	}
	return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_close>:

int _close(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return -1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	605a      	str	r2, [r3, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_isatty>:

int _isatty(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f000 f95e 	bl	8000c70 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20020000 	.word	0x20020000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000098 	.word	0x20000098
 80009e8:	200000b0 	.word	0x200000b0

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f7ff ffc2 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SYSTICK_Init+0x1c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SYSTICK_Init+0x20>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	099b      	lsrs	r3, r3, #6
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffd3 	bl	8000a7c <SysTick_Config>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	10624dd3 	.word	0x10624dd3

08000ae4 <DWT_Init>:
//////////////////////////////////////////////
////////////// DW TIMER //////////////////////
//////////////////////////////////////////////

void DWT_Init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <DWT_Init+0x2c>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <DWT_Init+0x2c>)
 8000aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af2:	60d3      	str	r3, [r2, #12]
//    DWT->LAR = 0xC5ACCE55;  // For Cortex M7
    DWT->CYCCNT = 0;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <DWT_Init+0x30>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <DWT_Init+0x30>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <DWT_Init+0x30>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6013      	str	r3, [r2, #0]
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000edf0 	.word	0xe000edf0
 8000b14:	e0001000 	.word	0xe0001000

08000b18 <DWT_Delay>:
/**
 * Microsecond delays with DW Timer, blocking function
 * @param _us : microseconds to wait
 */
void DWT_Delay(uint32_t _us)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    uint32_t startTick  = DWT->CYCCNT;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <DWT_Delay+0x60>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	60fb      	str	r3, [r7, #12]
    uint32_t targetTick = DWT->CYCCNT + _us * (SystemCoreClock/1000000);
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <DWT_Delay+0x60>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <DWT_Delay+0x64>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4914      	ldr	r1, [pc, #80]	; (8000b80 <DWT_Delay+0x68>)
 8000b30:	fba1 1303 	umull	r1, r3, r1, r3
 8000b34:	0c9b      	lsrs	r3, r3, #18
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	fb01 f303 	mul.w	r3, r1, r3
 8000b3c:	4413      	add	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]

    // No overflow
    if (targetTick > startTick)
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d906      	bls.n	8000b56 <DWT_Delay+0x3e>
        while (DWT->CYCCNT < targetTick);
 8000b48:	bf00      	nop
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <DWT_Delay+0x60>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8fa      	bhi.n	8000b4a <DWT_Delay+0x32>

    // With overflow
    else
        while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);

}
 8000b54:	e00a      	b.n	8000b6c <DWT_Delay+0x54>
        while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 8000b56:	bf00      	nop
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <DWT_Delay+0x60>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d3fa      	bcc.n	8000b58 <DWT_Delay+0x40>
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <DWT_Delay+0x60>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f5      	bhi.n	8000b58 <DWT_Delay+0x40>
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e0001000 	.word	0xe0001000
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	431bde83 	.word	0x431bde83

08000b84 <TIM2TICK_Init>:


void TIM2TICK_Init(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	/* Clock Activation */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <TIM2TICK_Init+0x68>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <TIM2TICK_Init+0x68>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40

	/* Interruption */
	NVIC_EnableIRQ( TIM2_IRQn );
 8000b94:	201c      	movs	r0, #28
 8000b96:	f7ff ff29 	bl	80009ec <__NVIC_EnableIRQ>

	/* Configuration Periph*/
	TIM2->PSC  = 15999;		// 1Khz en sortie du prescaler (16 MHz / (PSC + 1) = 1 kHz)
 8000b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR  = 60000; 	// 1 kHz * 60,000 = 60 secondes
 8000ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;    		// Réinitialiser le compteur
 8000bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->DIER |= TIM_DIER_UIE;
 8000bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	60d3      	str	r3, [r2, #12]
	TIM2->CR1  |= TIM_CR1_CEN;
 8000bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~TIM_SR_UIF;
 8000bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	6113      	str	r3, [r2, #16]
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd61 	bl	80006c4 <USART2_TransmitChar>
	return 0;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 8000c10:	f7ff fd70 	bl	80006f4 <USART2_ReceiveChar>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c4a:	f000 f817 	bl	8000c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fd8f 	bl	8000770 <main>

08000c52 <LoopForever>:

LoopForever:
  b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   r0, =_estack
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c60:	08001dd0 	.word	0x08001dd0
  ldr r2, =_sbss
 8000c64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c68:	200000b0 	.word	0x200000b0

08000c6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <__errno>:
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <__errno+0x8>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000004 	.word	0x20000004

08000c7c <__libc_init_array>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	4d0d      	ldr	r5, [pc, #52]	; (8000cb4 <__libc_init_array+0x38>)
 8000c80:	4c0d      	ldr	r4, [pc, #52]	; (8000cb8 <__libc_init_array+0x3c>)
 8000c82:	1b64      	subs	r4, r4, r5
 8000c84:	10a4      	asrs	r4, r4, #2
 8000c86:	2600      	movs	r6, #0
 8000c88:	42a6      	cmp	r6, r4
 8000c8a:	d109      	bne.n	8000ca0 <__libc_init_array+0x24>
 8000c8c:	4d0b      	ldr	r5, [pc, #44]	; (8000cbc <__libc_init_array+0x40>)
 8000c8e:	4c0c      	ldr	r4, [pc, #48]	; (8000cc0 <__libc_init_array+0x44>)
 8000c90:	f001 f824 	bl	8001cdc <_init>
 8000c94:	1b64      	subs	r4, r4, r5
 8000c96:	10a4      	asrs	r4, r4, #2
 8000c98:	2600      	movs	r6, #0
 8000c9a:	42a6      	cmp	r6, r4
 8000c9c:	d105      	bne.n	8000caa <__libc_init_array+0x2e>
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca4:	4798      	blx	r3
 8000ca6:	3601      	adds	r6, #1
 8000ca8:	e7ee      	b.n	8000c88 <__libc_init_array+0xc>
 8000caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cae:	4798      	blx	r3
 8000cb0:	3601      	adds	r6, #1
 8000cb2:	e7f2      	b.n	8000c9a <__libc_init_array+0x1e>
 8000cb4:	08001dc8 	.word	0x08001dc8
 8000cb8:	08001dc8 	.word	0x08001dc8
 8000cbc:	08001dc8 	.word	0x08001dc8
 8000cc0:	08001dcc 	.word	0x08001dcc

08000cc4 <memset>:
 8000cc4:	4402      	add	r2, r0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d100      	bne.n	8000cce <memset+0xa>
 8000ccc:	4770      	bx	lr
 8000cce:	f803 1b01 	strb.w	r1, [r3], #1
 8000cd2:	e7f9      	b.n	8000cc8 <memset+0x4>

08000cd4 <iprintf>:
 8000cd4:	b40f      	push	{r0, r1, r2, r3}
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <iprintf+0x2c>)
 8000cd8:	b513      	push	{r0, r1, r4, lr}
 8000cda:	681c      	ldr	r4, [r3, #0]
 8000cdc:	b124      	cbz	r4, 8000ce8 <iprintf+0x14>
 8000cde:	69a3      	ldr	r3, [r4, #24]
 8000ce0:	b913      	cbnz	r3, 8000ce8 <iprintf+0x14>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f000 fa5e 	bl	80011a4 <__sinit>
 8000ce8:	ab05      	add	r3, sp, #20
 8000cea:	9a04      	ldr	r2, [sp, #16]
 8000cec:	68a1      	ldr	r1, [r4, #8]
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f000 fc67 	bl	80015c4 <_vfiprintf_r>
 8000cf6:	b002      	add	sp, #8
 8000cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cfc:	b004      	add	sp, #16
 8000cfe:	4770      	bx	lr
 8000d00:	20000004 	.word	0x20000004

08000d04 <_puts_r>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	460e      	mov	r6, r1
 8000d08:	4605      	mov	r5, r0
 8000d0a:	b118      	cbz	r0, 8000d14 <_puts_r+0x10>
 8000d0c:	6983      	ldr	r3, [r0, #24]
 8000d0e:	b90b      	cbnz	r3, 8000d14 <_puts_r+0x10>
 8000d10:	f000 fa48 	bl	80011a4 <__sinit>
 8000d14:	69ab      	ldr	r3, [r5, #24]
 8000d16:	68ac      	ldr	r4, [r5, #8]
 8000d18:	b913      	cbnz	r3, 8000d20 <_puts_r+0x1c>
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f000 fa42 	bl	80011a4 <__sinit>
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <_puts_r+0xd0>)
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d120      	bne.n	8000d68 <_puts_r+0x64>
 8000d26:	686c      	ldr	r4, [r5, #4]
 8000d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d2a:	07db      	lsls	r3, r3, #31
 8000d2c:	d405      	bmi.n	8000d3a <_puts_r+0x36>
 8000d2e:	89a3      	ldrh	r3, [r4, #12]
 8000d30:	0598      	lsls	r0, r3, #22
 8000d32:	d402      	bmi.n	8000d3a <_puts_r+0x36>
 8000d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d36:	f000 fad3 	bl	80012e0 <__retarget_lock_acquire_recursive>
 8000d3a:	89a3      	ldrh	r3, [r4, #12]
 8000d3c:	0719      	lsls	r1, r3, #28
 8000d3e:	d51d      	bpl.n	8000d7c <_puts_r+0x78>
 8000d40:	6923      	ldr	r3, [r4, #16]
 8000d42:	b1db      	cbz	r3, 8000d7c <_puts_r+0x78>
 8000d44:	3e01      	subs	r6, #1
 8000d46:	68a3      	ldr	r3, [r4, #8]
 8000d48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	60a3      	str	r3, [r4, #8]
 8000d50:	bb39      	cbnz	r1, 8000da2 <_puts_r+0x9e>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da38      	bge.n	8000dc8 <_puts_r+0xc4>
 8000d56:	4622      	mov	r2, r4
 8000d58:	210a      	movs	r1, #10
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f000 f848 	bl	8000df0 <__swbuf_r>
 8000d60:	3001      	adds	r0, #1
 8000d62:	d011      	beq.n	8000d88 <_puts_r+0x84>
 8000d64:	250a      	movs	r5, #10
 8000d66:	e011      	b.n	8000d8c <_puts_r+0x88>
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <_puts_r+0xd4>)
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	d101      	bne.n	8000d72 <_puts_r+0x6e>
 8000d6e:	68ac      	ldr	r4, [r5, #8]
 8000d70:	e7da      	b.n	8000d28 <_puts_r+0x24>
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <_puts_r+0xd8>)
 8000d74:	429c      	cmp	r4, r3
 8000d76:	bf08      	it	eq
 8000d78:	68ec      	ldreq	r4, [r5, #12]
 8000d7a:	e7d5      	b.n	8000d28 <_puts_r+0x24>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f000 f888 	bl	8000e94 <__swsetup_r>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d0dd      	beq.n	8000d44 <_puts_r+0x40>
 8000d88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d8e:	07da      	lsls	r2, r3, #31
 8000d90:	d405      	bmi.n	8000d9e <_puts_r+0x9a>
 8000d92:	89a3      	ldrh	r3, [r4, #12]
 8000d94:	059b      	lsls	r3, r3, #22
 8000d96:	d402      	bmi.n	8000d9e <_puts_r+0x9a>
 8000d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d9a:	f000 faa2 	bl	80012e2 <__retarget_lock_release_recursive>
 8000d9e:	4628      	mov	r0, r5
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da04      	bge.n	8000db0 <_puts_r+0xac>
 8000da6:	69a2      	ldr	r2, [r4, #24]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dc06      	bgt.n	8000dba <_puts_r+0xb6>
 8000dac:	290a      	cmp	r1, #10
 8000dae:	d004      	beq.n	8000dba <_puts_r+0xb6>
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	6022      	str	r2, [r4, #0]
 8000db6:	7019      	strb	r1, [r3, #0]
 8000db8:	e7c5      	b.n	8000d46 <_puts_r+0x42>
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f000 f817 	bl	8000df0 <__swbuf_r>
 8000dc2:	3001      	adds	r0, #1
 8000dc4:	d1bf      	bne.n	8000d46 <_puts_r+0x42>
 8000dc6:	e7df      	b.n	8000d88 <_puts_r+0x84>
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	250a      	movs	r5, #10
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	6022      	str	r2, [r4, #0]
 8000dd0:	701d      	strb	r5, [r3, #0]
 8000dd2:	e7db      	b.n	8000d8c <_puts_r+0x88>
 8000dd4:	08001d54 	.word	0x08001d54
 8000dd8:	08001d74 	.word	0x08001d74
 8000ddc:	08001d34 	.word	0x08001d34

08000de0 <puts>:
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <puts+0xc>)
 8000de2:	4601      	mov	r1, r0
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	f7ff bf8d 	b.w	8000d04 <_puts_r>
 8000dea:	bf00      	nop
 8000dec:	20000004 	.word	0x20000004

08000df0 <__swbuf_r>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	460e      	mov	r6, r1
 8000df4:	4614      	mov	r4, r2
 8000df6:	4605      	mov	r5, r0
 8000df8:	b118      	cbz	r0, 8000e02 <__swbuf_r+0x12>
 8000dfa:	6983      	ldr	r3, [r0, #24]
 8000dfc:	b90b      	cbnz	r3, 8000e02 <__swbuf_r+0x12>
 8000dfe:	f000 f9d1 	bl	80011a4 <__sinit>
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <__swbuf_r+0x98>)
 8000e04:	429c      	cmp	r4, r3
 8000e06:	d12b      	bne.n	8000e60 <__swbuf_r+0x70>
 8000e08:	686c      	ldr	r4, [r5, #4]
 8000e0a:	69a3      	ldr	r3, [r4, #24]
 8000e0c:	60a3      	str	r3, [r4, #8]
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	071a      	lsls	r2, r3, #28
 8000e12:	d52f      	bpl.n	8000e74 <__swbuf_r+0x84>
 8000e14:	6923      	ldr	r3, [r4, #16]
 8000e16:	b36b      	cbz	r3, 8000e74 <__swbuf_r+0x84>
 8000e18:	6923      	ldr	r3, [r4, #16]
 8000e1a:	6820      	ldr	r0, [r4, #0]
 8000e1c:	1ac0      	subs	r0, r0, r3
 8000e1e:	6963      	ldr	r3, [r4, #20]
 8000e20:	b2f6      	uxtb	r6, r6
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4637      	mov	r7, r6
 8000e26:	dc04      	bgt.n	8000e32 <__swbuf_r+0x42>
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f000 f926 	bl	800107c <_fflush_r>
 8000e30:	bb30      	cbnz	r0, 8000e80 <__swbuf_r+0x90>
 8000e32:	68a3      	ldr	r3, [r4, #8]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60a3      	str	r3, [r4, #8]
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	6022      	str	r2, [r4, #0]
 8000e3e:	701e      	strb	r6, [r3, #0]
 8000e40:	6963      	ldr	r3, [r4, #20]
 8000e42:	3001      	adds	r0, #1
 8000e44:	4283      	cmp	r3, r0
 8000e46:	d004      	beq.n	8000e52 <__swbuf_r+0x62>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	07db      	lsls	r3, r3, #31
 8000e4c:	d506      	bpl.n	8000e5c <__swbuf_r+0x6c>
 8000e4e:	2e0a      	cmp	r6, #10
 8000e50:	d104      	bne.n	8000e5c <__swbuf_r+0x6c>
 8000e52:	4621      	mov	r1, r4
 8000e54:	4628      	mov	r0, r5
 8000e56:	f000 f911 	bl	800107c <_fflush_r>
 8000e5a:	b988      	cbnz	r0, 8000e80 <__swbuf_r+0x90>
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <__swbuf_r+0x9c>)
 8000e62:	429c      	cmp	r4, r3
 8000e64:	d101      	bne.n	8000e6a <__swbuf_r+0x7a>
 8000e66:	68ac      	ldr	r4, [r5, #8]
 8000e68:	e7cf      	b.n	8000e0a <__swbuf_r+0x1a>
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <__swbuf_r+0xa0>)
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	bf08      	it	eq
 8000e70:	68ec      	ldreq	r4, [r5, #12]
 8000e72:	e7ca      	b.n	8000e0a <__swbuf_r+0x1a>
 8000e74:	4621      	mov	r1, r4
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 f80c 	bl	8000e94 <__swsetup_r>
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d0cb      	beq.n	8000e18 <__swbuf_r+0x28>
 8000e80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000e84:	e7ea      	b.n	8000e5c <__swbuf_r+0x6c>
 8000e86:	bf00      	nop
 8000e88:	08001d54 	.word	0x08001d54
 8000e8c:	08001d74 	.word	0x08001d74
 8000e90:	08001d34 	.word	0x08001d34

08000e94 <__swsetup_r>:
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <__swsetup_r+0xcc>)
 8000e96:	b570      	push	{r4, r5, r6, lr}
 8000e98:	681d      	ldr	r5, [r3, #0]
 8000e9a:	4606      	mov	r6, r0
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	b125      	cbz	r5, 8000eaa <__swsetup_r+0x16>
 8000ea0:	69ab      	ldr	r3, [r5, #24]
 8000ea2:	b913      	cbnz	r3, 8000eaa <__swsetup_r+0x16>
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f000 f97d 	bl	80011a4 <__sinit>
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <__swsetup_r+0xd0>)
 8000eac:	429c      	cmp	r4, r3
 8000eae:	d10f      	bne.n	8000ed0 <__swsetup_r+0x3c>
 8000eb0:	686c      	ldr	r4, [r5, #4]
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000eb8:	0719      	lsls	r1, r3, #28
 8000eba:	d42c      	bmi.n	8000f16 <__swsetup_r+0x82>
 8000ebc:	06dd      	lsls	r5, r3, #27
 8000ebe:	d411      	bmi.n	8000ee4 <__swsetup_r+0x50>
 8000ec0:	2309      	movs	r3, #9
 8000ec2:	6033      	str	r3, [r6, #0]
 8000ec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ec8:	81a3      	strh	r3, [r4, #12]
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ece:	e03e      	b.n	8000f4e <__swsetup_r+0xba>
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <__swsetup_r+0xd4>)
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	d101      	bne.n	8000eda <__swsetup_r+0x46>
 8000ed6:	68ac      	ldr	r4, [r5, #8]
 8000ed8:	e7eb      	b.n	8000eb2 <__swsetup_r+0x1e>
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <__swsetup_r+0xd8>)
 8000edc:	429c      	cmp	r4, r3
 8000ede:	bf08      	it	eq
 8000ee0:	68ec      	ldreq	r4, [r5, #12]
 8000ee2:	e7e6      	b.n	8000eb2 <__swsetup_r+0x1e>
 8000ee4:	0758      	lsls	r0, r3, #29
 8000ee6:	d512      	bpl.n	8000f0e <__swsetup_r+0x7a>
 8000ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000eea:	b141      	cbz	r1, 8000efe <__swsetup_r+0x6a>
 8000eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	d002      	beq.n	8000efa <__swsetup_r+0x66>
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	f000 fa5b 	bl	80013b0 <_free_r>
 8000efa:	2300      	movs	r3, #0
 8000efc:	6363      	str	r3, [r4, #52]	; 0x34
 8000efe:	89a3      	ldrh	r3, [r4, #12]
 8000f00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000f04:	81a3      	strh	r3, [r4, #12]
 8000f06:	2300      	movs	r3, #0
 8000f08:	6063      	str	r3, [r4, #4]
 8000f0a:	6923      	ldr	r3, [r4, #16]
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	89a3      	ldrh	r3, [r4, #12]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	81a3      	strh	r3, [r4, #12]
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	b94b      	cbnz	r3, 8000f2e <__swsetup_r+0x9a>
 8000f1a:	89a3      	ldrh	r3, [r4, #12]
 8000f1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d003      	beq.n	8000f2e <__swsetup_r+0x9a>
 8000f26:	4621      	mov	r1, r4
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f000 fa01 	bl	8001330 <__smakebuf_r>
 8000f2e:	89a0      	ldrh	r0, [r4, #12]
 8000f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f34:	f010 0301 	ands.w	r3, r0, #1
 8000f38:	d00a      	beq.n	8000f50 <__swsetup_r+0xbc>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60a3      	str	r3, [r4, #8]
 8000f3e:	6963      	ldr	r3, [r4, #20]
 8000f40:	425b      	negs	r3, r3
 8000f42:	61a3      	str	r3, [r4, #24]
 8000f44:	6923      	ldr	r3, [r4, #16]
 8000f46:	b943      	cbnz	r3, 8000f5a <__swsetup_r+0xc6>
 8000f48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000f4c:	d1ba      	bne.n	8000ec4 <__swsetup_r+0x30>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	0781      	lsls	r1, r0, #30
 8000f52:	bf58      	it	pl
 8000f54:	6963      	ldrpl	r3, [r4, #20]
 8000f56:	60a3      	str	r3, [r4, #8]
 8000f58:	e7f4      	b.n	8000f44 <__swsetup_r+0xb0>
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	e7f7      	b.n	8000f4e <__swsetup_r+0xba>
 8000f5e:	bf00      	nop
 8000f60:	20000004 	.word	0x20000004
 8000f64:	08001d54 	.word	0x08001d54
 8000f68:	08001d74 	.word	0x08001d74
 8000f6c:	08001d34 	.word	0x08001d34

08000f70 <__sflush_r>:
 8000f70:	898a      	ldrh	r2, [r1, #12]
 8000f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f76:	4605      	mov	r5, r0
 8000f78:	0710      	lsls	r0, r2, #28
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	d458      	bmi.n	8001030 <__sflush_r+0xc0>
 8000f7e:	684b      	ldr	r3, [r1, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dc05      	bgt.n	8000f90 <__sflush_r+0x20>
 8000f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dc02      	bgt.n	8000f90 <__sflush_r+0x20>
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d0f9      	beq.n	8000f8a <__sflush_r+0x1a>
 8000f96:	2300      	movs	r3, #0
 8000f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f9c:	682f      	ldr	r7, [r5, #0]
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	d032      	beq.n	8001008 <__sflush_r+0x98>
 8000fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fa4:	89a3      	ldrh	r3, [r4, #12]
 8000fa6:	075a      	lsls	r2, r3, #29
 8000fa8:	d505      	bpl.n	8000fb6 <__sflush_r+0x46>
 8000faa:	6863      	ldr	r3, [r4, #4]
 8000fac:	1ac0      	subs	r0, r0, r3
 8000fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000fb0:	b10b      	cbz	r3, 8000fb6 <__sflush_r+0x46>
 8000fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fb4:	1ac0      	subs	r0, r0, r3
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	4602      	mov	r2, r0
 8000fba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fbc:	6a21      	ldr	r1, [r4, #32]
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	47b0      	blx	r6
 8000fc2:	1c43      	adds	r3, r0, #1
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	d106      	bne.n	8000fd6 <__sflush_r+0x66>
 8000fc8:	6829      	ldr	r1, [r5, #0]
 8000fca:	291d      	cmp	r1, #29
 8000fcc:	d82c      	bhi.n	8001028 <__sflush_r+0xb8>
 8000fce:	4a2a      	ldr	r2, [pc, #168]	; (8001078 <__sflush_r+0x108>)
 8000fd0:	40ca      	lsrs	r2, r1
 8000fd2:	07d6      	lsls	r6, r2, #31
 8000fd4:	d528      	bpl.n	8001028 <__sflush_r+0xb8>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6062      	str	r2, [r4, #4]
 8000fda:	04d9      	lsls	r1, r3, #19
 8000fdc:	6922      	ldr	r2, [r4, #16]
 8000fde:	6022      	str	r2, [r4, #0]
 8000fe0:	d504      	bpl.n	8000fec <__sflush_r+0x7c>
 8000fe2:	1c42      	adds	r2, r0, #1
 8000fe4:	d101      	bne.n	8000fea <__sflush_r+0x7a>
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	b903      	cbnz	r3, 8000fec <__sflush_r+0x7c>
 8000fea:	6560      	str	r0, [r4, #84]	; 0x54
 8000fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fee:	602f      	str	r7, [r5, #0]
 8000ff0:	2900      	cmp	r1, #0
 8000ff2:	d0ca      	beq.n	8000f8a <__sflush_r+0x1a>
 8000ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	d002      	beq.n	8001002 <__sflush_r+0x92>
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f000 f9d7 	bl	80013b0 <_free_r>
 8001002:	2000      	movs	r0, #0
 8001004:	6360      	str	r0, [r4, #52]	; 0x34
 8001006:	e7c1      	b.n	8000f8c <__sflush_r+0x1c>
 8001008:	6a21      	ldr	r1, [r4, #32]
 800100a:	2301      	movs	r3, #1
 800100c:	4628      	mov	r0, r5
 800100e:	47b0      	blx	r6
 8001010:	1c41      	adds	r1, r0, #1
 8001012:	d1c7      	bne.n	8000fa4 <__sflush_r+0x34>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0c4      	beq.n	8000fa4 <__sflush_r+0x34>
 800101a:	2b1d      	cmp	r3, #29
 800101c:	d001      	beq.n	8001022 <__sflush_r+0xb2>
 800101e:	2b16      	cmp	r3, #22
 8001020:	d101      	bne.n	8001026 <__sflush_r+0xb6>
 8001022:	602f      	str	r7, [r5, #0]
 8001024:	e7b1      	b.n	8000f8a <__sflush_r+0x1a>
 8001026:	89a3      	ldrh	r3, [r4, #12]
 8001028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102c:	81a3      	strh	r3, [r4, #12]
 800102e:	e7ad      	b.n	8000f8c <__sflush_r+0x1c>
 8001030:	690f      	ldr	r7, [r1, #16]
 8001032:	2f00      	cmp	r7, #0
 8001034:	d0a9      	beq.n	8000f8a <__sflush_r+0x1a>
 8001036:	0793      	lsls	r3, r2, #30
 8001038:	680e      	ldr	r6, [r1, #0]
 800103a:	bf08      	it	eq
 800103c:	694b      	ldreq	r3, [r1, #20]
 800103e:	600f      	str	r7, [r1, #0]
 8001040:	bf18      	it	ne
 8001042:	2300      	movne	r3, #0
 8001044:	eba6 0807 	sub.w	r8, r6, r7
 8001048:	608b      	str	r3, [r1, #8]
 800104a:	f1b8 0f00 	cmp.w	r8, #0
 800104e:	dd9c      	ble.n	8000f8a <__sflush_r+0x1a>
 8001050:	6a21      	ldr	r1, [r4, #32]
 8001052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001054:	4643      	mov	r3, r8
 8001056:	463a      	mov	r2, r7
 8001058:	4628      	mov	r0, r5
 800105a:	47b0      	blx	r6
 800105c:	2800      	cmp	r0, #0
 800105e:	dc06      	bgt.n	800106e <__sflush_r+0xfe>
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001066:	81a3      	strh	r3, [r4, #12]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106c:	e78e      	b.n	8000f8c <__sflush_r+0x1c>
 800106e:	4407      	add	r7, r0
 8001070:	eba8 0800 	sub.w	r8, r8, r0
 8001074:	e7e9      	b.n	800104a <__sflush_r+0xda>
 8001076:	bf00      	nop
 8001078:	20400001 	.word	0x20400001

0800107c <_fflush_r>:
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	690b      	ldr	r3, [r1, #16]
 8001080:	4605      	mov	r5, r0
 8001082:	460c      	mov	r4, r1
 8001084:	b913      	cbnz	r3, 800108c <_fflush_r+0x10>
 8001086:	2500      	movs	r5, #0
 8001088:	4628      	mov	r0, r5
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	b118      	cbz	r0, 8001096 <_fflush_r+0x1a>
 800108e:	6983      	ldr	r3, [r0, #24]
 8001090:	b90b      	cbnz	r3, 8001096 <_fflush_r+0x1a>
 8001092:	f000 f887 	bl	80011a4 <__sinit>
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <_fflush_r+0x6c>)
 8001098:	429c      	cmp	r4, r3
 800109a:	d11b      	bne.n	80010d4 <_fflush_r+0x58>
 800109c:	686c      	ldr	r4, [r5, #4]
 800109e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0ef      	beq.n	8001086 <_fflush_r+0xa>
 80010a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80010a8:	07d0      	lsls	r0, r2, #31
 80010aa:	d404      	bmi.n	80010b6 <_fflush_r+0x3a>
 80010ac:	0599      	lsls	r1, r3, #22
 80010ae:	d402      	bmi.n	80010b6 <_fflush_r+0x3a>
 80010b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010b2:	f000 f915 	bl	80012e0 <__retarget_lock_acquire_recursive>
 80010b6:	4628      	mov	r0, r5
 80010b8:	4621      	mov	r1, r4
 80010ba:	f7ff ff59 	bl	8000f70 <__sflush_r>
 80010be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010c0:	07da      	lsls	r2, r3, #31
 80010c2:	4605      	mov	r5, r0
 80010c4:	d4e0      	bmi.n	8001088 <_fflush_r+0xc>
 80010c6:	89a3      	ldrh	r3, [r4, #12]
 80010c8:	059b      	lsls	r3, r3, #22
 80010ca:	d4dd      	bmi.n	8001088 <_fflush_r+0xc>
 80010cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010ce:	f000 f908 	bl	80012e2 <__retarget_lock_release_recursive>
 80010d2:	e7d9      	b.n	8001088 <_fflush_r+0xc>
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <_fflush_r+0x70>)
 80010d6:	429c      	cmp	r4, r3
 80010d8:	d101      	bne.n	80010de <_fflush_r+0x62>
 80010da:	68ac      	ldr	r4, [r5, #8]
 80010dc:	e7df      	b.n	800109e <_fflush_r+0x22>
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <_fflush_r+0x74>)
 80010e0:	429c      	cmp	r4, r3
 80010e2:	bf08      	it	eq
 80010e4:	68ec      	ldreq	r4, [r5, #12]
 80010e6:	e7da      	b.n	800109e <_fflush_r+0x22>
 80010e8:	08001d54 	.word	0x08001d54
 80010ec:	08001d74 	.word	0x08001d74
 80010f0:	08001d34 	.word	0x08001d34

080010f4 <std>:
 80010f4:	2300      	movs	r3, #0
 80010f6:	b510      	push	{r4, lr}
 80010f8:	4604      	mov	r4, r0
 80010fa:	e9c0 3300 	strd	r3, r3, [r0]
 80010fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001102:	6083      	str	r3, [r0, #8]
 8001104:	8181      	strh	r1, [r0, #12]
 8001106:	6643      	str	r3, [r0, #100]	; 0x64
 8001108:	81c2      	strh	r2, [r0, #14]
 800110a:	6183      	str	r3, [r0, #24]
 800110c:	4619      	mov	r1, r3
 800110e:	2208      	movs	r2, #8
 8001110:	305c      	adds	r0, #92	; 0x5c
 8001112:	f7ff fdd7 	bl	8000cc4 <memset>
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <std+0x38>)
 8001118:	6263      	str	r3, [r4, #36]	; 0x24
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <std+0x3c>)
 800111c:	62a3      	str	r3, [r4, #40]	; 0x28
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <std+0x40>)
 8001120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <std+0x44>)
 8001124:	6224      	str	r4, [r4, #32]
 8001126:	6323      	str	r3, [r4, #48]	; 0x30
 8001128:	bd10      	pop	{r4, pc}
 800112a:	bf00      	nop
 800112c:	08001b6d 	.word	0x08001b6d
 8001130:	08001b8f 	.word	0x08001b8f
 8001134:	08001bc7 	.word	0x08001bc7
 8001138:	08001beb 	.word	0x08001beb

0800113c <_cleanup_r>:
 800113c:	4901      	ldr	r1, [pc, #4]	; (8001144 <_cleanup_r+0x8>)
 800113e:	f000 b8af 	b.w	80012a0 <_fwalk_reent>
 8001142:	bf00      	nop
 8001144:	0800107d 	.word	0x0800107d

08001148 <__sfmoreglue>:
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	2268      	movs	r2, #104	; 0x68
 800114c:	1e4d      	subs	r5, r1, #1
 800114e:	4355      	muls	r5, r2
 8001150:	460e      	mov	r6, r1
 8001152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001156:	f000 f997 	bl	8001488 <_malloc_r>
 800115a:	4604      	mov	r4, r0
 800115c:	b140      	cbz	r0, 8001170 <__sfmoreglue+0x28>
 800115e:	2100      	movs	r1, #0
 8001160:	e9c0 1600 	strd	r1, r6, [r0]
 8001164:	300c      	adds	r0, #12
 8001166:	60a0      	str	r0, [r4, #8]
 8001168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800116c:	f7ff fdaa 	bl	8000cc4 <memset>
 8001170:	4620      	mov	r0, r4
 8001172:	bd70      	pop	{r4, r5, r6, pc}

08001174 <__sfp_lock_acquire>:
 8001174:	4801      	ldr	r0, [pc, #4]	; (800117c <__sfp_lock_acquire+0x8>)
 8001176:	f000 b8b3 	b.w	80012e0 <__retarget_lock_acquire_recursive>
 800117a:	bf00      	nop
 800117c:	200000a1 	.word	0x200000a1

08001180 <__sfp_lock_release>:
 8001180:	4801      	ldr	r0, [pc, #4]	; (8001188 <__sfp_lock_release+0x8>)
 8001182:	f000 b8ae 	b.w	80012e2 <__retarget_lock_release_recursive>
 8001186:	bf00      	nop
 8001188:	200000a1 	.word	0x200000a1

0800118c <__sinit_lock_acquire>:
 800118c:	4801      	ldr	r0, [pc, #4]	; (8001194 <__sinit_lock_acquire+0x8>)
 800118e:	f000 b8a7 	b.w	80012e0 <__retarget_lock_acquire_recursive>
 8001192:	bf00      	nop
 8001194:	200000a2 	.word	0x200000a2

08001198 <__sinit_lock_release>:
 8001198:	4801      	ldr	r0, [pc, #4]	; (80011a0 <__sinit_lock_release+0x8>)
 800119a:	f000 b8a2 	b.w	80012e2 <__retarget_lock_release_recursive>
 800119e:	bf00      	nop
 80011a0:	200000a2 	.word	0x200000a2

080011a4 <__sinit>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	4604      	mov	r4, r0
 80011a8:	f7ff fff0 	bl	800118c <__sinit_lock_acquire>
 80011ac:	69a3      	ldr	r3, [r4, #24]
 80011ae:	b11b      	cbz	r3, 80011b8 <__sinit+0x14>
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b4:	f7ff bff0 	b.w	8001198 <__sinit_lock_release>
 80011b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80011bc:	6523      	str	r3, [r4, #80]	; 0x50
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__sinit+0x68>)
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <__sinit+0x6c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80011c6:	42a3      	cmp	r3, r4
 80011c8:	bf04      	itt	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	61a3      	streq	r3, [r4, #24]
 80011ce:	4620      	mov	r0, r4
 80011d0:	f000 f820 	bl	8001214 <__sfp>
 80011d4:	6060      	str	r0, [r4, #4]
 80011d6:	4620      	mov	r0, r4
 80011d8:	f000 f81c 	bl	8001214 <__sfp>
 80011dc:	60a0      	str	r0, [r4, #8]
 80011de:	4620      	mov	r0, r4
 80011e0:	f000 f818 	bl	8001214 <__sfp>
 80011e4:	2200      	movs	r2, #0
 80011e6:	60e0      	str	r0, [r4, #12]
 80011e8:	2104      	movs	r1, #4
 80011ea:	6860      	ldr	r0, [r4, #4]
 80011ec:	f7ff ff82 	bl	80010f4 <std>
 80011f0:	68a0      	ldr	r0, [r4, #8]
 80011f2:	2201      	movs	r2, #1
 80011f4:	2109      	movs	r1, #9
 80011f6:	f7ff ff7d 	bl	80010f4 <std>
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	2202      	movs	r2, #2
 80011fe:	2112      	movs	r1, #18
 8001200:	f7ff ff78 	bl	80010f4 <std>
 8001204:	2301      	movs	r3, #1
 8001206:	61a3      	str	r3, [r4, #24]
 8001208:	e7d2      	b.n	80011b0 <__sinit+0xc>
 800120a:	bf00      	nop
 800120c:	08001d30 	.word	0x08001d30
 8001210:	0800113d 	.word	0x0800113d

08001214 <__sfp>:
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001216:	4607      	mov	r7, r0
 8001218:	f7ff ffac 	bl	8001174 <__sfp_lock_acquire>
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <__sfp+0x84>)
 800121e:	681e      	ldr	r6, [r3, #0]
 8001220:	69b3      	ldr	r3, [r6, #24]
 8001222:	b913      	cbnz	r3, 800122a <__sfp+0x16>
 8001224:	4630      	mov	r0, r6
 8001226:	f7ff ffbd 	bl	80011a4 <__sinit>
 800122a:	3648      	adds	r6, #72	; 0x48
 800122c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001230:	3b01      	subs	r3, #1
 8001232:	d503      	bpl.n	800123c <__sfp+0x28>
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	b30b      	cbz	r3, 800127c <__sfp+0x68>
 8001238:	6836      	ldr	r6, [r6, #0]
 800123a:	e7f7      	b.n	800122c <__sfp+0x18>
 800123c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001240:	b9d5      	cbnz	r5, 8001278 <__sfp+0x64>
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <__sfp+0x88>)
 8001244:	60e3      	str	r3, [r4, #12]
 8001246:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800124a:	6665      	str	r5, [r4, #100]	; 0x64
 800124c:	f000 f847 	bl	80012de <__retarget_lock_init_recursive>
 8001250:	f7ff ff96 	bl	8001180 <__sfp_lock_release>
 8001254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800125c:	6025      	str	r5, [r4, #0]
 800125e:	61a5      	str	r5, [r4, #24]
 8001260:	2208      	movs	r2, #8
 8001262:	4629      	mov	r1, r5
 8001264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001268:	f7ff fd2c 	bl	8000cc4 <memset>
 800126c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001274:	4620      	mov	r0, r4
 8001276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001278:	3468      	adds	r4, #104	; 0x68
 800127a:	e7d9      	b.n	8001230 <__sfp+0x1c>
 800127c:	2104      	movs	r1, #4
 800127e:	4638      	mov	r0, r7
 8001280:	f7ff ff62 	bl	8001148 <__sfmoreglue>
 8001284:	4604      	mov	r4, r0
 8001286:	6030      	str	r0, [r6, #0]
 8001288:	2800      	cmp	r0, #0
 800128a:	d1d5      	bne.n	8001238 <__sfp+0x24>
 800128c:	f7ff ff78 	bl	8001180 <__sfp_lock_release>
 8001290:	230c      	movs	r3, #12
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	e7ee      	b.n	8001274 <__sfp+0x60>
 8001296:	bf00      	nop
 8001298:	08001d30 	.word	0x08001d30
 800129c:	ffff0001 	.word	0xffff0001

080012a0 <_fwalk_reent>:
 80012a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012a4:	4606      	mov	r6, r0
 80012a6:	4688      	mov	r8, r1
 80012a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80012ac:	2700      	movs	r7, #0
 80012ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012b2:	f1b9 0901 	subs.w	r9, r9, #1
 80012b6:	d505      	bpl.n	80012c4 <_fwalk_reent+0x24>
 80012b8:	6824      	ldr	r4, [r4, #0]
 80012ba:	2c00      	cmp	r4, #0
 80012bc:	d1f7      	bne.n	80012ae <_fwalk_reent+0xe>
 80012be:	4638      	mov	r0, r7
 80012c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012c4:	89ab      	ldrh	r3, [r5, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d907      	bls.n	80012da <_fwalk_reent+0x3a>
 80012ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012ce:	3301      	adds	r3, #1
 80012d0:	d003      	beq.n	80012da <_fwalk_reent+0x3a>
 80012d2:	4629      	mov	r1, r5
 80012d4:	4630      	mov	r0, r6
 80012d6:	47c0      	blx	r8
 80012d8:	4307      	orrs	r7, r0
 80012da:	3568      	adds	r5, #104	; 0x68
 80012dc:	e7e9      	b.n	80012b2 <_fwalk_reent+0x12>

080012de <__retarget_lock_init_recursive>:
 80012de:	4770      	bx	lr

080012e0 <__retarget_lock_acquire_recursive>:
 80012e0:	4770      	bx	lr

080012e2 <__retarget_lock_release_recursive>:
 80012e2:	4770      	bx	lr

080012e4 <__swhatbuf_r>:
 80012e4:	b570      	push	{r4, r5, r6, lr}
 80012e6:	460e      	mov	r6, r1
 80012e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ec:	2900      	cmp	r1, #0
 80012ee:	b096      	sub	sp, #88	; 0x58
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	da08      	bge.n	8001308 <__swhatbuf_r+0x24>
 80012f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	602a      	str	r2, [r5, #0]
 80012fe:	061a      	lsls	r2, r3, #24
 8001300:	d410      	bmi.n	8001324 <__swhatbuf_r+0x40>
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	e00e      	b.n	8001326 <__swhatbuf_r+0x42>
 8001308:	466a      	mov	r2, sp
 800130a:	f000 fc95 	bl	8001c38 <_fstat_r>
 800130e:	2800      	cmp	r0, #0
 8001310:	dbf1      	blt.n	80012f6 <__swhatbuf_r+0x12>
 8001312:	9a01      	ldr	r2, [sp, #4]
 8001314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800131c:	425a      	negs	r2, r3
 800131e:	415a      	adcs	r2, r3
 8001320:	602a      	str	r2, [r5, #0]
 8001322:	e7ee      	b.n	8001302 <__swhatbuf_r+0x1e>
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	2000      	movs	r0, #0
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	b016      	add	sp, #88	; 0x58
 800132c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001330 <__smakebuf_r>:
 8001330:	898b      	ldrh	r3, [r1, #12]
 8001332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001334:	079d      	lsls	r5, r3, #30
 8001336:	4606      	mov	r6, r0
 8001338:	460c      	mov	r4, r1
 800133a:	d507      	bpl.n	800134c <__smakebuf_r+0x1c>
 800133c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	6123      	str	r3, [r4, #16]
 8001344:	2301      	movs	r3, #1
 8001346:	6163      	str	r3, [r4, #20]
 8001348:	b002      	add	sp, #8
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	ab01      	add	r3, sp, #4
 800134e:	466a      	mov	r2, sp
 8001350:	f7ff ffc8 	bl	80012e4 <__swhatbuf_r>
 8001354:	9900      	ldr	r1, [sp, #0]
 8001356:	4605      	mov	r5, r0
 8001358:	4630      	mov	r0, r6
 800135a:	f000 f895 	bl	8001488 <_malloc_r>
 800135e:	b948      	cbnz	r0, 8001374 <__smakebuf_r+0x44>
 8001360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001364:	059a      	lsls	r2, r3, #22
 8001366:	d4ef      	bmi.n	8001348 <__smakebuf_r+0x18>
 8001368:	f023 0303 	bic.w	r3, r3, #3
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	81a3      	strh	r3, [r4, #12]
 8001372:	e7e3      	b.n	800133c <__smakebuf_r+0xc>
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <__smakebuf_r+0x7c>)
 8001376:	62b3      	str	r3, [r6, #40]	; 0x28
 8001378:	89a3      	ldrh	r3, [r4, #12]
 800137a:	6020      	str	r0, [r4, #0]
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	81a3      	strh	r3, [r4, #12]
 8001382:	9b00      	ldr	r3, [sp, #0]
 8001384:	6163      	str	r3, [r4, #20]
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	6120      	str	r0, [r4, #16]
 800138a:	b15b      	cbz	r3, 80013a4 <__smakebuf_r+0x74>
 800138c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001390:	4630      	mov	r0, r6
 8001392:	f000 fc63 	bl	8001c5c <_isatty_r>
 8001396:	b128      	cbz	r0, 80013a4 <__smakebuf_r+0x74>
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	89a0      	ldrh	r0, [r4, #12]
 80013a6:	4305      	orrs	r5, r0
 80013a8:	81a5      	strh	r5, [r4, #12]
 80013aa:	e7cd      	b.n	8001348 <__smakebuf_r+0x18>
 80013ac:	0800113d 	.word	0x0800113d

080013b0 <_free_r>:
 80013b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d044      	beq.n	8001440 <_free_r+0x90>
 80013b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013ba:	9001      	str	r0, [sp, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f1a1 0404 	sub.w	r4, r1, #4
 80013c2:	bfb8      	it	lt
 80013c4:	18e4      	addlt	r4, r4, r3
 80013c6:	f000 fc6b 	bl	8001ca0 <__malloc_lock>
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <_free_r+0x94>)
 80013cc:	9801      	ldr	r0, [sp, #4]
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	b933      	cbnz	r3, 80013e0 <_free_r+0x30>
 80013d2:	6063      	str	r3, [r4, #4]
 80013d4:	6014      	str	r4, [r2, #0]
 80013d6:	b003      	add	sp, #12
 80013d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013dc:	f000 bc66 	b.w	8001cac <__malloc_unlock>
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	d908      	bls.n	80013f6 <_free_r+0x46>
 80013e4:	6825      	ldr	r5, [r4, #0]
 80013e6:	1961      	adds	r1, r4, r5
 80013e8:	428b      	cmp	r3, r1
 80013ea:	bf01      	itttt	eq
 80013ec:	6819      	ldreq	r1, [r3, #0]
 80013ee:	685b      	ldreq	r3, [r3, #4]
 80013f0:	1949      	addeq	r1, r1, r5
 80013f2:	6021      	streq	r1, [r4, #0]
 80013f4:	e7ed      	b.n	80013d2 <_free_r+0x22>
 80013f6:	461a      	mov	r2, r3
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	b10b      	cbz	r3, 8001400 <_free_r+0x50>
 80013fc:	42a3      	cmp	r3, r4
 80013fe:	d9fa      	bls.n	80013f6 <_free_r+0x46>
 8001400:	6811      	ldr	r1, [r2, #0]
 8001402:	1855      	adds	r5, r2, r1
 8001404:	42a5      	cmp	r5, r4
 8001406:	d10b      	bne.n	8001420 <_free_r+0x70>
 8001408:	6824      	ldr	r4, [r4, #0]
 800140a:	4421      	add	r1, r4
 800140c:	1854      	adds	r4, r2, r1
 800140e:	42a3      	cmp	r3, r4
 8001410:	6011      	str	r1, [r2, #0]
 8001412:	d1e0      	bne.n	80013d6 <_free_r+0x26>
 8001414:	681c      	ldr	r4, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	6053      	str	r3, [r2, #4]
 800141a:	4421      	add	r1, r4
 800141c:	6011      	str	r1, [r2, #0]
 800141e:	e7da      	b.n	80013d6 <_free_r+0x26>
 8001420:	d902      	bls.n	8001428 <_free_r+0x78>
 8001422:	230c      	movs	r3, #12
 8001424:	6003      	str	r3, [r0, #0]
 8001426:	e7d6      	b.n	80013d6 <_free_r+0x26>
 8001428:	6825      	ldr	r5, [r4, #0]
 800142a:	1961      	adds	r1, r4, r5
 800142c:	428b      	cmp	r3, r1
 800142e:	bf04      	itt	eq
 8001430:	6819      	ldreq	r1, [r3, #0]
 8001432:	685b      	ldreq	r3, [r3, #4]
 8001434:	6063      	str	r3, [r4, #4]
 8001436:	bf04      	itt	eq
 8001438:	1949      	addeq	r1, r1, r5
 800143a:	6021      	streq	r1, [r4, #0]
 800143c:	6054      	str	r4, [r2, #4]
 800143e:	e7ca      	b.n	80013d6 <_free_r+0x26>
 8001440:	b003      	add	sp, #12
 8001442:	bd30      	pop	{r4, r5, pc}
 8001444:	200000a4 	.word	0x200000a4

08001448 <sbrk_aligned>:
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	4e0e      	ldr	r6, [pc, #56]	; (8001484 <sbrk_aligned+0x3c>)
 800144c:	460c      	mov	r4, r1
 800144e:	6831      	ldr	r1, [r6, #0]
 8001450:	4605      	mov	r5, r0
 8001452:	b911      	cbnz	r1, 800145a <sbrk_aligned+0x12>
 8001454:	f000 fb7a 	bl	8001b4c <_sbrk_r>
 8001458:	6030      	str	r0, [r6, #0]
 800145a:	4621      	mov	r1, r4
 800145c:	4628      	mov	r0, r5
 800145e:	f000 fb75 	bl	8001b4c <_sbrk_r>
 8001462:	1c43      	adds	r3, r0, #1
 8001464:	d00a      	beq.n	800147c <sbrk_aligned+0x34>
 8001466:	1cc4      	adds	r4, r0, #3
 8001468:	f024 0403 	bic.w	r4, r4, #3
 800146c:	42a0      	cmp	r0, r4
 800146e:	d007      	beq.n	8001480 <sbrk_aligned+0x38>
 8001470:	1a21      	subs	r1, r4, r0
 8001472:	4628      	mov	r0, r5
 8001474:	f000 fb6a 	bl	8001b4c <_sbrk_r>
 8001478:	3001      	adds	r0, #1
 800147a:	d101      	bne.n	8001480 <sbrk_aligned+0x38>
 800147c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001480:	4620      	mov	r0, r4
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	200000a8 	.word	0x200000a8

08001488 <_malloc_r>:
 8001488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148c:	1ccd      	adds	r5, r1, #3
 800148e:	f025 0503 	bic.w	r5, r5, #3
 8001492:	3508      	adds	r5, #8
 8001494:	2d0c      	cmp	r5, #12
 8001496:	bf38      	it	cc
 8001498:	250c      	movcc	r5, #12
 800149a:	2d00      	cmp	r5, #0
 800149c:	4607      	mov	r7, r0
 800149e:	db01      	blt.n	80014a4 <_malloc_r+0x1c>
 80014a0:	42a9      	cmp	r1, r5
 80014a2:	d905      	bls.n	80014b0 <_malloc_r+0x28>
 80014a4:	230c      	movs	r3, #12
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	2600      	movs	r6, #0
 80014aa:	4630      	mov	r0, r6
 80014ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014b0:	4e2e      	ldr	r6, [pc, #184]	; (800156c <_malloc_r+0xe4>)
 80014b2:	f000 fbf5 	bl	8001ca0 <__malloc_lock>
 80014b6:	6833      	ldr	r3, [r6, #0]
 80014b8:	461c      	mov	r4, r3
 80014ba:	bb34      	cbnz	r4, 800150a <_malloc_r+0x82>
 80014bc:	4629      	mov	r1, r5
 80014be:	4638      	mov	r0, r7
 80014c0:	f7ff ffc2 	bl	8001448 <sbrk_aligned>
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	4604      	mov	r4, r0
 80014c8:	d14d      	bne.n	8001566 <_malloc_r+0xde>
 80014ca:	6834      	ldr	r4, [r6, #0]
 80014cc:	4626      	mov	r6, r4
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d140      	bne.n	8001554 <_malloc_r+0xcc>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	4631      	mov	r1, r6
 80014d6:	4638      	mov	r0, r7
 80014d8:	eb04 0803 	add.w	r8, r4, r3
 80014dc:	f000 fb36 	bl	8001b4c <_sbrk_r>
 80014e0:	4580      	cmp	r8, r0
 80014e2:	d13a      	bne.n	800155a <_malloc_r+0xd2>
 80014e4:	6821      	ldr	r1, [r4, #0]
 80014e6:	3503      	adds	r5, #3
 80014e8:	1a6d      	subs	r5, r5, r1
 80014ea:	f025 0503 	bic.w	r5, r5, #3
 80014ee:	3508      	adds	r5, #8
 80014f0:	2d0c      	cmp	r5, #12
 80014f2:	bf38      	it	cc
 80014f4:	250c      	movcc	r5, #12
 80014f6:	4629      	mov	r1, r5
 80014f8:	4638      	mov	r0, r7
 80014fa:	f7ff ffa5 	bl	8001448 <sbrk_aligned>
 80014fe:	3001      	adds	r0, #1
 8001500:	d02b      	beq.n	800155a <_malloc_r+0xd2>
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	442b      	add	r3, r5
 8001506:	6023      	str	r3, [r4, #0]
 8001508:	e00e      	b.n	8001528 <_malloc_r+0xa0>
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	1b52      	subs	r2, r2, r5
 800150e:	d41e      	bmi.n	800154e <_malloc_r+0xc6>
 8001510:	2a0b      	cmp	r2, #11
 8001512:	d916      	bls.n	8001542 <_malloc_r+0xba>
 8001514:	1961      	adds	r1, r4, r5
 8001516:	42a3      	cmp	r3, r4
 8001518:	6025      	str	r5, [r4, #0]
 800151a:	bf18      	it	ne
 800151c:	6059      	strne	r1, [r3, #4]
 800151e:	6863      	ldr	r3, [r4, #4]
 8001520:	bf08      	it	eq
 8001522:	6031      	streq	r1, [r6, #0]
 8001524:	5162      	str	r2, [r4, r5]
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	4638      	mov	r0, r7
 800152a:	f104 060b 	add.w	r6, r4, #11
 800152e:	f000 fbbd 	bl	8001cac <__malloc_unlock>
 8001532:	f026 0607 	bic.w	r6, r6, #7
 8001536:	1d23      	adds	r3, r4, #4
 8001538:	1af2      	subs	r2, r6, r3
 800153a:	d0b6      	beq.n	80014aa <_malloc_r+0x22>
 800153c:	1b9b      	subs	r3, r3, r6
 800153e:	50a3      	str	r3, [r4, r2]
 8001540:	e7b3      	b.n	80014aa <_malloc_r+0x22>
 8001542:	6862      	ldr	r2, [r4, #4]
 8001544:	42a3      	cmp	r3, r4
 8001546:	bf0c      	ite	eq
 8001548:	6032      	streq	r2, [r6, #0]
 800154a:	605a      	strne	r2, [r3, #4]
 800154c:	e7ec      	b.n	8001528 <_malloc_r+0xa0>
 800154e:	4623      	mov	r3, r4
 8001550:	6864      	ldr	r4, [r4, #4]
 8001552:	e7b2      	b.n	80014ba <_malloc_r+0x32>
 8001554:	4634      	mov	r4, r6
 8001556:	6876      	ldr	r6, [r6, #4]
 8001558:	e7b9      	b.n	80014ce <_malloc_r+0x46>
 800155a:	230c      	movs	r3, #12
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4638      	mov	r0, r7
 8001560:	f000 fba4 	bl	8001cac <__malloc_unlock>
 8001564:	e7a1      	b.n	80014aa <_malloc_r+0x22>
 8001566:	6025      	str	r5, [r4, #0]
 8001568:	e7de      	b.n	8001528 <_malloc_r+0xa0>
 800156a:	bf00      	nop
 800156c:	200000a4 	.word	0x200000a4

08001570 <__sfputc_r>:
 8001570:	6893      	ldr	r3, [r2, #8]
 8001572:	3b01      	subs	r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	b410      	push	{r4}
 8001578:	6093      	str	r3, [r2, #8]
 800157a:	da08      	bge.n	800158e <__sfputc_r+0x1e>
 800157c:	6994      	ldr	r4, [r2, #24]
 800157e:	42a3      	cmp	r3, r4
 8001580:	db01      	blt.n	8001586 <__sfputc_r+0x16>
 8001582:	290a      	cmp	r1, #10
 8001584:	d103      	bne.n	800158e <__sfputc_r+0x1e>
 8001586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800158a:	f7ff bc31 	b.w	8000df0 <__swbuf_r>
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	1c58      	adds	r0, r3, #1
 8001592:	6010      	str	r0, [r2, #0]
 8001594:	7019      	strb	r1, [r3, #0]
 8001596:	4608      	mov	r0, r1
 8001598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800159c:	4770      	bx	lr

0800159e <__sfputs_r>:
 800159e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a0:	4606      	mov	r6, r0
 80015a2:	460f      	mov	r7, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	18d5      	adds	r5, r2, r3
 80015a8:	42ac      	cmp	r4, r5
 80015aa:	d101      	bne.n	80015b0 <__sfputs_r+0x12>
 80015ac:	2000      	movs	r0, #0
 80015ae:	e007      	b.n	80015c0 <__sfputs_r+0x22>
 80015b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015b4:	463a      	mov	r2, r7
 80015b6:	4630      	mov	r0, r6
 80015b8:	f7ff ffda 	bl	8001570 <__sfputc_r>
 80015bc:	1c43      	adds	r3, r0, #1
 80015be:	d1f3      	bne.n	80015a8 <__sfputs_r+0xa>
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080015c4 <_vfiprintf_r>:
 80015c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c8:	460d      	mov	r5, r1
 80015ca:	b09d      	sub	sp, #116	; 0x74
 80015cc:	4614      	mov	r4, r2
 80015ce:	4698      	mov	r8, r3
 80015d0:	4606      	mov	r6, r0
 80015d2:	b118      	cbz	r0, 80015dc <_vfiprintf_r+0x18>
 80015d4:	6983      	ldr	r3, [r0, #24]
 80015d6:	b90b      	cbnz	r3, 80015dc <_vfiprintf_r+0x18>
 80015d8:	f7ff fde4 	bl	80011a4 <__sinit>
 80015dc:	4b89      	ldr	r3, [pc, #548]	; (8001804 <_vfiprintf_r+0x240>)
 80015de:	429d      	cmp	r5, r3
 80015e0:	d11b      	bne.n	800161a <_vfiprintf_r+0x56>
 80015e2:	6875      	ldr	r5, [r6, #4]
 80015e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015e6:	07d9      	lsls	r1, r3, #31
 80015e8:	d405      	bmi.n	80015f6 <_vfiprintf_r+0x32>
 80015ea:	89ab      	ldrh	r3, [r5, #12]
 80015ec:	059a      	lsls	r2, r3, #22
 80015ee:	d402      	bmi.n	80015f6 <_vfiprintf_r+0x32>
 80015f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015f2:	f7ff fe75 	bl	80012e0 <__retarget_lock_acquire_recursive>
 80015f6:	89ab      	ldrh	r3, [r5, #12]
 80015f8:	071b      	lsls	r3, r3, #28
 80015fa:	d501      	bpl.n	8001600 <_vfiprintf_r+0x3c>
 80015fc:	692b      	ldr	r3, [r5, #16]
 80015fe:	b9eb      	cbnz	r3, 800163c <_vfiprintf_r+0x78>
 8001600:	4629      	mov	r1, r5
 8001602:	4630      	mov	r0, r6
 8001604:	f7ff fc46 	bl	8000e94 <__swsetup_r>
 8001608:	b1c0      	cbz	r0, 800163c <_vfiprintf_r+0x78>
 800160a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800160c:	07dc      	lsls	r4, r3, #31
 800160e:	d50e      	bpl.n	800162e <_vfiprintf_r+0x6a>
 8001610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001614:	b01d      	add	sp, #116	; 0x74
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161a:	4b7b      	ldr	r3, [pc, #492]	; (8001808 <_vfiprintf_r+0x244>)
 800161c:	429d      	cmp	r5, r3
 800161e:	d101      	bne.n	8001624 <_vfiprintf_r+0x60>
 8001620:	68b5      	ldr	r5, [r6, #8]
 8001622:	e7df      	b.n	80015e4 <_vfiprintf_r+0x20>
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <_vfiprintf_r+0x248>)
 8001626:	429d      	cmp	r5, r3
 8001628:	bf08      	it	eq
 800162a:	68f5      	ldreq	r5, [r6, #12]
 800162c:	e7da      	b.n	80015e4 <_vfiprintf_r+0x20>
 800162e:	89ab      	ldrh	r3, [r5, #12]
 8001630:	0598      	lsls	r0, r3, #22
 8001632:	d4ed      	bmi.n	8001610 <_vfiprintf_r+0x4c>
 8001634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001636:	f7ff fe54 	bl	80012e2 <__retarget_lock_release_recursive>
 800163a:	e7e9      	b.n	8001610 <_vfiprintf_r+0x4c>
 800163c:	2300      	movs	r3, #0
 800163e:	9309      	str	r3, [sp, #36]	; 0x24
 8001640:	2320      	movs	r3, #32
 8001642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001646:	f8cd 800c 	str.w	r8, [sp, #12]
 800164a:	2330      	movs	r3, #48	; 0x30
 800164c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001810 <_vfiprintf_r+0x24c>
 8001650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001654:	f04f 0901 	mov.w	r9, #1
 8001658:	4623      	mov	r3, r4
 800165a:	469a      	mov	sl, r3
 800165c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001660:	b10a      	cbz	r2, 8001666 <_vfiprintf_r+0xa2>
 8001662:	2a25      	cmp	r2, #37	; 0x25
 8001664:	d1f9      	bne.n	800165a <_vfiprintf_r+0x96>
 8001666:	ebba 0b04 	subs.w	fp, sl, r4
 800166a:	d00b      	beq.n	8001684 <_vfiprintf_r+0xc0>
 800166c:	465b      	mov	r3, fp
 800166e:	4622      	mov	r2, r4
 8001670:	4629      	mov	r1, r5
 8001672:	4630      	mov	r0, r6
 8001674:	f7ff ff93 	bl	800159e <__sfputs_r>
 8001678:	3001      	adds	r0, #1
 800167a:	f000 80aa 	beq.w	80017d2 <_vfiprintf_r+0x20e>
 800167e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001680:	445a      	add	r2, fp
 8001682:	9209      	str	r2, [sp, #36]	; 0x24
 8001684:	f89a 3000 	ldrb.w	r3, [sl]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a2 	beq.w	80017d2 <_vfiprintf_r+0x20e>
 800168e:	2300      	movs	r3, #0
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001698:	f10a 0a01 	add.w	sl, sl, #1
 800169c:	9304      	str	r3, [sp, #16]
 800169e:	9307      	str	r3, [sp, #28]
 80016a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016a4:	931a      	str	r3, [sp, #104]	; 0x68
 80016a6:	4654      	mov	r4, sl
 80016a8:	2205      	movs	r2, #5
 80016aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ae:	4858      	ldr	r0, [pc, #352]	; (8001810 <_vfiprintf_r+0x24c>)
 80016b0:	f7fe fdae 	bl	8000210 <memchr>
 80016b4:	9a04      	ldr	r2, [sp, #16]
 80016b6:	b9d8      	cbnz	r0, 80016f0 <_vfiprintf_r+0x12c>
 80016b8:	06d1      	lsls	r1, r2, #27
 80016ba:	bf44      	itt	mi
 80016bc:	2320      	movmi	r3, #32
 80016be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016c2:	0713      	lsls	r3, r2, #28
 80016c4:	bf44      	itt	mi
 80016c6:	232b      	movmi	r3, #43	; 0x2b
 80016c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016cc:	f89a 3000 	ldrb.w	r3, [sl]
 80016d0:	2b2a      	cmp	r3, #42	; 0x2a
 80016d2:	d015      	beq.n	8001700 <_vfiprintf_r+0x13c>
 80016d4:	9a07      	ldr	r2, [sp, #28]
 80016d6:	4654      	mov	r4, sl
 80016d8:	2000      	movs	r0, #0
 80016da:	f04f 0c0a 	mov.w	ip, #10
 80016de:	4621      	mov	r1, r4
 80016e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016e4:	3b30      	subs	r3, #48	; 0x30
 80016e6:	2b09      	cmp	r3, #9
 80016e8:	d94e      	bls.n	8001788 <_vfiprintf_r+0x1c4>
 80016ea:	b1b0      	cbz	r0, 800171a <_vfiprintf_r+0x156>
 80016ec:	9207      	str	r2, [sp, #28]
 80016ee:	e014      	b.n	800171a <_vfiprintf_r+0x156>
 80016f0:	eba0 0308 	sub.w	r3, r0, r8
 80016f4:	fa09 f303 	lsl.w	r3, r9, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	9304      	str	r3, [sp, #16]
 80016fc:	46a2      	mov	sl, r4
 80016fe:	e7d2      	b.n	80016a6 <_vfiprintf_r+0xe2>
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	1d19      	adds	r1, r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	9103      	str	r1, [sp, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	bfbb      	ittet	lt
 800170c:	425b      	neglt	r3, r3
 800170e:	f042 0202 	orrlt.w	r2, r2, #2
 8001712:	9307      	strge	r3, [sp, #28]
 8001714:	9307      	strlt	r3, [sp, #28]
 8001716:	bfb8      	it	lt
 8001718:	9204      	strlt	r2, [sp, #16]
 800171a:	7823      	ldrb	r3, [r4, #0]
 800171c:	2b2e      	cmp	r3, #46	; 0x2e
 800171e:	d10c      	bne.n	800173a <_vfiprintf_r+0x176>
 8001720:	7863      	ldrb	r3, [r4, #1]
 8001722:	2b2a      	cmp	r3, #42	; 0x2a
 8001724:	d135      	bne.n	8001792 <_vfiprintf_r+0x1ce>
 8001726:	9b03      	ldr	r3, [sp, #12]
 8001728:	1d1a      	adds	r2, r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	9203      	str	r2, [sp, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bfb8      	it	lt
 8001732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001736:	3402      	adds	r4, #2
 8001738:	9305      	str	r3, [sp, #20]
 800173a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001820 <_vfiprintf_r+0x25c>
 800173e:	7821      	ldrb	r1, [r4, #0]
 8001740:	2203      	movs	r2, #3
 8001742:	4650      	mov	r0, sl
 8001744:	f7fe fd64 	bl	8000210 <memchr>
 8001748:	b140      	cbz	r0, 800175c <_vfiprintf_r+0x198>
 800174a:	2340      	movs	r3, #64	; 0x40
 800174c:	eba0 000a 	sub.w	r0, r0, sl
 8001750:	fa03 f000 	lsl.w	r0, r3, r0
 8001754:	9b04      	ldr	r3, [sp, #16]
 8001756:	4303      	orrs	r3, r0
 8001758:	3401      	adds	r4, #1
 800175a:	9304      	str	r3, [sp, #16]
 800175c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001760:	482c      	ldr	r0, [pc, #176]	; (8001814 <_vfiprintf_r+0x250>)
 8001762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001766:	2206      	movs	r2, #6
 8001768:	f7fe fd52 	bl	8000210 <memchr>
 800176c:	2800      	cmp	r0, #0
 800176e:	d03f      	beq.n	80017f0 <_vfiprintf_r+0x22c>
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <_vfiprintf_r+0x254>)
 8001772:	bb1b      	cbnz	r3, 80017bc <_vfiprintf_r+0x1f8>
 8001774:	9b03      	ldr	r3, [sp, #12]
 8001776:	3307      	adds	r3, #7
 8001778:	f023 0307 	bic.w	r3, r3, #7
 800177c:	3308      	adds	r3, #8
 800177e:	9303      	str	r3, [sp, #12]
 8001780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001782:	443b      	add	r3, r7
 8001784:	9309      	str	r3, [sp, #36]	; 0x24
 8001786:	e767      	b.n	8001658 <_vfiprintf_r+0x94>
 8001788:	fb0c 3202 	mla	r2, ip, r2, r3
 800178c:	460c      	mov	r4, r1
 800178e:	2001      	movs	r0, #1
 8001790:	e7a5      	b.n	80016de <_vfiprintf_r+0x11a>
 8001792:	2300      	movs	r3, #0
 8001794:	3401      	adds	r4, #1
 8001796:	9305      	str	r3, [sp, #20]
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 0c0a 	mov.w	ip, #10
 800179e:	4620      	mov	r0, r4
 80017a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017a4:	3a30      	subs	r2, #48	; 0x30
 80017a6:	2a09      	cmp	r2, #9
 80017a8:	d903      	bls.n	80017b2 <_vfiprintf_r+0x1ee>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0c5      	beq.n	800173a <_vfiprintf_r+0x176>
 80017ae:	9105      	str	r1, [sp, #20]
 80017b0:	e7c3      	b.n	800173a <_vfiprintf_r+0x176>
 80017b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80017b6:	4604      	mov	r4, r0
 80017b8:	2301      	movs	r3, #1
 80017ba:	e7f0      	b.n	800179e <_vfiprintf_r+0x1da>
 80017bc:	ab03      	add	r3, sp, #12
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	462a      	mov	r2, r5
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <_vfiprintf_r+0x258>)
 80017c4:	a904      	add	r1, sp, #16
 80017c6:	4630      	mov	r0, r6
 80017c8:	f3af 8000 	nop.w
 80017cc:	4607      	mov	r7, r0
 80017ce:	1c78      	adds	r0, r7, #1
 80017d0:	d1d6      	bne.n	8001780 <_vfiprintf_r+0x1bc>
 80017d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017d4:	07d9      	lsls	r1, r3, #31
 80017d6:	d405      	bmi.n	80017e4 <_vfiprintf_r+0x220>
 80017d8:	89ab      	ldrh	r3, [r5, #12]
 80017da:	059a      	lsls	r2, r3, #22
 80017dc:	d402      	bmi.n	80017e4 <_vfiprintf_r+0x220>
 80017de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017e0:	f7ff fd7f 	bl	80012e2 <__retarget_lock_release_recursive>
 80017e4:	89ab      	ldrh	r3, [r5, #12]
 80017e6:	065b      	lsls	r3, r3, #25
 80017e8:	f53f af12 	bmi.w	8001610 <_vfiprintf_r+0x4c>
 80017ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80017ee:	e711      	b.n	8001614 <_vfiprintf_r+0x50>
 80017f0:	ab03      	add	r3, sp, #12
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	462a      	mov	r2, r5
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <_vfiprintf_r+0x258>)
 80017f8:	a904      	add	r1, sp, #16
 80017fa:	4630      	mov	r0, r6
 80017fc:	f000 f880 	bl	8001900 <_printf_i>
 8001800:	e7e4      	b.n	80017cc <_vfiprintf_r+0x208>
 8001802:	bf00      	nop
 8001804:	08001d54 	.word	0x08001d54
 8001808:	08001d74 	.word	0x08001d74
 800180c:	08001d34 	.word	0x08001d34
 8001810:	08001d94 	.word	0x08001d94
 8001814:	08001d9e 	.word	0x08001d9e
 8001818:	00000000 	.word	0x00000000
 800181c:	0800159f 	.word	0x0800159f
 8001820:	08001d9a 	.word	0x08001d9a

08001824 <_printf_common>:
 8001824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001828:	4616      	mov	r6, r2
 800182a:	4699      	mov	r9, r3
 800182c:	688a      	ldr	r2, [r1, #8]
 800182e:	690b      	ldr	r3, [r1, #16]
 8001830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001834:	4293      	cmp	r3, r2
 8001836:	bfb8      	it	lt
 8001838:	4613      	movlt	r3, r2
 800183a:	6033      	str	r3, [r6, #0]
 800183c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001840:	4607      	mov	r7, r0
 8001842:	460c      	mov	r4, r1
 8001844:	b10a      	cbz	r2, 800184a <_printf_common+0x26>
 8001846:	3301      	adds	r3, #1
 8001848:	6033      	str	r3, [r6, #0]
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	0699      	lsls	r1, r3, #26
 800184e:	bf42      	ittt	mi
 8001850:	6833      	ldrmi	r3, [r6, #0]
 8001852:	3302      	addmi	r3, #2
 8001854:	6033      	strmi	r3, [r6, #0]
 8001856:	6825      	ldr	r5, [r4, #0]
 8001858:	f015 0506 	ands.w	r5, r5, #6
 800185c:	d106      	bne.n	800186c <_printf_common+0x48>
 800185e:	f104 0a19 	add.w	sl, r4, #25
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	6832      	ldr	r2, [r6, #0]
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	42ab      	cmp	r3, r5
 800186a:	dc26      	bgt.n	80018ba <_printf_common+0x96>
 800186c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001870:	1e13      	subs	r3, r2, #0
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	bf18      	it	ne
 8001876:	2301      	movne	r3, #1
 8001878:	0692      	lsls	r2, r2, #26
 800187a:	d42b      	bmi.n	80018d4 <_printf_common+0xb0>
 800187c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001880:	4649      	mov	r1, r9
 8001882:	4638      	mov	r0, r7
 8001884:	47c0      	blx	r8
 8001886:	3001      	adds	r0, #1
 8001888:	d01e      	beq.n	80018c8 <_printf_common+0xa4>
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	68e5      	ldr	r5, [r4, #12]
 800188e:	6832      	ldr	r2, [r6, #0]
 8001890:	f003 0306 	and.w	r3, r3, #6
 8001894:	2b04      	cmp	r3, #4
 8001896:	bf08      	it	eq
 8001898:	1aad      	subeq	r5, r5, r2
 800189a:	68a3      	ldr	r3, [r4, #8]
 800189c:	6922      	ldr	r2, [r4, #16]
 800189e:	bf0c      	ite	eq
 80018a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018a4:	2500      	movne	r5, #0
 80018a6:	4293      	cmp	r3, r2
 80018a8:	bfc4      	itt	gt
 80018aa:	1a9b      	subgt	r3, r3, r2
 80018ac:	18ed      	addgt	r5, r5, r3
 80018ae:	2600      	movs	r6, #0
 80018b0:	341a      	adds	r4, #26
 80018b2:	42b5      	cmp	r5, r6
 80018b4:	d11a      	bne.n	80018ec <_printf_common+0xc8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	e008      	b.n	80018cc <_printf_common+0xa8>
 80018ba:	2301      	movs	r3, #1
 80018bc:	4652      	mov	r2, sl
 80018be:	4649      	mov	r1, r9
 80018c0:	4638      	mov	r0, r7
 80018c2:	47c0      	blx	r8
 80018c4:	3001      	adds	r0, #1
 80018c6:	d103      	bne.n	80018d0 <_printf_common+0xac>
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d0:	3501      	adds	r5, #1
 80018d2:	e7c6      	b.n	8001862 <_printf_common+0x3e>
 80018d4:	18e1      	adds	r1, r4, r3
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	2030      	movs	r0, #48	; 0x30
 80018da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80018de:	4422      	add	r2, r4
 80018e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80018e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80018e8:	3302      	adds	r3, #2
 80018ea:	e7c7      	b.n	800187c <_printf_common+0x58>
 80018ec:	2301      	movs	r3, #1
 80018ee:	4622      	mov	r2, r4
 80018f0:	4649      	mov	r1, r9
 80018f2:	4638      	mov	r0, r7
 80018f4:	47c0      	blx	r8
 80018f6:	3001      	adds	r0, #1
 80018f8:	d0e6      	beq.n	80018c8 <_printf_common+0xa4>
 80018fa:	3601      	adds	r6, #1
 80018fc:	e7d9      	b.n	80018b2 <_printf_common+0x8e>
	...

08001900 <_printf_i>:
 8001900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001904:	7e0f      	ldrb	r7, [r1, #24]
 8001906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001908:	2f78      	cmp	r7, #120	; 0x78
 800190a:	4691      	mov	r9, r2
 800190c:	4680      	mov	r8, r0
 800190e:	460c      	mov	r4, r1
 8001910:	469a      	mov	sl, r3
 8001912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001916:	d807      	bhi.n	8001928 <_printf_i+0x28>
 8001918:	2f62      	cmp	r7, #98	; 0x62
 800191a:	d80a      	bhi.n	8001932 <_printf_i+0x32>
 800191c:	2f00      	cmp	r7, #0
 800191e:	f000 80d8 	beq.w	8001ad2 <_printf_i+0x1d2>
 8001922:	2f58      	cmp	r7, #88	; 0x58
 8001924:	f000 80a3 	beq.w	8001a6e <_printf_i+0x16e>
 8001928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800192c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001930:	e03a      	b.n	80019a8 <_printf_i+0xa8>
 8001932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001936:	2b15      	cmp	r3, #21
 8001938:	d8f6      	bhi.n	8001928 <_printf_i+0x28>
 800193a:	a101      	add	r1, pc, #4	; (adr r1, 8001940 <_printf_i+0x40>)
 800193c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001940:	08001999 	.word	0x08001999
 8001944:	080019ad 	.word	0x080019ad
 8001948:	08001929 	.word	0x08001929
 800194c:	08001929 	.word	0x08001929
 8001950:	08001929 	.word	0x08001929
 8001954:	08001929 	.word	0x08001929
 8001958:	080019ad 	.word	0x080019ad
 800195c:	08001929 	.word	0x08001929
 8001960:	08001929 	.word	0x08001929
 8001964:	08001929 	.word	0x08001929
 8001968:	08001929 	.word	0x08001929
 800196c:	08001ab9 	.word	0x08001ab9
 8001970:	080019dd 	.word	0x080019dd
 8001974:	08001a9b 	.word	0x08001a9b
 8001978:	08001929 	.word	0x08001929
 800197c:	08001929 	.word	0x08001929
 8001980:	08001adb 	.word	0x08001adb
 8001984:	08001929 	.word	0x08001929
 8001988:	080019dd 	.word	0x080019dd
 800198c:	08001929 	.word	0x08001929
 8001990:	08001929 	.word	0x08001929
 8001994:	08001aa3 	.word	0x08001aa3
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	602a      	str	r2, [r5, #0]
 80019a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0a3      	b.n	8001af4 <_printf_i+0x1f4>
 80019ac:	6820      	ldr	r0, [r4, #0]
 80019ae:	6829      	ldr	r1, [r5, #0]
 80019b0:	0606      	lsls	r6, r0, #24
 80019b2:	f101 0304 	add.w	r3, r1, #4
 80019b6:	d50a      	bpl.n	80019ce <_printf_i+0xce>
 80019b8:	680e      	ldr	r6, [r1, #0]
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	2e00      	cmp	r6, #0
 80019be:	da03      	bge.n	80019c8 <_printf_i+0xc8>
 80019c0:	232d      	movs	r3, #45	; 0x2d
 80019c2:	4276      	negs	r6, r6
 80019c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019c8:	485e      	ldr	r0, [pc, #376]	; (8001b44 <_printf_i+0x244>)
 80019ca:	230a      	movs	r3, #10
 80019cc:	e019      	b.n	8001a02 <_printf_i+0x102>
 80019ce:	680e      	ldr	r6, [r1, #0]
 80019d0:	602b      	str	r3, [r5, #0]
 80019d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80019d6:	bf18      	it	ne
 80019d8:	b236      	sxthne	r6, r6
 80019da:	e7ef      	b.n	80019bc <_printf_i+0xbc>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	6820      	ldr	r0, [r4, #0]
 80019e0:	1d19      	adds	r1, r3, #4
 80019e2:	6029      	str	r1, [r5, #0]
 80019e4:	0601      	lsls	r1, r0, #24
 80019e6:	d501      	bpl.n	80019ec <_printf_i+0xec>
 80019e8:	681e      	ldr	r6, [r3, #0]
 80019ea:	e002      	b.n	80019f2 <_printf_i+0xf2>
 80019ec:	0646      	lsls	r6, r0, #25
 80019ee:	d5fb      	bpl.n	80019e8 <_printf_i+0xe8>
 80019f0:	881e      	ldrh	r6, [r3, #0]
 80019f2:	4854      	ldr	r0, [pc, #336]	; (8001b44 <_printf_i+0x244>)
 80019f4:	2f6f      	cmp	r7, #111	; 0x6f
 80019f6:	bf0c      	ite	eq
 80019f8:	2308      	moveq	r3, #8
 80019fa:	230a      	movne	r3, #10
 80019fc:	2100      	movs	r1, #0
 80019fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a02:	6865      	ldr	r5, [r4, #4]
 8001a04:	60a5      	str	r5, [r4, #8]
 8001a06:	2d00      	cmp	r5, #0
 8001a08:	bfa2      	ittt	ge
 8001a0a:	6821      	ldrge	r1, [r4, #0]
 8001a0c:	f021 0104 	bicge.w	r1, r1, #4
 8001a10:	6021      	strge	r1, [r4, #0]
 8001a12:	b90e      	cbnz	r6, 8001a18 <_printf_i+0x118>
 8001a14:	2d00      	cmp	r5, #0
 8001a16:	d04d      	beq.n	8001ab4 <_printf_i+0x1b4>
 8001a18:	4615      	mov	r5, r2
 8001a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8001a22:	5dc7      	ldrb	r7, [r0, r7]
 8001a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a28:	4637      	mov	r7, r6
 8001a2a:	42bb      	cmp	r3, r7
 8001a2c:	460e      	mov	r6, r1
 8001a2e:	d9f4      	bls.n	8001a1a <_printf_i+0x11a>
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d10b      	bne.n	8001a4c <_printf_i+0x14c>
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	07de      	lsls	r6, r3, #31
 8001a38:	d508      	bpl.n	8001a4c <_printf_i+0x14c>
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	6861      	ldr	r1, [r4, #4]
 8001a3e:	4299      	cmp	r1, r3
 8001a40:	bfde      	ittt	le
 8001a42:	2330      	movle	r3, #48	; 0x30
 8001a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001a4c:	1b52      	subs	r2, r2, r5
 8001a4e:	6122      	str	r2, [r4, #16]
 8001a50:	f8cd a000 	str.w	sl, [sp]
 8001a54:	464b      	mov	r3, r9
 8001a56:	aa03      	add	r2, sp, #12
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4640      	mov	r0, r8
 8001a5c:	f7ff fee2 	bl	8001824 <_printf_common>
 8001a60:	3001      	adds	r0, #1
 8001a62:	d14c      	bne.n	8001afe <_printf_i+0x1fe>
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a68:	b004      	add	sp, #16
 8001a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a6e:	4835      	ldr	r0, [pc, #212]	; (8001b44 <_printf_i+0x244>)
 8001a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001a74:	6829      	ldr	r1, [r5, #0]
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a7c:	6029      	str	r1, [r5, #0]
 8001a7e:	061d      	lsls	r5, r3, #24
 8001a80:	d514      	bpl.n	8001aac <_printf_i+0x1ac>
 8001a82:	07df      	lsls	r7, r3, #31
 8001a84:	bf44      	itt	mi
 8001a86:	f043 0320 	orrmi.w	r3, r3, #32
 8001a8a:	6023      	strmi	r3, [r4, #0]
 8001a8c:	b91e      	cbnz	r6, 8001a96 <_printf_i+0x196>
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	f023 0320 	bic.w	r3, r3, #32
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	2310      	movs	r3, #16
 8001a98:	e7b0      	b.n	80019fc <_printf_i+0xfc>
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	6023      	str	r3, [r4, #0]
 8001aa2:	2378      	movs	r3, #120	; 0x78
 8001aa4:	4828      	ldr	r0, [pc, #160]	; (8001b48 <_printf_i+0x248>)
 8001aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001aaa:	e7e3      	b.n	8001a74 <_printf_i+0x174>
 8001aac:	0659      	lsls	r1, r3, #25
 8001aae:	bf48      	it	mi
 8001ab0:	b2b6      	uxthmi	r6, r6
 8001ab2:	e7e6      	b.n	8001a82 <_printf_i+0x182>
 8001ab4:	4615      	mov	r5, r2
 8001ab6:	e7bb      	b.n	8001a30 <_printf_i+0x130>
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	6826      	ldr	r6, [r4, #0]
 8001abc:	6961      	ldr	r1, [r4, #20]
 8001abe:	1d18      	adds	r0, r3, #4
 8001ac0:	6028      	str	r0, [r5, #0]
 8001ac2:	0635      	lsls	r5, r6, #24
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	d501      	bpl.n	8001acc <_printf_i+0x1cc>
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	e002      	b.n	8001ad2 <_printf_i+0x1d2>
 8001acc:	0670      	lsls	r0, r6, #25
 8001ace:	d5fb      	bpl.n	8001ac8 <_printf_i+0x1c8>
 8001ad0:	8019      	strh	r1, [r3, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	6123      	str	r3, [r4, #16]
 8001ad6:	4615      	mov	r5, r2
 8001ad8:	e7ba      	b.n	8001a50 <_printf_i+0x150>
 8001ada:	682b      	ldr	r3, [r5, #0]
 8001adc:	1d1a      	adds	r2, r3, #4
 8001ade:	602a      	str	r2, [r5, #0]
 8001ae0:	681d      	ldr	r5, [r3, #0]
 8001ae2:	6862      	ldr	r2, [r4, #4]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f7fe fb92 	bl	8000210 <memchr>
 8001aec:	b108      	cbz	r0, 8001af2 <_printf_i+0x1f2>
 8001aee:	1b40      	subs	r0, r0, r5
 8001af0:	6060      	str	r0, [r4, #4]
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	6123      	str	r3, [r4, #16]
 8001af6:	2300      	movs	r3, #0
 8001af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001afc:	e7a8      	b.n	8001a50 <_printf_i+0x150>
 8001afe:	6923      	ldr	r3, [r4, #16]
 8001b00:	462a      	mov	r2, r5
 8001b02:	4649      	mov	r1, r9
 8001b04:	4640      	mov	r0, r8
 8001b06:	47d0      	blx	sl
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d0ab      	beq.n	8001a64 <_printf_i+0x164>
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	079b      	lsls	r3, r3, #30
 8001b10:	d413      	bmi.n	8001b3a <_printf_i+0x23a>
 8001b12:	68e0      	ldr	r0, [r4, #12]
 8001b14:	9b03      	ldr	r3, [sp, #12]
 8001b16:	4298      	cmp	r0, r3
 8001b18:	bfb8      	it	lt
 8001b1a:	4618      	movlt	r0, r3
 8001b1c:	e7a4      	b.n	8001a68 <_printf_i+0x168>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4632      	mov	r2, r6
 8001b22:	4649      	mov	r1, r9
 8001b24:	4640      	mov	r0, r8
 8001b26:	47d0      	blx	sl
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d09b      	beq.n	8001a64 <_printf_i+0x164>
 8001b2c:	3501      	adds	r5, #1
 8001b2e:	68e3      	ldr	r3, [r4, #12]
 8001b30:	9903      	ldr	r1, [sp, #12]
 8001b32:	1a5b      	subs	r3, r3, r1
 8001b34:	42ab      	cmp	r3, r5
 8001b36:	dcf2      	bgt.n	8001b1e <_printf_i+0x21e>
 8001b38:	e7eb      	b.n	8001b12 <_printf_i+0x212>
 8001b3a:	2500      	movs	r5, #0
 8001b3c:	f104 0619 	add.w	r6, r4, #25
 8001b40:	e7f5      	b.n	8001b2e <_printf_i+0x22e>
 8001b42:	bf00      	nop
 8001b44:	08001da5 	.word	0x08001da5
 8001b48:	08001db6 	.word	0x08001db6

08001b4c <_sbrk_r>:
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4d06      	ldr	r5, [pc, #24]	; (8001b68 <_sbrk_r+0x1c>)
 8001b50:	2300      	movs	r3, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	602b      	str	r3, [r5, #0]
 8001b58:	f7fe ff12 	bl	8000980 <_sbrk>
 8001b5c:	1c43      	adds	r3, r0, #1
 8001b5e:	d102      	bne.n	8001b66 <_sbrk_r+0x1a>
 8001b60:	682b      	ldr	r3, [r5, #0]
 8001b62:	b103      	cbz	r3, 8001b66 <_sbrk_r+0x1a>
 8001b64:	6023      	str	r3, [r4, #0]
 8001b66:	bd38      	pop	{r3, r4, r5, pc}
 8001b68:	200000ac 	.word	0x200000ac

08001b6c <__sread>:
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	460c      	mov	r4, r1
 8001b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b74:	f000 f8a0 	bl	8001cb8 <_read_r>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	bfab      	itete	ge
 8001b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b80:	181b      	addge	r3, r3, r0
 8001b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b86:	bfac      	ite	ge
 8001b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b8a:	81a3      	strhlt	r3, [r4, #12]
 8001b8c:	bd10      	pop	{r4, pc}

08001b8e <__swrite>:
 8001b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b92:	461f      	mov	r7, r3
 8001b94:	898b      	ldrh	r3, [r1, #12]
 8001b96:	05db      	lsls	r3, r3, #23
 8001b98:	4605      	mov	r5, r0
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	4616      	mov	r6, r2
 8001b9e:	d505      	bpl.n	8001bac <__swrite+0x1e>
 8001ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f000 f868 	bl	8001c7c <_lseek_r>
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bb6:	81a3      	strh	r3, [r4, #12]
 8001bb8:	4632      	mov	r2, r6
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc2:	f000 b817 	b.w	8001bf4 <_write_r>

08001bc6 <__sseek>:
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	460c      	mov	r4, r1
 8001bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bce:	f000 f855 	bl	8001c7c <_lseek_r>
 8001bd2:	1c43      	adds	r3, r0, #1
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	bf15      	itete	ne
 8001bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001be2:	81a3      	strheq	r3, [r4, #12]
 8001be4:	bf18      	it	ne
 8001be6:	81a3      	strhne	r3, [r4, #12]
 8001be8:	bd10      	pop	{r4, pc}

08001bea <__sclose>:
 8001bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bee:	f000 b813 	b.w	8001c18 <_close_r>
	...

08001bf4 <_write_r>:
 8001bf4:	b538      	push	{r3, r4, r5, lr}
 8001bf6:	4d07      	ldr	r5, [pc, #28]	; (8001c14 <_write_r+0x20>)
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	4608      	mov	r0, r1
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	602a      	str	r2, [r5, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	f7fe fe6b 	bl	80008de <_write>
 8001c08:	1c43      	adds	r3, r0, #1
 8001c0a:	d102      	bne.n	8001c12 <_write_r+0x1e>
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	b103      	cbz	r3, 8001c12 <_write_r+0x1e>
 8001c10:	6023      	str	r3, [r4, #0]
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
 8001c14:	200000ac 	.word	0x200000ac

08001c18 <_close_r>:
 8001c18:	b538      	push	{r3, r4, r5, lr}
 8001c1a:	4d06      	ldr	r5, [pc, #24]	; (8001c34 <_close_r+0x1c>)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4604      	mov	r4, r0
 8001c20:	4608      	mov	r0, r1
 8001c22:	602b      	str	r3, [r5, #0]
 8001c24:	f7fe fe77 	bl	8000916 <_close>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_close_r+0x1a>
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_close_r+0x1a>
 8001c30:	6023      	str	r3, [r4, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	200000ac 	.word	0x200000ac

08001c38 <_fstat_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4d07      	ldr	r5, [pc, #28]	; (8001c58 <_fstat_r+0x20>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	602b      	str	r3, [r5, #0]
 8001c46:	f7fe fe72 	bl	800092e <_fstat>
 8001c4a:	1c43      	adds	r3, r0, #1
 8001c4c:	d102      	bne.n	8001c54 <_fstat_r+0x1c>
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	b103      	cbz	r3, 8001c54 <_fstat_r+0x1c>
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	bd38      	pop	{r3, r4, r5, pc}
 8001c56:	bf00      	nop
 8001c58:	200000ac 	.word	0x200000ac

08001c5c <_isatty_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4d06      	ldr	r5, [pc, #24]	; (8001c78 <_isatty_r+0x1c>)
 8001c60:	2300      	movs	r3, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	f7fe fe71 	bl	800094e <_isatty>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d102      	bne.n	8001c76 <_isatty_r+0x1a>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b103      	cbz	r3, 8001c76 <_isatty_r+0x1a>
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	200000ac 	.word	0x200000ac

08001c7c <_lseek_r>:
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	4d07      	ldr	r5, [pc, #28]	; (8001c9c <_lseek_r+0x20>)
 8001c80:	4604      	mov	r4, r0
 8001c82:	4608      	mov	r0, r1
 8001c84:	4611      	mov	r1, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	602a      	str	r2, [r5, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f7fe fe6a 	bl	8000964 <_lseek>
 8001c90:	1c43      	adds	r3, r0, #1
 8001c92:	d102      	bne.n	8001c9a <_lseek_r+0x1e>
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	b103      	cbz	r3, 8001c9a <_lseek_r+0x1e>
 8001c98:	6023      	str	r3, [r4, #0]
 8001c9a:	bd38      	pop	{r3, r4, r5, pc}
 8001c9c:	200000ac 	.word	0x200000ac

08001ca0 <__malloc_lock>:
 8001ca0:	4801      	ldr	r0, [pc, #4]	; (8001ca8 <__malloc_lock+0x8>)
 8001ca2:	f7ff bb1d 	b.w	80012e0 <__retarget_lock_acquire_recursive>
 8001ca6:	bf00      	nop
 8001ca8:	200000a0 	.word	0x200000a0

08001cac <__malloc_unlock>:
 8001cac:	4801      	ldr	r0, [pc, #4]	; (8001cb4 <__malloc_unlock+0x8>)
 8001cae:	f7ff bb18 	b.w	80012e2 <__retarget_lock_release_recursive>
 8001cb2:	bf00      	nop
 8001cb4:	200000a0 	.word	0x200000a0

08001cb8 <_read_r>:
 8001cb8:	b538      	push	{r3, r4, r5, lr}
 8001cba:	4d07      	ldr	r5, [pc, #28]	; (8001cd8 <_read_r+0x20>)
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	4608      	mov	r0, r1
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	602a      	str	r2, [r5, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f7fe fdec 	bl	80008a4 <_read>
 8001ccc:	1c43      	adds	r3, r0, #1
 8001cce:	d102      	bne.n	8001cd6 <_read_r+0x1e>
 8001cd0:	682b      	ldr	r3, [r5, #0]
 8001cd2:	b103      	cbz	r3, 8001cd6 <_read_r+0x1e>
 8001cd4:	6023      	str	r3, [r4, #0]
 8001cd6:	bd38      	pop	{r3, r4, r5, pc}
 8001cd8:	200000ac 	.word	0x200000ac

08001cdc <_init>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr

08001ce8 <_fini>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr
