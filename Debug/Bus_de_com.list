
Bus_de_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001188  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800134c  0800134c  0001134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800144c  0800144c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800144c  0800144c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800144c  0800144c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  080014bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080014bc  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000348e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e8f  00000000  00000000  00023526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  000243b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b414  00000000  00000000  00024900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005306  00000000  00000000  0003fd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d9a  00000000  00000000  0004501a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fe0  00000000  00000000  000d5e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001334 	.word	0x08001334

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08001334 	.word	0x08001334

08000204 <SysTick_Handler>:
extern uint8_t Flag;

//----------------- SYSTICK HANDLER +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ SYSTICK HANDLER ------------------------------------------------*/
/* @brief  Go in this function when a SysTick timer IRQ are activate.
 * @retval None */
void SysTick_Handler(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	ticks++;
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <SysTick_Handler+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <SysTick_Handler+0x18>)
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	20000094 	.word	0x20000094

08000220 <TIM2_IRQHandler>:

//----------------- SYSTICK HANDLER +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ SYSTICK HANDLER ------------------------------------------------*/
/* @brief  Go in this function when a Timer 2 IRQ are activate.
 * @retval None */
void TIM2_IRQHandler(void){
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF){
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d00a      	beq.n	8000248 <TIM2_IRQHandler+0x28>
		TIM2->SR &= ~TIM_SR_UIF;
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023c:	f023 0301 	bic.w	r3, r3, #1
 8000240:	6113      	str	r3, [r2, #16]
		Flag = 1;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <TIM2_IRQHandler+0x34>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
	}
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000090 	.word	0x20000090

08000258 <main>:
/// envoyer sur teams avec oneWire_Nom.zip


#if ONE_WIRE > 0
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	uint8_t TH = 25;
	uint8_t TL = 18;
#endif

	/* Peripherals initialisation */
	GPIO_Init();
 800025c:	f000 f902 	bl	8000464 <GPIO_Init>
	USART2_Init();
 8000260:	f000 faa8 	bl	80007b4 <USART2_Init>
	SYSTICK_Init();
 8000264:	f000 fa0e 	bl	8000684 <SYSTICK_Init>
	DWT_Init();
 8000268:	f000 fa1e 	bl	80006a8 <DWT_Init>
	TIM2TICK_Init();
 800026c:	f000 fa6c 	bl	8000748 <TIM2TICK_Init>
	Ds18b20_Init(GPIOA,1);
 8000270:	2101      	movs	r1, #1
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <main+0x24>)
 8000274:	f000 f8be 	bl	80003f4 <Ds18b20_Init>
#if TEST_3
	Ds18b20_Set_Seuil_Alarm(TH,TL);
	Ds18b20_affiche_temp();
#endif

	while(1)
 8000278:	e7fe      	b.n	8000278 <main+0x20>
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	e00a      	b.n	80002a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000292:	f000 f8a7 	bl	80003e4 <__io_getchar>
 8000296:	4601      	mov	r1, r0
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	60ba      	str	r2, [r7, #8]
 800029e:	b2ca      	uxtb	r2, r1
 80002a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	3301      	adds	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	697a      	ldr	r2, [r7, #20]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	dbf0      	blt.n	8000292 <_read+0x12>
	}

return len;
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b086      	sub	sp, #24
 80002be:	af00      	add	r7, sp, #0
 80002c0:	60f8      	str	r0, [r7, #12]
 80002c2:	60b9      	str	r1, [r7, #8]
 80002c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
 80002ca:	e009      	b.n	80002e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	1c5a      	adds	r2, r3, #1
 80002d0:	60ba      	str	r2, [r7, #8]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f877 	bl	80003c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	3301      	adds	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	dbf1      	blt.n	80002cc <_write+0x12>
	}
	return len;
 80002e8:	687b      	ldr	r3, [r7, #4]
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <_close>:

int _close(int file)
{
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
	return -1;
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002fe:	4618      	mov	r0, r3
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800031a:	605a      	str	r2, [r3, #4]
	return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <_isatty>:

int _isatty(int file)
{
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
	return 1;
 8000332:	2301      	movs	r3, #1
}
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
	return 0;
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000364:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <_sbrk+0x5c>)
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <_sbrk+0x60>)
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <_sbrk+0x64>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <_sbrk+0x64>)
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <_sbrk+0x68>)
 800037c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <_sbrk+0x64>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	693a      	ldr	r2, [r7, #16]
 8000388:	429a      	cmp	r2, r3
 800038a:	d207      	bcs.n	800039c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800038c:	f000 faa2 	bl	80008d4 <__errno>
 8000390:	4603      	mov	r3, r0
 8000392:	220c      	movs	r2, #12
 8000394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800039a:	e009      	b.n	80003b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <_sbrk+0x64>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <_sbrk+0x64>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <_sbrk+0x64>)
 80003ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003ae:	68fb      	ldr	r3, [r7, #12]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20020000 	.word	0x20020000
 80003bc:	00000400 	.word	0x00000400
 80003c0:	2000008c 	.word	0x2000008c
 80003c4:	200000a8 	.word	0x200000a8

080003c8 <__io_putchar>:
#include "stm32f446xx.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fa27 	bl	8000828 <USART2_TransmitChar>
	return 0;
 80003da:	2300      	movs	r3, #0
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 80003e8:	f000 fa36 	bl	8000858 <USART2_ReceiveChar>
 80003ec:	4603      	mov	r3, r0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <Ds18b20_Init>:
extern ONEWIRE_PINOUT	PINOUT;
uint8_t Flag = 0;

//----------------- DS18B20 INIT ------------------------------------------------------------------------------- DS18B20 INIT ------------------------------------------------------*/
void Ds18b20_Init(GPIO_TypeDef * GPIOX, uint8_t pin)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
	PINOUT.port  = GPIOX;
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <Ds18b20_Init+0x28>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6013      	str	r3, [r2, #0]
	PINOUT.pin   = pin;
 8000406:	78fb      	ldrb	r3, [r7, #3]
 8000408:	b29a      	uxth	r2, r3
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <Ds18b20_Init+0x28>)
 800040c:	809a      	strh	r2, [r3, #4]
	Ds18b20_Is_Connected();
 800040e:	f000 f807 	bl	8000420 <Ds18b20_Is_Connected>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000084 	.word	0x20000084

08000420 <Ds18b20_Is_Connected>:

//----------------- DS18B20 IS CONNECTED ------------------------------------------------------------------------------- DS18B20 IS CONNECTED ------------------------------------------------------*/
uint8_t Ds18b20_Is_Connected(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 8000426:	2301      	movs	r3, #1
 8000428:	71fb      	strb	r3, [r7, #7]

    val = ONEWIRE_Reset(PINOUT);
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <Ds18b20_Is_Connected+0x38>)
 800042c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000430:	f000 f891 	bl	8000556 <ONEWIRE_Reset>
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]

    if (val == 0)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d103      	bne.n	8000446 <Ds18b20_Is_Connected+0x26>
    {
    	printf("The device are connected\r\n");
 800043e:	4807      	ldr	r0, [pc, #28]	; (800045c <Ds18b20_Is_Connected+0x3c>)
 8000440:	f000 fae8 	bl	8000a14 <puts>
 8000444:	e002      	b.n	800044c <Ds18b20_Is_Connected+0x2c>
    }
    else
    {
    	printf("No device\r\n");
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <Ds18b20_Is_Connected+0x40>)
 8000448:	f000 fae4 	bl	8000a14 <puts>
    }

    return val;
 800044c:	79fb      	ldrb	r3, [r7, #7]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000084 	.word	0x20000084
 800045c:	0800134c 	.word	0x0800134c
 8000460:	08001368 	.word	0x08001368

08000464 <GPIO_Init>:
/* @brief  Reads the FLASH at the specified address to the given buffer.
 * @param1 [in/out] gpio  Holds MCU gpio parameters
 * @param2 [in]     value Initial MCU pit value
 * @param3 [in/out] irq   Pointer to IRQ data context.
 * @retval None */
void GPIO_Init(void){
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <GPIO_Init+0x60>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <GPIO_Init+0x60>)
 800046e:	f043 0305 	orr.w	r3, r3, #5
 8000472:	6313      	str	r3, [r2, #48]	; 0x30

	/* Led Gpio Pin */
	GPIOA->MODER   |= OUTPUT_MODE <<10;						// PA5 Output LED
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <GPIO_Init+0x64>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <GPIO_Init+0x64>)
 800047a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800047e:	6013      	str	r3, [r2, #0]

	/* Board Button Gpio Pin */
	GPIOC->MODER |= INPUT_MODE	<< 26;						// PC13 Input Push-Button
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <GPIO_Init+0x68>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <GPIO_Init+0x68>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	6013      	str	r3, [r2, #0]

	/* One Wire Gpio Pin */
	RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN; /* Clock activation */
 8000488:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <GPIO_Init+0x60>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <GPIO_Init+0x60>)
 800048e:	f043 0305 	orr.w	r3, r3, #5
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER  |= OUTPUT_MODE << GPIO_MODER_MODER1_Pos;		/* PA1 alternate One wire */
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <GPIO_Init+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <GPIO_Init+0x64>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= OUTPUT_OPEN_DRAIN << GPIO_OTYPER_OT1_Pos;	/* PA1 open drain One wire */
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <GPIO_Init+0x64>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <GPIO_Init+0x64>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  |= PULL_UP << GPIO_PUPDR_PUPD1_Pos;			/* PA1 push_pull One wire */
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <GPIO_Init+0x64>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <GPIO_Init+0x64>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	60d3      	str	r3, [r2, #12]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40020800 	.word	0x40020800

080004d0 <GPIO_Set_Pin>:

//----------------- GPIO SET PIN ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ GPIO SETP IN ---------------------------------------------------*/
void GPIO_Set_Pin(GPIO_TypeDef* GPIO, uint16_t pin){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
	GPIO->ODR |= 1 << pin ;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	887a      	ldrh	r2, [r7, #2]
 80004e2:	2101      	movs	r1, #1
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	615a      	str	r2, [r3, #20]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <GPIO_Reset_Pin>:

//----------------- GPIO RESET PIN ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ GPIO RESET PIN -------------------------------------------------*/
void GPIO_Reset_Pin(GPIO_TypeDef* GPIO, uint16_t pin){
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	807b      	strh	r3, [r7, #2]
	GPIO->ODR &= ~(1 << pin) ;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	887a      	ldrh	r2, [r7, #2]
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	43d2      	mvns	r2, r2
 8000514:	401a      	ands	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	615a      	str	r2, [r3, #20]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <GPIO_Read_Pin>:
void GPIO_Toggle_Pin(GPIO_TypeDef* GPIO, uint16_t pin){
	GPIO->ODR ^= 1 << pin ;
}

//----------------- GPIO READ PIN +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ GPIO READ PIN --------------------------------------------------*/
uint16_t GPIO_Read_Pin(GPIO_TypeDef* GPIO, uint16_t pin){
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
	if((GPIO->IDR & (1 << pin)) !=0)	return 1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	887a      	ldrh	r2, [r7, #2]
 8000538:	2101      	movs	r1, #1
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4013      	ands	r3, r2
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <GPIO_Read_Pin+0x22>
 8000544:	2301      	movs	r3, #1
 8000546:	e000      	b.n	800054a <GPIO_Read_Pin+0x24>
	else 								return 0;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <ONEWIRE_Reset>:
//----------------- INCLUDE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ INCLUDE --------------------------------------------------------*/
#include "one_wire.h"

//----------------- ONEWIRE RESET --------------------------------------------------------------------------- ONEWIRE RESET --------------------------------------------------*/
uint8_t ONEWIRE_Reset(ONEWIRE_PINOUT oneWire_Pinout)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af00      	add	r7, sp, #0
 800055c:	463b      	mov	r3, r7
 800055e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t reset_status = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]

 /* Niveau de tension bas */
    GPIO_Reset_Pin(oneWire_Pinout.port, oneWire_Pinout.pin);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	88ba      	ldrh	r2, [r7, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffc4 	bl	80004fa <GPIO_Reset_Pin>
    DWT_Delay(480);
 8000572:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000576:	f000 f8b1 	bl	80006dc <DWT_Delay>

 /* Niveau de tension haut */
    GPIO_Set_Pin(oneWire_Pinout.port, oneWire_Pinout.pin);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	88ba      	ldrh	r2, [r7, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffa5 	bl	80004d0 <GPIO_Set_Pin>
    DWT_Delay(70);
 8000586:	2046      	movs	r0, #70	; 0x46
 8000588:	f000 f8a8 	bl	80006dc <DWT_Delay>

 /* Lecture du niveau */
    reset_status = GPIO_Read_Pin(oneWire_Pinout.port, oneWire_Pinout.pin);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	88ba      	ldrh	r2, [r7, #4]
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffc7 	bl	8000526 <GPIO_Read_Pin>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]
    DWT_Delay(410);
 800059c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80005a0:	f000 f89c 	bl	80006dc <DWT_Delay>

    return reset_status;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000664:	f7ff ffc2 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <SYSTICK_Init+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <SYSTICK_Init+0x20>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	099b      	lsrs	r3, r3, #6
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ffd3 	bl	8000640 <SysTick_Config>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	10624dd3 	.word	0x10624dd3

080006a8 <DWT_Init>:
//////////////////////////////////////////////
////////////// DW TIMER //////////////////////
//////////////////////////////////////////////

void DWT_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <DWT_Init+0x2c>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <DWT_Init+0x2c>)
 80006b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006b6:	60d3      	str	r3, [r2, #12]
//    DWT->LAR = 0xC5ACCE55;  // For Cortex M7
    DWT->CYCCNT = 0;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <DWT_Init+0x30>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <DWT_Init+0x30>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <DWT_Init+0x30>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000edf0 	.word	0xe000edf0
 80006d8:	e0001000 	.word	0xe0001000

080006dc <DWT_Delay>:
/**
 * Microsecond delays with DW Timer, blocking function
 * @param _us : microseconds to wait
 */
void DWT_Delay(uint32_t _us)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    uint32_t startTick  = DWT->CYCCNT;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <DWT_Delay+0x60>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	60fb      	str	r3, [r7, #12]
    uint32_t targetTick = DWT->CYCCNT + _us * (SystemCoreClock/1000000);
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <DWT_Delay+0x60>)
 80006ec:	685a      	ldr	r2, [r3, #4]
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <DWT_Delay+0x64>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4914      	ldr	r1, [pc, #80]	; (8000744 <DWT_Delay+0x68>)
 80006f4:	fba1 1303 	umull	r1, r3, r1, r3
 80006f8:	0c9b      	lsrs	r3, r3, #18
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	fb01 f303 	mul.w	r3, r1, r3
 8000700:	4413      	add	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]

    // No overflow
    if (targetTick > startTick)
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	d906      	bls.n	800071a <DWT_Delay+0x3e>
        while (DWT->CYCCNT < targetTick);
 800070c:	bf00      	nop
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <DWT_Delay+0x60>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8fa      	bhi.n	800070e <DWT_Delay+0x32>

    // With overflow
    else
        while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);

}
 8000718:	e00a      	b.n	8000730 <DWT_Delay+0x54>
        while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 800071a:	bf00      	nop
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <DWT_Delay+0x60>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	429a      	cmp	r2, r3
 8000724:	d3fa      	bcc.n	800071c <DWT_Delay+0x40>
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <DWT_Delay+0x60>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f5      	bhi.n	800071c <DWT_Delay+0x40>
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e0001000 	.word	0xe0001000
 8000740:	20000000 	.word	0x20000000
 8000744:	431bde83 	.word	0x431bde83

08000748 <TIM2TICK_Init>:


void TIM2TICK_Init(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* Clock Activation */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <TIM2TICK_Init+0x68>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <TIM2TICK_Init+0x68>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6413      	str	r3, [r2, #64]	; 0x40

	/* Interruption */
	NVIC_EnableIRQ( TIM2_IRQn );
 8000758:	201c      	movs	r0, #28
 800075a:	f7ff ff29 	bl	80005b0 <__NVIC_EnableIRQ>

	/* Configuration Periph*/
	TIM2->PSC  = 15999;		// 1Khz en sortie du prescaler (16 MHz / (PSC + 1) = 1 kHz)
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR  = 60000; 	// 1 kHz * 60,000 = 60 secondes
 8000768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;    		// Réinitialiser le compteur
 8000772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->DIER |= TIM_DIER_UIE;
 800077a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	60d3      	str	r3, [r2, #12]
	TIM2->CR1  |= TIM_CR1_CEN;
 800078a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~TIM_SR_UIF;
 800079a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	6113      	str	r3, [r2, #16]
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <USART2_Init>:
#include <stdint.h>
#include "stm32f446xx.h"
#include "gpio.h"


void USART2_Init(void){
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <USART2_Init+0x68>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <USART2_Init+0x68>)
 80007be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->CR1 |= USART_CR1_UE;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <USART2_Init+0x6c>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	4a15      	ldr	r2, [pc, #84]	; (8000820 <USART2_Init+0x6c>)
 80007ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ce:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <USART2_Init+0x70>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <USART2_Init+0x70>)
 80007d6:	f043 0320 	orr.w	r3, r3, #32
 80007da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <USART2_Init+0x70>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <USART2_Init+0x70>)
 80007e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <USART2_Init+0x70>)
 80007ea:	6a1b      	ldr	r3, [r3, #32]
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <USART2_Init+0x70>)
 80007ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80007f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <USART2_Init+0x70>)
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <USART2_Init+0x70>)
 80007fa:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80007fe:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <USART2_Init+0x6c>)
 8000802:	228b      	movs	r2, #139	; 0x8b
 8000804:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <USART2_Init+0x6c>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <USART2_Init+0x6c>)
 800080c:	f043 030c 	orr.w	r3, r3, #12
 8000810:	60d3      	str	r3, [r2, #12]
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023800 	.word	0x40023800
 8000820:	40004400 	.word	0x40004400
 8000824:	40020000 	.word	0x40020000

08000828 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <USART2_TransmitChar+0x2c>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <USART2_TransmitChar+0x2c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <USART2_TransmitChar+0x12>
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40004400 	.word	0x40004400

08000858 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 800085c:	bf00      	nop
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <USART2_ReceiveChar+0x24>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0320 	and.w	r3, r3, #32
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0f9      	beq.n	800085e <USART2_ReceiveChar+0x6>
	return USART2->DR;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <USART2_ReceiveChar+0x24>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	b2db      	uxtb	r3, r3

}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40004400 	.word	0x40004400

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	; (80008cc <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ae:	f000 f817 	bl	80008e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fcd1 	bl	8000258 <main>

080008b6 <LoopForever>:

LoopForever:
  b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008c4:	08001454 	.word	0x08001454
  ldr r2, =_sbss
 80008c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008cc:	200000a8 	.word	0x200000a8

080008d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC_IRQHandler>
	...

080008d4 <__errno>:
 80008d4:	4b01      	ldr	r3, [pc, #4]	; (80008dc <__errno+0x8>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000004 	.word	0x20000004

080008e0 <__libc_init_array>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	4d0d      	ldr	r5, [pc, #52]	; (8000918 <__libc_init_array+0x38>)
 80008e4:	4c0d      	ldr	r4, [pc, #52]	; (800091c <__libc_init_array+0x3c>)
 80008e6:	1b64      	subs	r4, r4, r5
 80008e8:	10a4      	asrs	r4, r4, #2
 80008ea:	2600      	movs	r6, #0
 80008ec:	42a6      	cmp	r6, r4
 80008ee:	d109      	bne.n	8000904 <__libc_init_array+0x24>
 80008f0:	4d0b      	ldr	r5, [pc, #44]	; (8000920 <__libc_init_array+0x40>)
 80008f2:	4c0c      	ldr	r4, [pc, #48]	; (8000924 <__libc_init_array+0x44>)
 80008f4:	f000 fd1e 	bl	8001334 <_init>
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	10a4      	asrs	r4, r4, #2
 80008fc:	2600      	movs	r6, #0
 80008fe:	42a6      	cmp	r6, r4
 8000900:	d105      	bne.n	800090e <__libc_init_array+0x2e>
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f855 3b04 	ldr.w	r3, [r5], #4
 8000908:	4798      	blx	r3
 800090a:	3601      	adds	r6, #1
 800090c:	e7ee      	b.n	80008ec <__libc_init_array+0xc>
 800090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000912:	4798      	blx	r3
 8000914:	3601      	adds	r6, #1
 8000916:	e7f2      	b.n	80008fe <__libc_init_array+0x1e>
 8000918:	0800144c 	.word	0x0800144c
 800091c:	0800144c 	.word	0x0800144c
 8000920:	0800144c 	.word	0x0800144c
 8000924:	08001450 	.word	0x08001450

08000928 <memset>:
 8000928:	4402      	add	r2, r0
 800092a:	4603      	mov	r3, r0
 800092c:	4293      	cmp	r3, r2
 800092e:	d100      	bne.n	8000932 <memset+0xa>
 8000930:	4770      	bx	lr
 8000932:	f803 1b01 	strb.w	r1, [r3], #1
 8000936:	e7f9      	b.n	800092c <memset+0x4>

08000938 <_puts_r>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	460e      	mov	r6, r1
 800093c:	4605      	mov	r5, r0
 800093e:	b118      	cbz	r0, 8000948 <_puts_r+0x10>
 8000940:	6983      	ldr	r3, [r0, #24]
 8000942:	b90b      	cbnz	r3, 8000948 <_puts_r+0x10>
 8000944:	f000 fa48 	bl	8000dd8 <__sinit>
 8000948:	69ab      	ldr	r3, [r5, #24]
 800094a:	68ac      	ldr	r4, [r5, #8]
 800094c:	b913      	cbnz	r3, 8000954 <_puts_r+0x1c>
 800094e:	4628      	mov	r0, r5
 8000950:	f000 fa42 	bl	8000dd8 <__sinit>
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <_puts_r+0xd0>)
 8000956:	429c      	cmp	r4, r3
 8000958:	d120      	bne.n	800099c <_puts_r+0x64>
 800095a:	686c      	ldr	r4, [r5, #4]
 800095c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800095e:	07db      	lsls	r3, r3, #31
 8000960:	d405      	bmi.n	800096e <_puts_r+0x36>
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	0598      	lsls	r0, r3, #22
 8000966:	d402      	bmi.n	800096e <_puts_r+0x36>
 8000968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800096a:	f000 fad3 	bl	8000f14 <__retarget_lock_acquire_recursive>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	0719      	lsls	r1, r3, #28
 8000972:	d51d      	bpl.n	80009b0 <_puts_r+0x78>
 8000974:	6923      	ldr	r3, [r4, #16]
 8000976:	b1db      	cbz	r3, 80009b0 <_puts_r+0x78>
 8000978:	3e01      	subs	r6, #1
 800097a:	68a3      	ldr	r3, [r4, #8]
 800097c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000980:	3b01      	subs	r3, #1
 8000982:	60a3      	str	r3, [r4, #8]
 8000984:	bb39      	cbnz	r1, 80009d6 <_puts_r+0x9e>
 8000986:	2b00      	cmp	r3, #0
 8000988:	da38      	bge.n	80009fc <_puts_r+0xc4>
 800098a:	4622      	mov	r2, r4
 800098c:	210a      	movs	r1, #10
 800098e:	4628      	mov	r0, r5
 8000990:	f000 f848 	bl	8000a24 <__swbuf_r>
 8000994:	3001      	adds	r0, #1
 8000996:	d011      	beq.n	80009bc <_puts_r+0x84>
 8000998:	250a      	movs	r5, #10
 800099a:	e011      	b.n	80009c0 <_puts_r+0x88>
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <_puts_r+0xd4>)
 800099e:	429c      	cmp	r4, r3
 80009a0:	d101      	bne.n	80009a6 <_puts_r+0x6e>
 80009a2:	68ac      	ldr	r4, [r5, #8]
 80009a4:	e7da      	b.n	800095c <_puts_r+0x24>
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <_puts_r+0xd8>)
 80009a8:	429c      	cmp	r4, r3
 80009aa:	bf08      	it	eq
 80009ac:	68ec      	ldreq	r4, [r5, #12]
 80009ae:	e7d5      	b.n	800095c <_puts_r+0x24>
 80009b0:	4621      	mov	r1, r4
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 f888 	bl	8000ac8 <__swsetup_r>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d0dd      	beq.n	8000978 <_puts_r+0x40>
 80009bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009c2:	07da      	lsls	r2, r3, #31
 80009c4:	d405      	bmi.n	80009d2 <_puts_r+0x9a>
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	059b      	lsls	r3, r3, #22
 80009ca:	d402      	bmi.n	80009d2 <_puts_r+0x9a>
 80009cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ce:	f000 faa2 	bl	8000f16 <__retarget_lock_release_recursive>
 80009d2:	4628      	mov	r0, r5
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da04      	bge.n	80009e4 <_puts_r+0xac>
 80009da:	69a2      	ldr	r2, [r4, #24]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dc06      	bgt.n	80009ee <_puts_r+0xb6>
 80009e0:	290a      	cmp	r1, #10
 80009e2:	d004      	beq.n	80009ee <_puts_r+0xb6>
 80009e4:	6823      	ldr	r3, [r4, #0]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	6022      	str	r2, [r4, #0]
 80009ea:	7019      	strb	r1, [r3, #0]
 80009ec:	e7c5      	b.n	800097a <_puts_r+0x42>
 80009ee:	4622      	mov	r2, r4
 80009f0:	4628      	mov	r0, r5
 80009f2:	f000 f817 	bl	8000a24 <__swbuf_r>
 80009f6:	3001      	adds	r0, #1
 80009f8:	d1bf      	bne.n	800097a <_puts_r+0x42>
 80009fa:	e7df      	b.n	80009bc <_puts_r+0x84>
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	250a      	movs	r5, #10
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	6022      	str	r2, [r4, #0]
 8000a04:	701d      	strb	r5, [r3, #0]
 8000a06:	e7db      	b.n	80009c0 <_puts_r+0x88>
 8000a08:	0800140c 	.word	0x0800140c
 8000a0c:	0800142c 	.word	0x0800142c
 8000a10:	080013ec 	.word	0x080013ec

08000a14 <puts>:
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <puts+0xc>)
 8000a16:	4601      	mov	r1, r0
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f7ff bf8d 	b.w	8000938 <_puts_r>
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <__swbuf_r>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	460e      	mov	r6, r1
 8000a28:	4614      	mov	r4, r2
 8000a2a:	4605      	mov	r5, r0
 8000a2c:	b118      	cbz	r0, 8000a36 <__swbuf_r+0x12>
 8000a2e:	6983      	ldr	r3, [r0, #24]
 8000a30:	b90b      	cbnz	r3, 8000a36 <__swbuf_r+0x12>
 8000a32:	f000 f9d1 	bl	8000dd8 <__sinit>
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <__swbuf_r+0x98>)
 8000a38:	429c      	cmp	r4, r3
 8000a3a:	d12b      	bne.n	8000a94 <__swbuf_r+0x70>
 8000a3c:	686c      	ldr	r4, [r5, #4]
 8000a3e:	69a3      	ldr	r3, [r4, #24]
 8000a40:	60a3      	str	r3, [r4, #8]
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	071a      	lsls	r2, r3, #28
 8000a46:	d52f      	bpl.n	8000aa8 <__swbuf_r+0x84>
 8000a48:	6923      	ldr	r3, [r4, #16]
 8000a4a:	b36b      	cbz	r3, 8000aa8 <__swbuf_r+0x84>
 8000a4c:	6923      	ldr	r3, [r4, #16]
 8000a4e:	6820      	ldr	r0, [r4, #0]
 8000a50:	1ac0      	subs	r0, r0, r3
 8000a52:	6963      	ldr	r3, [r4, #20]
 8000a54:	b2f6      	uxtb	r6, r6
 8000a56:	4283      	cmp	r3, r0
 8000a58:	4637      	mov	r7, r6
 8000a5a:	dc04      	bgt.n	8000a66 <__swbuf_r+0x42>
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 f926 	bl	8000cb0 <_fflush_r>
 8000a64:	bb30      	cbnz	r0, 8000ab4 <__swbuf_r+0x90>
 8000a66:	68a3      	ldr	r3, [r4, #8]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	60a3      	str	r3, [r4, #8]
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	6022      	str	r2, [r4, #0]
 8000a72:	701e      	strb	r6, [r3, #0]
 8000a74:	6963      	ldr	r3, [r4, #20]
 8000a76:	3001      	adds	r0, #1
 8000a78:	4283      	cmp	r3, r0
 8000a7a:	d004      	beq.n	8000a86 <__swbuf_r+0x62>
 8000a7c:	89a3      	ldrh	r3, [r4, #12]
 8000a7e:	07db      	lsls	r3, r3, #31
 8000a80:	d506      	bpl.n	8000a90 <__swbuf_r+0x6c>
 8000a82:	2e0a      	cmp	r6, #10
 8000a84:	d104      	bne.n	8000a90 <__swbuf_r+0x6c>
 8000a86:	4621      	mov	r1, r4
 8000a88:	4628      	mov	r0, r5
 8000a8a:	f000 f911 	bl	8000cb0 <_fflush_r>
 8000a8e:	b988      	cbnz	r0, 8000ab4 <__swbuf_r+0x90>
 8000a90:	4638      	mov	r0, r7
 8000a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <__swbuf_r+0x9c>)
 8000a96:	429c      	cmp	r4, r3
 8000a98:	d101      	bne.n	8000a9e <__swbuf_r+0x7a>
 8000a9a:	68ac      	ldr	r4, [r5, #8]
 8000a9c:	e7cf      	b.n	8000a3e <__swbuf_r+0x1a>
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <__swbuf_r+0xa0>)
 8000aa0:	429c      	cmp	r4, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	68ec      	ldreq	r4, [r5, #12]
 8000aa6:	e7ca      	b.n	8000a3e <__swbuf_r+0x1a>
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	4628      	mov	r0, r5
 8000aac:	f000 f80c 	bl	8000ac8 <__swsetup_r>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d0cb      	beq.n	8000a4c <__swbuf_r+0x28>
 8000ab4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000ab8:	e7ea      	b.n	8000a90 <__swbuf_r+0x6c>
 8000aba:	bf00      	nop
 8000abc:	0800140c 	.word	0x0800140c
 8000ac0:	0800142c 	.word	0x0800142c
 8000ac4:	080013ec 	.word	0x080013ec

08000ac8 <__swsetup_r>:
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <__swsetup_r+0xcc>)
 8000aca:	b570      	push	{r4, r5, r6, lr}
 8000acc:	681d      	ldr	r5, [r3, #0]
 8000ace:	4606      	mov	r6, r0
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	b125      	cbz	r5, 8000ade <__swsetup_r+0x16>
 8000ad4:	69ab      	ldr	r3, [r5, #24]
 8000ad6:	b913      	cbnz	r3, 8000ade <__swsetup_r+0x16>
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f000 f97d 	bl	8000dd8 <__sinit>
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <__swsetup_r+0xd0>)
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	d10f      	bne.n	8000b04 <__swsetup_r+0x3c>
 8000ae4:	686c      	ldr	r4, [r5, #4]
 8000ae6:	89a3      	ldrh	r3, [r4, #12]
 8000ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aec:	0719      	lsls	r1, r3, #28
 8000aee:	d42c      	bmi.n	8000b4a <__swsetup_r+0x82>
 8000af0:	06dd      	lsls	r5, r3, #27
 8000af2:	d411      	bmi.n	8000b18 <__swsetup_r+0x50>
 8000af4:	2309      	movs	r3, #9
 8000af6:	6033      	str	r3, [r6, #0]
 8000af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000afc:	81a3      	strh	r3, [r4, #12]
 8000afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b02:	e03e      	b.n	8000b82 <__swsetup_r+0xba>
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <__swsetup_r+0xd4>)
 8000b06:	429c      	cmp	r4, r3
 8000b08:	d101      	bne.n	8000b0e <__swsetup_r+0x46>
 8000b0a:	68ac      	ldr	r4, [r5, #8]
 8000b0c:	e7eb      	b.n	8000ae6 <__swsetup_r+0x1e>
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <__swsetup_r+0xd8>)
 8000b10:	429c      	cmp	r4, r3
 8000b12:	bf08      	it	eq
 8000b14:	68ec      	ldreq	r4, [r5, #12]
 8000b16:	e7e6      	b.n	8000ae6 <__swsetup_r+0x1e>
 8000b18:	0758      	lsls	r0, r3, #29
 8000b1a:	d512      	bpl.n	8000b42 <__swsetup_r+0x7a>
 8000b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b1e:	b141      	cbz	r1, 8000b32 <__swsetup_r+0x6a>
 8000b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d002      	beq.n	8000b2e <__swsetup_r+0x66>
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f000 fa5b 	bl	8000fe4 <_free_r>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6363      	str	r3, [r4, #52]	; 0x34
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b38:	81a3      	strh	r3, [r4, #12]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	6063      	str	r3, [r4, #4]
 8000b3e:	6923      	ldr	r3, [r4, #16]
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	89a3      	ldrh	r3, [r4, #12]
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	81a3      	strh	r3, [r4, #12]
 8000b4a:	6923      	ldr	r3, [r4, #16]
 8000b4c:	b94b      	cbnz	r3, 8000b62 <__swsetup_r+0x9a>
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b58:	d003      	beq.n	8000b62 <__swsetup_r+0x9a>
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f000 fa01 	bl	8000f64 <__smakebuf_r>
 8000b62:	89a0      	ldrh	r0, [r4, #12]
 8000b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b68:	f010 0301 	ands.w	r3, r0, #1
 8000b6c:	d00a      	beq.n	8000b84 <__swsetup_r+0xbc>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60a3      	str	r3, [r4, #8]
 8000b72:	6963      	ldr	r3, [r4, #20]
 8000b74:	425b      	negs	r3, r3
 8000b76:	61a3      	str	r3, [r4, #24]
 8000b78:	6923      	ldr	r3, [r4, #16]
 8000b7a:	b943      	cbnz	r3, 8000b8e <__swsetup_r+0xc6>
 8000b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b80:	d1ba      	bne.n	8000af8 <__swsetup_r+0x30>
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	0781      	lsls	r1, r0, #30
 8000b86:	bf58      	it	pl
 8000b88:	6963      	ldrpl	r3, [r4, #20]
 8000b8a:	60a3      	str	r3, [r4, #8]
 8000b8c:	e7f4      	b.n	8000b78 <__swsetup_r+0xb0>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e7f7      	b.n	8000b82 <__swsetup_r+0xba>
 8000b92:	bf00      	nop
 8000b94:	20000004 	.word	0x20000004
 8000b98:	0800140c 	.word	0x0800140c
 8000b9c:	0800142c 	.word	0x0800142c
 8000ba0:	080013ec 	.word	0x080013ec

08000ba4 <__sflush_r>:
 8000ba4:	898a      	ldrh	r2, [r1, #12]
 8000ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000baa:	4605      	mov	r5, r0
 8000bac:	0710      	lsls	r0, r2, #28
 8000bae:	460c      	mov	r4, r1
 8000bb0:	d458      	bmi.n	8000c64 <__sflush_r+0xc0>
 8000bb2:	684b      	ldr	r3, [r1, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dc05      	bgt.n	8000bc4 <__sflush_r+0x20>
 8000bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	dc02      	bgt.n	8000bc4 <__sflush_r+0x20>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0f9      	beq.n	8000bbe <__sflush_r+0x1a>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000bd0:	682f      	ldr	r7, [r5, #0]
 8000bd2:	602b      	str	r3, [r5, #0]
 8000bd4:	d032      	beq.n	8000c3c <__sflush_r+0x98>
 8000bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bd8:	89a3      	ldrh	r3, [r4, #12]
 8000bda:	075a      	lsls	r2, r3, #29
 8000bdc:	d505      	bpl.n	8000bea <__sflush_r+0x46>
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	1ac0      	subs	r0, r0, r3
 8000be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000be4:	b10b      	cbz	r3, 8000bea <__sflush_r+0x46>
 8000be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000be8:	1ac0      	subs	r0, r0, r3
 8000bea:	2300      	movs	r3, #0
 8000bec:	4602      	mov	r2, r0
 8000bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bf0:	6a21      	ldr	r1, [r4, #32]
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	47b0      	blx	r6
 8000bf6:	1c43      	adds	r3, r0, #1
 8000bf8:	89a3      	ldrh	r3, [r4, #12]
 8000bfa:	d106      	bne.n	8000c0a <__sflush_r+0x66>
 8000bfc:	6829      	ldr	r1, [r5, #0]
 8000bfe:	291d      	cmp	r1, #29
 8000c00:	d82c      	bhi.n	8000c5c <__sflush_r+0xb8>
 8000c02:	4a2a      	ldr	r2, [pc, #168]	; (8000cac <__sflush_r+0x108>)
 8000c04:	40ca      	lsrs	r2, r1
 8000c06:	07d6      	lsls	r6, r2, #31
 8000c08:	d528      	bpl.n	8000c5c <__sflush_r+0xb8>
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	6062      	str	r2, [r4, #4]
 8000c0e:	04d9      	lsls	r1, r3, #19
 8000c10:	6922      	ldr	r2, [r4, #16]
 8000c12:	6022      	str	r2, [r4, #0]
 8000c14:	d504      	bpl.n	8000c20 <__sflush_r+0x7c>
 8000c16:	1c42      	adds	r2, r0, #1
 8000c18:	d101      	bne.n	8000c1e <__sflush_r+0x7a>
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	b903      	cbnz	r3, 8000c20 <__sflush_r+0x7c>
 8000c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8000c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c22:	602f      	str	r7, [r5, #0]
 8000c24:	2900      	cmp	r1, #0
 8000c26:	d0ca      	beq.n	8000bbe <__sflush_r+0x1a>
 8000c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d002      	beq.n	8000c36 <__sflush_r+0x92>
 8000c30:	4628      	mov	r0, r5
 8000c32:	f000 f9d7 	bl	8000fe4 <_free_r>
 8000c36:	2000      	movs	r0, #0
 8000c38:	6360      	str	r0, [r4, #52]	; 0x34
 8000c3a:	e7c1      	b.n	8000bc0 <__sflush_r+0x1c>
 8000c3c:	6a21      	ldr	r1, [r4, #32]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4628      	mov	r0, r5
 8000c42:	47b0      	blx	r6
 8000c44:	1c41      	adds	r1, r0, #1
 8000c46:	d1c7      	bne.n	8000bd8 <__sflush_r+0x34>
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0c4      	beq.n	8000bd8 <__sflush_r+0x34>
 8000c4e:	2b1d      	cmp	r3, #29
 8000c50:	d001      	beq.n	8000c56 <__sflush_r+0xb2>
 8000c52:	2b16      	cmp	r3, #22
 8000c54:	d101      	bne.n	8000c5a <__sflush_r+0xb6>
 8000c56:	602f      	str	r7, [r5, #0]
 8000c58:	e7b1      	b.n	8000bbe <__sflush_r+0x1a>
 8000c5a:	89a3      	ldrh	r3, [r4, #12]
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	e7ad      	b.n	8000bc0 <__sflush_r+0x1c>
 8000c64:	690f      	ldr	r7, [r1, #16]
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d0a9      	beq.n	8000bbe <__sflush_r+0x1a>
 8000c6a:	0793      	lsls	r3, r2, #30
 8000c6c:	680e      	ldr	r6, [r1, #0]
 8000c6e:	bf08      	it	eq
 8000c70:	694b      	ldreq	r3, [r1, #20]
 8000c72:	600f      	str	r7, [r1, #0]
 8000c74:	bf18      	it	ne
 8000c76:	2300      	movne	r3, #0
 8000c78:	eba6 0807 	sub.w	r8, r6, r7
 8000c7c:	608b      	str	r3, [r1, #8]
 8000c7e:	f1b8 0f00 	cmp.w	r8, #0
 8000c82:	dd9c      	ble.n	8000bbe <__sflush_r+0x1a>
 8000c84:	6a21      	ldr	r1, [r4, #32]
 8000c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c88:	4643      	mov	r3, r8
 8000c8a:	463a      	mov	r2, r7
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	47b0      	blx	r6
 8000c90:	2800      	cmp	r0, #0
 8000c92:	dc06      	bgt.n	8000ca2 <__sflush_r+0xfe>
 8000c94:	89a3      	ldrh	r3, [r4, #12]
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	81a3      	strh	r3, [r4, #12]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	e78e      	b.n	8000bc0 <__sflush_r+0x1c>
 8000ca2:	4407      	add	r7, r0
 8000ca4:	eba8 0800 	sub.w	r8, r8, r0
 8000ca8:	e7e9      	b.n	8000c7e <__sflush_r+0xda>
 8000caa:	bf00      	nop
 8000cac:	20400001 	.word	0x20400001

08000cb0 <_fflush_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	690b      	ldr	r3, [r1, #16]
 8000cb4:	4605      	mov	r5, r0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	b913      	cbnz	r3, 8000cc0 <_fflush_r+0x10>
 8000cba:	2500      	movs	r5, #0
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}
 8000cc0:	b118      	cbz	r0, 8000cca <_fflush_r+0x1a>
 8000cc2:	6983      	ldr	r3, [r0, #24]
 8000cc4:	b90b      	cbnz	r3, 8000cca <_fflush_r+0x1a>
 8000cc6:	f000 f887 	bl	8000dd8 <__sinit>
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <_fflush_r+0x6c>)
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d11b      	bne.n	8000d08 <_fflush_r+0x58>
 8000cd0:	686c      	ldr	r4, [r5, #4]
 8000cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0ef      	beq.n	8000cba <_fflush_r+0xa>
 8000cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cdc:	07d0      	lsls	r0, r2, #31
 8000cde:	d404      	bmi.n	8000cea <_fflush_r+0x3a>
 8000ce0:	0599      	lsls	r1, r3, #22
 8000ce2:	d402      	bmi.n	8000cea <_fflush_r+0x3a>
 8000ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ce6:	f000 f915 	bl	8000f14 <__retarget_lock_acquire_recursive>
 8000cea:	4628      	mov	r0, r5
 8000cec:	4621      	mov	r1, r4
 8000cee:	f7ff ff59 	bl	8000ba4 <__sflush_r>
 8000cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cf4:	07da      	lsls	r2, r3, #31
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	d4e0      	bmi.n	8000cbc <_fflush_r+0xc>
 8000cfa:	89a3      	ldrh	r3, [r4, #12]
 8000cfc:	059b      	lsls	r3, r3, #22
 8000cfe:	d4dd      	bmi.n	8000cbc <_fflush_r+0xc>
 8000d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d02:	f000 f908 	bl	8000f16 <__retarget_lock_release_recursive>
 8000d06:	e7d9      	b.n	8000cbc <_fflush_r+0xc>
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <_fflush_r+0x70>)
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	d101      	bne.n	8000d12 <_fflush_r+0x62>
 8000d0e:	68ac      	ldr	r4, [r5, #8]
 8000d10:	e7df      	b.n	8000cd2 <_fflush_r+0x22>
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <_fflush_r+0x74>)
 8000d14:	429c      	cmp	r4, r3
 8000d16:	bf08      	it	eq
 8000d18:	68ec      	ldreq	r4, [r5, #12]
 8000d1a:	e7da      	b.n	8000cd2 <_fflush_r+0x22>
 8000d1c:	0800140c 	.word	0x0800140c
 8000d20:	0800142c 	.word	0x0800142c
 8000d24:	080013ec 	.word	0x080013ec

08000d28 <std>:
 8000d28:	2300      	movs	r3, #0
 8000d2a:	b510      	push	{r4, lr}
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8000d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d36:	6083      	str	r3, [r0, #8]
 8000d38:	8181      	strh	r1, [r0, #12]
 8000d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8000d3c:	81c2      	strh	r2, [r0, #14]
 8000d3e:	6183      	str	r3, [r0, #24]
 8000d40:	4619      	mov	r1, r3
 8000d42:	2208      	movs	r2, #8
 8000d44:	305c      	adds	r0, #92	; 0x5c
 8000d46:	f7ff fdef 	bl	8000928 <memset>
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <std+0x38>)
 8000d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <std+0x3c>)
 8000d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <std+0x40>)
 8000d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <std+0x44>)
 8000d58:	6224      	str	r4, [r4, #32]
 8000d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	bf00      	nop
 8000d60:	080011c5 	.word	0x080011c5
 8000d64:	080011e7 	.word	0x080011e7
 8000d68:	0800121f 	.word	0x0800121f
 8000d6c:	08001243 	.word	0x08001243

08000d70 <_cleanup_r>:
 8000d70:	4901      	ldr	r1, [pc, #4]	; (8000d78 <_cleanup_r+0x8>)
 8000d72:	f000 b8af 	b.w	8000ed4 <_fwalk_reent>
 8000d76:	bf00      	nop
 8000d78:	08000cb1 	.word	0x08000cb1

08000d7c <__sfmoreglue>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	2268      	movs	r2, #104	; 0x68
 8000d80:	1e4d      	subs	r5, r1, #1
 8000d82:	4355      	muls	r5, r2
 8000d84:	460e      	mov	r6, r1
 8000d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d8a:	f000 f997 	bl	80010bc <_malloc_r>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	b140      	cbz	r0, 8000da4 <__sfmoreglue+0x28>
 8000d92:	2100      	movs	r1, #0
 8000d94:	e9c0 1600 	strd	r1, r6, [r0]
 8000d98:	300c      	adds	r0, #12
 8000d9a:	60a0      	str	r0, [r4, #8]
 8000d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000da0:	f7ff fdc2 	bl	8000928 <memset>
 8000da4:	4620      	mov	r0, r4
 8000da6:	bd70      	pop	{r4, r5, r6, pc}

08000da8 <__sfp_lock_acquire>:
 8000da8:	4801      	ldr	r0, [pc, #4]	; (8000db0 <__sfp_lock_acquire+0x8>)
 8000daa:	f000 b8b3 	b.w	8000f14 <__retarget_lock_acquire_recursive>
 8000dae:	bf00      	nop
 8000db0:	20000099 	.word	0x20000099

08000db4 <__sfp_lock_release>:
 8000db4:	4801      	ldr	r0, [pc, #4]	; (8000dbc <__sfp_lock_release+0x8>)
 8000db6:	f000 b8ae 	b.w	8000f16 <__retarget_lock_release_recursive>
 8000dba:	bf00      	nop
 8000dbc:	20000099 	.word	0x20000099

08000dc0 <__sinit_lock_acquire>:
 8000dc0:	4801      	ldr	r0, [pc, #4]	; (8000dc8 <__sinit_lock_acquire+0x8>)
 8000dc2:	f000 b8a7 	b.w	8000f14 <__retarget_lock_acquire_recursive>
 8000dc6:	bf00      	nop
 8000dc8:	2000009a 	.word	0x2000009a

08000dcc <__sinit_lock_release>:
 8000dcc:	4801      	ldr	r0, [pc, #4]	; (8000dd4 <__sinit_lock_release+0x8>)
 8000dce:	f000 b8a2 	b.w	8000f16 <__retarget_lock_release_recursive>
 8000dd2:	bf00      	nop
 8000dd4:	2000009a 	.word	0x2000009a

08000dd8 <__sinit>:
 8000dd8:	b510      	push	{r4, lr}
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fff0 	bl	8000dc0 <__sinit_lock_acquire>
 8000de0:	69a3      	ldr	r3, [r4, #24]
 8000de2:	b11b      	cbz	r3, 8000dec <__sinit+0x14>
 8000de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000de8:	f7ff bff0 	b.w	8000dcc <__sinit_lock_release>
 8000dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000df0:	6523      	str	r3, [r4, #80]	; 0x50
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <__sinit+0x68>)
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <__sinit+0x6c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	bf04      	itt	eq
 8000dfe:	2301      	moveq	r3, #1
 8000e00:	61a3      	streq	r3, [r4, #24]
 8000e02:	4620      	mov	r0, r4
 8000e04:	f000 f820 	bl	8000e48 <__sfp>
 8000e08:	6060      	str	r0, [r4, #4]
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f000 f81c 	bl	8000e48 <__sfp>
 8000e10:	60a0      	str	r0, [r4, #8]
 8000e12:	4620      	mov	r0, r4
 8000e14:	f000 f818 	bl	8000e48 <__sfp>
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60e0      	str	r0, [r4, #12]
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	6860      	ldr	r0, [r4, #4]
 8000e20:	f7ff ff82 	bl	8000d28 <std>
 8000e24:	68a0      	ldr	r0, [r4, #8]
 8000e26:	2201      	movs	r2, #1
 8000e28:	2109      	movs	r1, #9
 8000e2a:	f7ff ff7d 	bl	8000d28 <std>
 8000e2e:	68e0      	ldr	r0, [r4, #12]
 8000e30:	2202      	movs	r2, #2
 8000e32:	2112      	movs	r1, #18
 8000e34:	f7ff ff78 	bl	8000d28 <std>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61a3      	str	r3, [r4, #24]
 8000e3c:	e7d2      	b.n	8000de4 <__sinit+0xc>
 8000e3e:	bf00      	nop
 8000e40:	080013e8 	.word	0x080013e8
 8000e44:	08000d71 	.word	0x08000d71

08000e48 <__sfp>:
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	4607      	mov	r7, r0
 8000e4c:	f7ff ffac 	bl	8000da8 <__sfp_lock_acquire>
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <__sfp+0x84>)
 8000e52:	681e      	ldr	r6, [r3, #0]
 8000e54:	69b3      	ldr	r3, [r6, #24]
 8000e56:	b913      	cbnz	r3, 8000e5e <__sfp+0x16>
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f7ff ffbd 	bl	8000dd8 <__sinit>
 8000e5e:	3648      	adds	r6, #72	; 0x48
 8000e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	d503      	bpl.n	8000e70 <__sfp+0x28>
 8000e68:	6833      	ldr	r3, [r6, #0]
 8000e6a:	b30b      	cbz	r3, 8000eb0 <__sfp+0x68>
 8000e6c:	6836      	ldr	r6, [r6, #0]
 8000e6e:	e7f7      	b.n	8000e60 <__sfp+0x18>
 8000e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e74:	b9d5      	cbnz	r5, 8000eac <__sfp+0x64>
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <__sfp+0x88>)
 8000e78:	60e3      	str	r3, [r4, #12]
 8000e7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8000e80:	f000 f847 	bl	8000f12 <__retarget_lock_init_recursive>
 8000e84:	f7ff ff96 	bl	8000db4 <__sfp_lock_release>
 8000e88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e90:	6025      	str	r5, [r4, #0]
 8000e92:	61a5      	str	r5, [r4, #24]
 8000e94:	2208      	movs	r2, #8
 8000e96:	4629      	mov	r1, r5
 8000e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e9c:	f7ff fd44 	bl	8000928 <memset>
 8000ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eac:	3468      	adds	r4, #104	; 0x68
 8000eae:	e7d9      	b.n	8000e64 <__sfp+0x1c>
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	f7ff ff62 	bl	8000d7c <__sfmoreglue>
 8000eb8:	4604      	mov	r4, r0
 8000eba:	6030      	str	r0, [r6, #0]
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d1d5      	bne.n	8000e6c <__sfp+0x24>
 8000ec0:	f7ff ff78 	bl	8000db4 <__sfp_lock_release>
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	e7ee      	b.n	8000ea8 <__sfp+0x60>
 8000eca:	bf00      	nop
 8000ecc:	080013e8 	.word	0x080013e8
 8000ed0:	ffff0001 	.word	0xffff0001

08000ed4 <_fwalk_reent>:
 8000ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4688      	mov	r8, r1
 8000edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ee0:	2700      	movs	r7, #0
 8000ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8000eea:	d505      	bpl.n	8000ef8 <_fwalk_reent+0x24>
 8000eec:	6824      	ldr	r4, [r4, #0]
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d1f7      	bne.n	8000ee2 <_fwalk_reent+0xe>
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ef8:	89ab      	ldrh	r3, [r5, #12]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d907      	bls.n	8000f0e <_fwalk_reent+0x3a>
 8000efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f02:	3301      	adds	r3, #1
 8000f04:	d003      	beq.n	8000f0e <_fwalk_reent+0x3a>
 8000f06:	4629      	mov	r1, r5
 8000f08:	4630      	mov	r0, r6
 8000f0a:	47c0      	blx	r8
 8000f0c:	4307      	orrs	r7, r0
 8000f0e:	3568      	adds	r5, #104	; 0x68
 8000f10:	e7e9      	b.n	8000ee6 <_fwalk_reent+0x12>

08000f12 <__retarget_lock_init_recursive>:
 8000f12:	4770      	bx	lr

08000f14 <__retarget_lock_acquire_recursive>:
 8000f14:	4770      	bx	lr

08000f16 <__retarget_lock_release_recursive>:
 8000f16:	4770      	bx	lr

08000f18 <__swhatbuf_r>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	460e      	mov	r6, r1
 8000f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f20:	2900      	cmp	r1, #0
 8000f22:	b096      	sub	sp, #88	; 0x58
 8000f24:	4614      	mov	r4, r2
 8000f26:	461d      	mov	r5, r3
 8000f28:	da08      	bge.n	8000f3c <__swhatbuf_r+0x24>
 8000f2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	602a      	str	r2, [r5, #0]
 8000f32:	061a      	lsls	r2, r3, #24
 8000f34:	d410      	bmi.n	8000f58 <__swhatbuf_r+0x40>
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	e00e      	b.n	8000f5a <__swhatbuf_r+0x42>
 8000f3c:	466a      	mov	r2, sp
 8000f3e:	f000 f9a7 	bl	8001290 <_fstat_r>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	dbf1      	blt.n	8000f2a <__swhatbuf_r+0x12>
 8000f46:	9a01      	ldr	r2, [sp, #4]
 8000f48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f50:	425a      	negs	r2, r3
 8000f52:	415a      	adcs	r2, r3
 8000f54:	602a      	str	r2, [r5, #0]
 8000f56:	e7ee      	b.n	8000f36 <__swhatbuf_r+0x1e>
 8000f58:	2340      	movs	r3, #64	; 0x40
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	6023      	str	r3, [r4, #0]
 8000f5e:	b016      	add	sp, #88	; 0x58
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f64 <__smakebuf_r>:
 8000f64:	898b      	ldrh	r3, [r1, #12]
 8000f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f68:	079d      	lsls	r5, r3, #30
 8000f6a:	4606      	mov	r6, r0
 8000f6c:	460c      	mov	r4, r1
 8000f6e:	d507      	bpl.n	8000f80 <__smakebuf_r+0x1c>
 8000f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	6123      	str	r3, [r4, #16]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	6163      	str	r3, [r4, #20]
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	ab01      	add	r3, sp, #4
 8000f82:	466a      	mov	r2, sp
 8000f84:	f7ff ffc8 	bl	8000f18 <__swhatbuf_r>
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	4605      	mov	r5, r0
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f000 f895 	bl	80010bc <_malloc_r>
 8000f92:	b948      	cbnz	r0, 8000fa8 <__smakebuf_r+0x44>
 8000f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f98:	059a      	lsls	r2, r3, #22
 8000f9a:	d4ef      	bmi.n	8000f7c <__smakebuf_r+0x18>
 8000f9c:	f023 0303 	bic.w	r3, r3, #3
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	81a3      	strh	r3, [r4, #12]
 8000fa6:	e7e3      	b.n	8000f70 <__smakebuf_r+0xc>
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <__smakebuf_r+0x7c>)
 8000faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	6020      	str	r0, [r4, #0]
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	81a3      	strh	r3, [r4, #12]
 8000fb6:	9b00      	ldr	r3, [sp, #0]
 8000fb8:	6163      	str	r3, [r4, #20]
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	6120      	str	r0, [r4, #16]
 8000fbe:	b15b      	cbz	r3, 8000fd8 <__smakebuf_r+0x74>
 8000fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	f000 f975 	bl	80012b4 <_isatty_r>
 8000fca:	b128      	cbz	r0, 8000fd8 <__smakebuf_r+0x74>
 8000fcc:	89a3      	ldrh	r3, [r4, #12]
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	81a3      	strh	r3, [r4, #12]
 8000fd8:	89a0      	ldrh	r0, [r4, #12]
 8000fda:	4305      	orrs	r5, r0
 8000fdc:	81a5      	strh	r5, [r4, #12]
 8000fde:	e7cd      	b.n	8000f7c <__smakebuf_r+0x18>
 8000fe0:	08000d71 	.word	0x08000d71

08000fe4 <_free_r>:
 8000fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fe6:	2900      	cmp	r1, #0
 8000fe8:	d044      	beq.n	8001074 <_free_r+0x90>
 8000fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fee:	9001      	str	r0, [sp, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8000ff6:	bfb8      	it	lt
 8000ff8:	18e4      	addlt	r4, r4, r3
 8000ffa:	f000 f97d 	bl	80012f8 <__malloc_lock>
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <_free_r+0x94>)
 8001000:	9801      	ldr	r0, [sp, #4]
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	b933      	cbnz	r3, 8001014 <_free_r+0x30>
 8001006:	6063      	str	r3, [r4, #4]
 8001008:	6014      	str	r4, [r2, #0]
 800100a:	b003      	add	sp, #12
 800100c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001010:	f000 b978 	b.w	8001304 <__malloc_unlock>
 8001014:	42a3      	cmp	r3, r4
 8001016:	d908      	bls.n	800102a <_free_r+0x46>
 8001018:	6825      	ldr	r5, [r4, #0]
 800101a:	1961      	adds	r1, r4, r5
 800101c:	428b      	cmp	r3, r1
 800101e:	bf01      	itttt	eq
 8001020:	6819      	ldreq	r1, [r3, #0]
 8001022:	685b      	ldreq	r3, [r3, #4]
 8001024:	1949      	addeq	r1, r1, r5
 8001026:	6021      	streq	r1, [r4, #0]
 8001028:	e7ed      	b.n	8001006 <_free_r+0x22>
 800102a:	461a      	mov	r2, r3
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	b10b      	cbz	r3, 8001034 <_free_r+0x50>
 8001030:	42a3      	cmp	r3, r4
 8001032:	d9fa      	bls.n	800102a <_free_r+0x46>
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	1855      	adds	r5, r2, r1
 8001038:	42a5      	cmp	r5, r4
 800103a:	d10b      	bne.n	8001054 <_free_r+0x70>
 800103c:	6824      	ldr	r4, [r4, #0]
 800103e:	4421      	add	r1, r4
 8001040:	1854      	adds	r4, r2, r1
 8001042:	42a3      	cmp	r3, r4
 8001044:	6011      	str	r1, [r2, #0]
 8001046:	d1e0      	bne.n	800100a <_free_r+0x26>
 8001048:	681c      	ldr	r4, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6053      	str	r3, [r2, #4]
 800104e:	4421      	add	r1, r4
 8001050:	6011      	str	r1, [r2, #0]
 8001052:	e7da      	b.n	800100a <_free_r+0x26>
 8001054:	d902      	bls.n	800105c <_free_r+0x78>
 8001056:	230c      	movs	r3, #12
 8001058:	6003      	str	r3, [r0, #0]
 800105a:	e7d6      	b.n	800100a <_free_r+0x26>
 800105c:	6825      	ldr	r5, [r4, #0]
 800105e:	1961      	adds	r1, r4, r5
 8001060:	428b      	cmp	r3, r1
 8001062:	bf04      	itt	eq
 8001064:	6819      	ldreq	r1, [r3, #0]
 8001066:	685b      	ldreq	r3, [r3, #4]
 8001068:	6063      	str	r3, [r4, #4]
 800106a:	bf04      	itt	eq
 800106c:	1949      	addeq	r1, r1, r5
 800106e:	6021      	streq	r1, [r4, #0]
 8001070:	6054      	str	r4, [r2, #4]
 8001072:	e7ca      	b.n	800100a <_free_r+0x26>
 8001074:	b003      	add	sp, #12
 8001076:	bd30      	pop	{r4, r5, pc}
 8001078:	2000009c 	.word	0x2000009c

0800107c <sbrk_aligned>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	4e0e      	ldr	r6, [pc, #56]	; (80010b8 <sbrk_aligned+0x3c>)
 8001080:	460c      	mov	r4, r1
 8001082:	6831      	ldr	r1, [r6, #0]
 8001084:	4605      	mov	r5, r0
 8001086:	b911      	cbnz	r1, 800108e <sbrk_aligned+0x12>
 8001088:	f000 f88c 	bl	80011a4 <_sbrk_r>
 800108c:	6030      	str	r0, [r6, #0]
 800108e:	4621      	mov	r1, r4
 8001090:	4628      	mov	r0, r5
 8001092:	f000 f887 	bl	80011a4 <_sbrk_r>
 8001096:	1c43      	adds	r3, r0, #1
 8001098:	d00a      	beq.n	80010b0 <sbrk_aligned+0x34>
 800109a:	1cc4      	adds	r4, r0, #3
 800109c:	f024 0403 	bic.w	r4, r4, #3
 80010a0:	42a0      	cmp	r0, r4
 80010a2:	d007      	beq.n	80010b4 <sbrk_aligned+0x38>
 80010a4:	1a21      	subs	r1, r4, r0
 80010a6:	4628      	mov	r0, r5
 80010a8:	f000 f87c 	bl	80011a4 <_sbrk_r>
 80010ac:	3001      	adds	r0, #1
 80010ae:	d101      	bne.n	80010b4 <sbrk_aligned+0x38>
 80010b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80010b4:	4620      	mov	r0, r4
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	200000a0 	.word	0x200000a0

080010bc <_malloc_r>:
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	1ccd      	adds	r5, r1, #3
 80010c2:	f025 0503 	bic.w	r5, r5, #3
 80010c6:	3508      	adds	r5, #8
 80010c8:	2d0c      	cmp	r5, #12
 80010ca:	bf38      	it	cc
 80010cc:	250c      	movcc	r5, #12
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	4607      	mov	r7, r0
 80010d2:	db01      	blt.n	80010d8 <_malloc_r+0x1c>
 80010d4:	42a9      	cmp	r1, r5
 80010d6:	d905      	bls.n	80010e4 <_malloc_r+0x28>
 80010d8:	230c      	movs	r3, #12
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	2600      	movs	r6, #0
 80010de:	4630      	mov	r0, r6
 80010e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e4:	4e2e      	ldr	r6, [pc, #184]	; (80011a0 <_malloc_r+0xe4>)
 80010e6:	f000 f907 	bl	80012f8 <__malloc_lock>
 80010ea:	6833      	ldr	r3, [r6, #0]
 80010ec:	461c      	mov	r4, r3
 80010ee:	bb34      	cbnz	r4, 800113e <_malloc_r+0x82>
 80010f0:	4629      	mov	r1, r5
 80010f2:	4638      	mov	r0, r7
 80010f4:	f7ff ffc2 	bl	800107c <sbrk_aligned>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	4604      	mov	r4, r0
 80010fc:	d14d      	bne.n	800119a <_malloc_r+0xde>
 80010fe:	6834      	ldr	r4, [r6, #0]
 8001100:	4626      	mov	r6, r4
 8001102:	2e00      	cmp	r6, #0
 8001104:	d140      	bne.n	8001188 <_malloc_r+0xcc>
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	4631      	mov	r1, r6
 800110a:	4638      	mov	r0, r7
 800110c:	eb04 0803 	add.w	r8, r4, r3
 8001110:	f000 f848 	bl	80011a4 <_sbrk_r>
 8001114:	4580      	cmp	r8, r0
 8001116:	d13a      	bne.n	800118e <_malloc_r+0xd2>
 8001118:	6821      	ldr	r1, [r4, #0]
 800111a:	3503      	adds	r5, #3
 800111c:	1a6d      	subs	r5, r5, r1
 800111e:	f025 0503 	bic.w	r5, r5, #3
 8001122:	3508      	adds	r5, #8
 8001124:	2d0c      	cmp	r5, #12
 8001126:	bf38      	it	cc
 8001128:	250c      	movcc	r5, #12
 800112a:	4629      	mov	r1, r5
 800112c:	4638      	mov	r0, r7
 800112e:	f7ff ffa5 	bl	800107c <sbrk_aligned>
 8001132:	3001      	adds	r0, #1
 8001134:	d02b      	beq.n	800118e <_malloc_r+0xd2>
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	442b      	add	r3, r5
 800113a:	6023      	str	r3, [r4, #0]
 800113c:	e00e      	b.n	800115c <_malloc_r+0xa0>
 800113e:	6822      	ldr	r2, [r4, #0]
 8001140:	1b52      	subs	r2, r2, r5
 8001142:	d41e      	bmi.n	8001182 <_malloc_r+0xc6>
 8001144:	2a0b      	cmp	r2, #11
 8001146:	d916      	bls.n	8001176 <_malloc_r+0xba>
 8001148:	1961      	adds	r1, r4, r5
 800114a:	42a3      	cmp	r3, r4
 800114c:	6025      	str	r5, [r4, #0]
 800114e:	bf18      	it	ne
 8001150:	6059      	strne	r1, [r3, #4]
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	bf08      	it	eq
 8001156:	6031      	streq	r1, [r6, #0]
 8001158:	5162      	str	r2, [r4, r5]
 800115a:	604b      	str	r3, [r1, #4]
 800115c:	4638      	mov	r0, r7
 800115e:	f104 060b 	add.w	r6, r4, #11
 8001162:	f000 f8cf 	bl	8001304 <__malloc_unlock>
 8001166:	f026 0607 	bic.w	r6, r6, #7
 800116a:	1d23      	adds	r3, r4, #4
 800116c:	1af2      	subs	r2, r6, r3
 800116e:	d0b6      	beq.n	80010de <_malloc_r+0x22>
 8001170:	1b9b      	subs	r3, r3, r6
 8001172:	50a3      	str	r3, [r4, r2]
 8001174:	e7b3      	b.n	80010de <_malloc_r+0x22>
 8001176:	6862      	ldr	r2, [r4, #4]
 8001178:	42a3      	cmp	r3, r4
 800117a:	bf0c      	ite	eq
 800117c:	6032      	streq	r2, [r6, #0]
 800117e:	605a      	strne	r2, [r3, #4]
 8001180:	e7ec      	b.n	800115c <_malloc_r+0xa0>
 8001182:	4623      	mov	r3, r4
 8001184:	6864      	ldr	r4, [r4, #4]
 8001186:	e7b2      	b.n	80010ee <_malloc_r+0x32>
 8001188:	4634      	mov	r4, r6
 800118a:	6876      	ldr	r6, [r6, #4]
 800118c:	e7b9      	b.n	8001102 <_malloc_r+0x46>
 800118e:	230c      	movs	r3, #12
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4638      	mov	r0, r7
 8001194:	f000 f8b6 	bl	8001304 <__malloc_unlock>
 8001198:	e7a1      	b.n	80010de <_malloc_r+0x22>
 800119a:	6025      	str	r5, [r4, #0]
 800119c:	e7de      	b.n	800115c <_malloc_r+0xa0>
 800119e:	bf00      	nop
 80011a0:	2000009c 	.word	0x2000009c

080011a4 <_sbrk_r>:
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4d06      	ldr	r5, [pc, #24]	; (80011c0 <_sbrk_r+0x1c>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	602b      	str	r3, [r5, #0]
 80011b0:	f7ff f8d4 	bl	800035c <_sbrk>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_sbrk_r+0x1a>
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	b103      	cbz	r3, 80011be <_sbrk_r+0x1a>
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	200000a4 	.word	0x200000a4

080011c4 <__sread>:
 80011c4:	b510      	push	{r4, lr}
 80011c6:	460c      	mov	r4, r1
 80011c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011cc:	f000 f8a0 	bl	8001310 <_read_r>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	bfab      	itete	ge
 80011d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011d6:	89a3      	ldrhlt	r3, [r4, #12]
 80011d8:	181b      	addge	r3, r3, r0
 80011da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011de:	bfac      	ite	ge
 80011e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80011e2:	81a3      	strhlt	r3, [r4, #12]
 80011e4:	bd10      	pop	{r4, pc}

080011e6 <__swrite>:
 80011e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ea:	461f      	mov	r7, r3
 80011ec:	898b      	ldrh	r3, [r1, #12]
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	4605      	mov	r5, r0
 80011f2:	460c      	mov	r4, r1
 80011f4:	4616      	mov	r6, r2
 80011f6:	d505      	bpl.n	8001204 <__swrite+0x1e>
 80011f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011fc:	2302      	movs	r3, #2
 80011fe:	2200      	movs	r2, #0
 8001200:	f000 f868 	bl	80012d4 <_lseek_r>
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800120a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800120e:	81a3      	strh	r3, [r4, #12]
 8001210:	4632      	mov	r2, r6
 8001212:	463b      	mov	r3, r7
 8001214:	4628      	mov	r0, r5
 8001216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800121a:	f000 b817 	b.w	800124c <_write_r>

0800121e <__sseek>:
 800121e:	b510      	push	{r4, lr}
 8001220:	460c      	mov	r4, r1
 8001222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001226:	f000 f855 	bl	80012d4 <_lseek_r>
 800122a:	1c43      	adds	r3, r0, #1
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	bf15      	itete	ne
 8001230:	6560      	strne	r0, [r4, #84]	; 0x54
 8001232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800123a:	81a3      	strheq	r3, [r4, #12]
 800123c:	bf18      	it	ne
 800123e:	81a3      	strhne	r3, [r4, #12]
 8001240:	bd10      	pop	{r4, pc}

08001242 <__sclose>:
 8001242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001246:	f000 b813 	b.w	8001270 <_close_r>
	...

0800124c <_write_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d07      	ldr	r5, [pc, #28]	; (800126c <_write_r+0x20>)
 8001250:	4604      	mov	r4, r0
 8001252:	4608      	mov	r0, r1
 8001254:	4611      	mov	r1, r2
 8001256:	2200      	movs	r2, #0
 8001258:	602a      	str	r2, [r5, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	f7ff f82d 	bl	80002ba <_write>
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	d102      	bne.n	800126a <_write_r+0x1e>
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	b103      	cbz	r3, 800126a <_write_r+0x1e>
 8001268:	6023      	str	r3, [r4, #0]
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	200000a4 	.word	0x200000a4

08001270 <_close_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4d06      	ldr	r5, [pc, #24]	; (800128c <_close_r+0x1c>)
 8001274:	2300      	movs	r3, #0
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	602b      	str	r3, [r5, #0]
 800127c:	f7ff f839 	bl	80002f2 <_close>
 8001280:	1c43      	adds	r3, r0, #1
 8001282:	d102      	bne.n	800128a <_close_r+0x1a>
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	b103      	cbz	r3, 800128a <_close_r+0x1a>
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	bd38      	pop	{r3, r4, r5, pc}
 800128c:	200000a4 	.word	0x200000a4

08001290 <_fstat_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d07      	ldr	r5, [pc, #28]	; (80012b0 <_fstat_r+0x20>)
 8001294:	2300      	movs	r3, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	602b      	str	r3, [r5, #0]
 800129e:	f7ff f834 	bl	800030a <_fstat>
 80012a2:	1c43      	adds	r3, r0, #1
 80012a4:	d102      	bne.n	80012ac <_fstat_r+0x1c>
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	b103      	cbz	r3, 80012ac <_fstat_r+0x1c>
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	bd38      	pop	{r3, r4, r5, pc}
 80012ae:	bf00      	nop
 80012b0:	200000a4 	.word	0x200000a4

080012b4 <_isatty_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4d06      	ldr	r5, [pc, #24]	; (80012d0 <_isatty_r+0x1c>)
 80012b8:	2300      	movs	r3, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	602b      	str	r3, [r5, #0]
 80012c0:	f7ff f833 	bl	800032a <_isatty>
 80012c4:	1c43      	adds	r3, r0, #1
 80012c6:	d102      	bne.n	80012ce <_isatty_r+0x1a>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	b103      	cbz	r3, 80012ce <_isatty_r+0x1a>
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	200000a4 	.word	0x200000a4

080012d4 <_lseek_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4d07      	ldr	r5, [pc, #28]	; (80012f4 <_lseek_r+0x20>)
 80012d8:	4604      	mov	r4, r0
 80012da:	4608      	mov	r0, r1
 80012dc:	4611      	mov	r1, r2
 80012de:	2200      	movs	r2, #0
 80012e0:	602a      	str	r2, [r5, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f7ff f82c 	bl	8000340 <_lseek>
 80012e8:	1c43      	adds	r3, r0, #1
 80012ea:	d102      	bne.n	80012f2 <_lseek_r+0x1e>
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	b103      	cbz	r3, 80012f2 <_lseek_r+0x1e>
 80012f0:	6023      	str	r3, [r4, #0]
 80012f2:	bd38      	pop	{r3, r4, r5, pc}
 80012f4:	200000a4 	.word	0x200000a4

080012f8 <__malloc_lock>:
 80012f8:	4801      	ldr	r0, [pc, #4]	; (8001300 <__malloc_lock+0x8>)
 80012fa:	f7ff be0b 	b.w	8000f14 <__retarget_lock_acquire_recursive>
 80012fe:	bf00      	nop
 8001300:	20000098 	.word	0x20000098

08001304 <__malloc_unlock>:
 8001304:	4801      	ldr	r0, [pc, #4]	; (800130c <__malloc_unlock+0x8>)
 8001306:	f7ff be06 	b.w	8000f16 <__retarget_lock_release_recursive>
 800130a:	bf00      	nop
 800130c:	20000098 	.word	0x20000098

08001310 <_read_r>:
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	4d07      	ldr	r5, [pc, #28]	; (8001330 <_read_r+0x20>)
 8001314:	4604      	mov	r4, r0
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	2200      	movs	r2, #0
 800131c:	602a      	str	r2, [r5, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	f7fe ffae 	bl	8000280 <_read>
 8001324:	1c43      	adds	r3, r0, #1
 8001326:	d102      	bne.n	800132e <_read_r+0x1e>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	b103      	cbz	r3, 800132e <_read_r+0x1e>
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	bd38      	pop	{r3, r4, r5, pc}
 8001330:	200000a4 	.word	0x200000a4

08001334 <_init>:
 8001334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001336:	bf00      	nop
 8001338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133a:	bc08      	pop	{r3}
 800133c:	469e      	mov	lr, r3
 800133e:	4770      	bx	lr

08001340 <_fini>:
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	bf00      	nop
 8001344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001346:	bc08      	pop	{r3}
 8001348:	469e      	mov	lr, r3
 800134a:	4770      	bx	lr
